a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700    1) /*
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700    2)  * Core MDSS framebuffer driver.
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700    3)  *
cadc1614708b9 (Venkata Prahlad Valluru       2019-05-07 19:58:00 +0530    4)  * Copyright (c) 2008-2019, The Linux Foundation. All rights reserved.
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700    5)  * Copyright (C) 2007 Google Incorporated
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700    6)  *
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700    7)  * This software is licensed under the terms of the GNU General Public
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700    8)  * License version 2, as published by the Free Software Foundation, and
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700    9)  * may be copied, distributed, and modified under those terms.
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700   10)  *
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700   11)  * This program is distributed in the hope that it will be useful,
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700   12)  * but WITHOUT ANY WARRANTY; without even the implied warranty of
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700   13)  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700   14)  * GNU General Public License for more details.
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700   15)  */
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700   16) 
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700   17) #define pr_fmt(fmt)	"%s: " fmt, __func__
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700   18) 
f6fb77ca7d114 (Tatenda Chipeperekwa          2015-02-23 21:18:29 -0800   19) #include <linux/videodev2.h>
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700   20) #include <linux/bootmem.h>
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700   21) #include <linux/console.h>
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700   22) #include <linux/debugfs.h>
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700   23) #include <linux/delay.h>
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700   24) #include <linux/device.h>
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700   25) #include <linux/dma-mapping.h>
d7580b4b6570d (Jeevan Shriram                2014-03-27 10:53:40 -0700   26) #include <linux/dma-buf.h>
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700   27) #include <linux/fb.h>
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700   28) #include <linux/init.h>
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700   29) #include <linux/ioport.h>
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700   30) #include <linux/kernel.h>
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700   31) #include <linux/memory.h>
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700   32) #include <linux/mm.h>
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700   33) #include <linux/module.h>
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700   34) #include <linux/moduleparam.h>
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700   35) #include <linux/msm_mdp.h>
d8998364c926c (Ujwal Patel                   2013-08-12 10:58:47 -0700   36) #include <linux/of.h>
d8998364c926c (Ujwal Patel                   2013-08-12 10:58:47 -0700   37) #include <linux/of_address.h>
b1e3eee5eea67 (Clarence Ip                   2016-02-23 19:01:54 -0500   38) #include <linux/of_platform.h>
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700   39) #include <linux/proc_fs.h>
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700   40) #include <linux/pm_runtime.h>
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700   41) #include <linux/slab.h>
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700   42) #include <linux/string.h>
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700   43) #include <linux/uaccess.h>
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700   44) #include <linux/version.h>
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700   45) #include <linux/vmalloc.h>
9bc30b3c612e8 (Ken Zhang                     2012-11-07 18:33:16 -0500   46) #include <linux/file.h>
0df863c8161ca (Adrian Salido-Moreno          2013-10-15 20:31:50 -0700   47) #include <linux/kthread.h>
2b0ce3331c94c (Terence Hampson               2014-09-05 10:34:11 -0400   48) #include <linux/dma-buf.h>
9bc30b3c612e8 (Ken Zhang                     2012-11-07 18:33:16 -0500   49) #include <sync.h>
9bc30b3c612e8 (Ken Zhang                     2012-11-07 18:33:16 -0500   50) #include <sw_sync.h>
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700   51) 
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700   52) #include "mdss_fb.h"
fb9d80000c238 (Dhaval Patel                  2014-03-19 17:04:29 -0700   53) #include "mdss_mdp_splash_logo.h"
64d037028cb92 (Ingrid Gallardo               2014-11-25 14:14:02 -0800   54) #define CREATE_TRACE_POINTS
64d037028cb92 (Ingrid Gallardo               2014-11-25 14:14:02 -0800   55) #include "mdss_debug.h"
ce2af4cff4d90 (Veera Sundaram Sankaran       2014-10-22 10:28:34 -0700   56) #include "mdss_smmu.h"
2707818973b22 (Ingrid Gallardo               2015-05-12 22:25:41 -0700   57) #include "mdss_mdp.h"
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700   58) 
be48303843a06 (SGCMarkus                     2019-07-09 09:54:59 +0200   59) #ifdef CONFIG_MACH_LGE
be48303843a06 (SGCMarkus                     2019-07-09 09:54:59 +0200   60) #include <soc/qcom/lge/board_lge.h>
be48303843a06 (SGCMarkus                     2019-07-09 09:54:59 +0200   61) #include <linux/timer.h>
be48303843a06 (SGCMarkus                     2019-07-09 09:54:59 +0200   62) #include <linux/debugfs.h>
be48303843a06 (SGCMarkus                     2019-07-09 09:54:59 +0200   63) #endif
be48303843a06 (SGCMarkus                     2019-07-09 09:54:59 +0200   64) #ifdef CONFIG_LGE_DISPLAY_COMMON
be48303843a06 (SGCMarkus                     2019-07-09 09:54:59 +0200   65) #include "lge/lge_mdss_display.h"
be48303843a06 (SGCMarkus                     2019-07-09 09:54:59 +0200   66) #endif
be48303843a06 (SGCMarkus                     2019-07-09 09:54:59 +0200   67) #if defined(CONFIG_LGE_INTERVAL_MONITOR)
be48303843a06 (SGCMarkus                     2019-07-09 09:54:59 +0200   68) #include "lge/lge_interval_monitor.h"
be48303843a06 (SGCMarkus                     2019-07-09 09:54:59 +0200   69) #endif
be48303843a06 (SGCMarkus                     2019-07-09 09:54:59 +0200   70) 
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700   71) #ifdef CONFIG_FB_MSM_TRIPLE_BUFFER
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700   72) #define MDSS_FB_NUM 3
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700   73) #else
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700   74) #define MDSS_FB_NUM 2
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700   75) #endif
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700   76) 
b1e3eee5eea67 (Clarence Ip                   2016-02-23 19:01:54 -0500   77) #ifndef EXPORT_COMPAT
b1e3eee5eea67 (Clarence Ip                   2016-02-23 19:01:54 -0500   78) #define EXPORT_COMPAT(x)
b1e3eee5eea67 (Clarence Ip                   2016-02-23 19:01:54 -0500   79) #endif
b1e3eee5eea67 (Clarence Ip                   2016-02-23 19:01:54 -0500   80) 
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700   81) #define MAX_FBI_LIST 32
fbcc005c2b893 (Aravind Venkateswaran         2014-10-30 15:03:45 -0700   82) 
7f3712ee81e1a (Sravanthi Kollukuduru         2016-03-02 14:53:28 +0530   83) #ifndef TARGET_HW_MDSS_MDP3
77437745cb33f (Aravind Venkateswaran         2015-03-10 11:42:29 -0700   84) #define BLANK_FLAG_LP	FB_BLANK_NORMAL
77437745cb33f (Aravind Venkateswaran         2015-03-10 11:42:29 -0700   85) #define BLANK_FLAG_ULP	FB_BLANK_VSYNC_SUSPEND
7f3712ee81e1a (Sravanthi Kollukuduru         2016-03-02 14:53:28 +0530   86) #else
7f3712ee81e1a (Sravanthi Kollukuduru         2016-03-02 14:53:28 +0530   87) #define BLANK_FLAG_LP	FB_BLANK_VSYNC_SUSPEND
7f3712ee81e1a (Sravanthi Kollukuduru         2016-03-02 14:53:28 +0530   88) #define BLANK_FLAG_ULP	FB_BLANK_NORMAL
7f3712ee81e1a (Sravanthi Kollukuduru         2016-03-02 14:53:28 +0530   89) #endif
fbcc005c2b893 (Aravind Venkateswaran         2014-10-30 15:03:45 -0700   90) 
90fd65ba93d5c (Krishna Manikandan            2016-12-28 17:58:39 +0530   91) /*
90fd65ba93d5c (Krishna Manikandan            2016-12-28 17:58:39 +0530   92)  * Time period for fps calulation in micro seconds.
90fd65ba93d5c (Krishna Manikandan            2016-12-28 17:58:39 +0530   93)  * Default value is set to 1 sec.
90fd65ba93d5c (Krishna Manikandan            2016-12-28 17:58:39 +0530   94)  */
90fd65ba93d5c (Krishna Manikandan            2016-12-28 17:58:39 +0530   95) #define MDP_TIME_PERIOD_CALC_FPS_US	1000000
90fd65ba93d5c (Krishna Manikandan            2016-12-28 17:58:39 +0530   96) 
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700   97) static struct fb_info *fbi_list[MAX_FBI_LIST];
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700   98) static int fbi_list_index;
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700   99) 
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700  100) static u32 mdss_fb_pseudo_palette[16] = {
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700  101) 	0x00000000, 0xffffffff, 0xffffffff, 0xffffffff,
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700  102) 	0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff,
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700  103) 	0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff,
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700  104) 	0xffffffff, 0xffffffff, 0xffffffff, 0xffffffff
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700  105) };
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700  106) 
b192f3c2c194b (Xiaoming Zhou                 2012-12-21 21:23:15 -0500  107) static struct msm_mdp_interface *mdp_instance;
b192f3c2c194b (Xiaoming Zhou                 2012-12-21 21:23:15 -0500  108) 
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700  109) static int mdss_fb_register(struct msm_fb_data_type *mfd);
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700  110) static int mdss_fb_open(struct fb_info *info, int user);
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700  111) static int mdss_fb_release(struct fb_info *info, int user);
a681b26df0050 (Ujwal Patel                   2013-10-22 23:24:46 -0700  112) static int mdss_fb_release_all(struct fb_info *info, bool release_all);
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700  113) static int mdss_fb_pan_display(struct fb_var_screeninfo *var,
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700  114) 			       struct fb_info *info);
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700  115) static int mdss_fb_check_var(struct fb_var_screeninfo *var,
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700  116) 			     struct fb_info *info);
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700  117) static int mdss_fb_set_par(struct fb_info *info);
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700  118) static int mdss_fb_blank_sub(int blank_mode, struct fb_info *info,
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700  119) 			     int op_enable);
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700  120) static int mdss_fb_suspend_sub(struct msm_fb_data_type *mfd);
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700  121) static int mdss_fb_ioctl(struct fb_info *info, unsigned int cmd,
75af757c1b7ba (Dhaval Patel                  2015-11-04 14:01:09 -0800  122) 			 unsigned long arg, struct file *file);
01ea04c62e5cf (Jeevan Shriram                2014-03-26 19:47:49 -0700  123) static int mdss_fb_fbmem_ion_mmap(struct fb_info *info,
01ea04c62e5cf (Jeevan Shriram                2014-03-26 19:47:49 -0700  124) 		struct vm_area_struct *vma);
915c2f85a0db0 (Jeevan Shriram                2014-04-28 18:04:07 -0700  125) static int mdss_fb_alloc_fb_ion_memory(struct msm_fb_data_type *mfd,
915c2f85a0db0 (Jeevan Shriram                2014-04-28 18:04:07 -0700  126) 		size_t size);
9bc30b3c612e8 (Ken Zhang                     2012-11-07 18:33:16 -0500  127) static void mdss_fb_release_fences(struct msm_fb_data_type *mfd);
a964a547c7031 (Adrian Salido-Moreno          2013-09-19 19:52:09 -0700  128) static int __mdss_fb_sync_buf_done_callback(struct notifier_block *p,
a964a547c7031 (Adrian Salido-Moreno          2013-09-19 19:52:09 -0700  129) 		unsigned long val, void *data);
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700  130) 
0df863c8161ca (Adrian Salido-Moreno          2013-10-15 20:31:50 -0700  131) static int __mdss_fb_display_thread(void *data);
272d4979007a1 (Aravind Venkateswaran         2013-11-12 14:33:16 -0800  132) static int mdss_fb_pan_idle(struct msm_fb_data_type *mfd);
5f270e6406a9a (Adrian Salido-Moreno          2012-12-14 20:18:10 -0800  133) static int mdss_fb_send_panel_event(struct msm_fb_data_type *mfd,
5f270e6406a9a (Adrian Salido-Moreno          2012-12-14 20:18:10 -0800  134) 					int event, void *arg);
07930a15004de (Terence Hampson               2015-01-21 13:36:24 -0500  135) static void mdss_fb_set_mdp_sync_pt_threshold(struct msm_fb_data_type *mfd,
07930a15004de (Terence Hampson               2015-01-21 13:36:24 -0500  136) 		int type);
687db9c75e3ca (Naseer Ahmed                  2016-04-05 15:19:25 -0400  137) 
687db9c75e3ca (Naseer Ahmed                  2016-04-05 15:19:25 -0400  138) static inline void __user *to_user_ptr(uint64_t address)
687db9c75e3ca (Naseer Ahmed                  2016-04-05 15:19:25 -0400  139) {
687db9c75e3ca (Naseer Ahmed                  2016-04-05 15:19:25 -0400  140) 	return (void __user *)(uintptr_t)address;
687db9c75e3ca (Naseer Ahmed                  2016-04-05 15:19:25 -0400  141) }
687db9c75e3ca (Naseer Ahmed                  2016-04-05 15:19:25 -0400  142) 
687db9c75e3ca (Naseer Ahmed                  2016-04-05 15:19:25 -0400  143) static inline uint64_t __user to_user_u64(void *ptr)
687db9c75e3ca (Naseer Ahmed                  2016-04-05 15:19:25 -0400  144) {
687db9c75e3ca (Naseer Ahmed                  2016-04-05 15:19:25 -0400  145) 	return (uint64_t)((uintptr_t)ptr);
687db9c75e3ca (Naseer Ahmed                  2016-04-05 15:19:25 -0400  146) }
687db9c75e3ca (Naseer Ahmed                  2016-04-05 15:19:25 -0400  147) 
7b2726a393f13 (Carl Vanderlip                2012-08-28 12:03:28 -0700  148) void mdss_fb_no_update_notify_timer_cb(unsigned long data)
7b2726a393f13 (Carl Vanderlip                2012-08-28 12:03:28 -0700  149) {
7b2726a393f13 (Carl Vanderlip                2012-08-28 12:03:28 -0700  150) 	struct msm_fb_data_type *mfd = (struct msm_fb_data_type *)data;
561365346ee80 (Jayant Shekhar                2013-11-05 10:57:02 +0530  151) 	if (!mfd) {
7b2726a393f13 (Carl Vanderlip                2012-08-28 12:03:28 -0700  152) 		pr_err("%s mfd NULL\n", __func__);
561365346ee80 (Jayant Shekhar                2013-11-05 10:57:02 +0530  153) 		return;
561365346ee80 (Jayant Shekhar                2013-11-05 10:57:02 +0530  154) 	}
5c39398cd9184 (Carl Vanderlip                2013-05-30 11:48:48 -0700  155) 	mfd->no_update.value = NOTIFY_TYPE_NO_UPDATE;
7b2726a393f13 (Carl Vanderlip                2012-08-28 12:03:28 -0700  156) 	complete(&mfd->no_update.comp);
7b2726a393f13 (Carl Vanderlip                2012-08-28 12:03:28 -0700  157) }
7b2726a393f13 (Carl Vanderlip                2012-08-28 12:03:28 -0700  158) 
25ee56238aea5 (Ping Li                       2015-05-20 13:23:44 -0700  159) void mdss_fb_bl_update_notify(struct msm_fb_data_type *mfd,
25ee56238aea5 (Ping Li                       2015-05-20 13:23:44 -0700  160) 		uint32_t notification_type)
ee779a5bd98d4 (Ping Li                       2014-03-17 10:06:47 -0700  161) {
9f2bed0126343 (Gopikrishnaiah Anandan        2015-04-27 22:23:45 -0700  162) 	struct mdss_overlay_private *mdp5_data = NULL;
ee779a5bd98d4 (Ping Li                       2014-03-17 10:06:47 -0700  163) 	if (!mfd) {
ee779a5bd98d4 (Ping Li                       2014-03-17 10:06:47 -0700  164) 		pr_err("%s mfd NULL\n", __func__);
ee779a5bd98d4 (Ping Li                       2014-03-17 10:06:47 -0700  165) 		return;
ee779a5bd98d4 (Ping Li                       2014-03-17 10:06:47 -0700  166) 	}
ee779a5bd98d4 (Ping Li                       2014-03-17 10:06:47 -0700  167) 	mutex_lock(&mfd->update.lock);
25ee56238aea5 (Ping Li                       2015-05-20 13:23:44 -0700  168) 	if (mfd->update.is_suspend) {
25ee56238aea5 (Ping Li                       2015-05-20 13:23:44 -0700  169) 		mutex_unlock(&mfd->update.lock);
25ee56238aea5 (Ping Li                       2015-05-20 13:23:44 -0700  170) 		return;
25ee56238aea5 (Ping Li                       2015-05-20 13:23:44 -0700  171) 	}
ee779a5bd98d4 (Ping Li                       2014-03-17 10:06:47 -0700  172) 	if (mfd->update.ref_count > 0) {
ee779a5bd98d4 (Ping Li                       2014-03-17 10:06:47 -0700  173) 		mutex_unlock(&mfd->update.lock);
25ee56238aea5 (Ping Li                       2015-05-20 13:23:44 -0700  174) 		mfd->update.value = notification_type;
ee779a5bd98d4 (Ping Li                       2014-03-17 10:06:47 -0700  175) 		complete(&mfd->update.comp);
ee779a5bd98d4 (Ping Li                       2014-03-17 10:06:47 -0700  176) 		mutex_lock(&mfd->update.lock);
ee779a5bd98d4 (Ping Li                       2014-03-17 10:06:47 -0700  177) 	}
ee779a5bd98d4 (Ping Li                       2014-03-17 10:06:47 -0700  178) 	mutex_unlock(&mfd->update.lock);
ee779a5bd98d4 (Ping Li                       2014-03-17 10:06:47 -0700  179) 
ee779a5bd98d4 (Ping Li                       2014-03-17 10:06:47 -0700  180) 	mutex_lock(&mfd->no_update.lock);
ee779a5bd98d4 (Ping Li                       2014-03-17 10:06:47 -0700  181) 	if (mfd->no_update.ref_count > 0) {
ee779a5bd98d4 (Ping Li                       2014-03-17 10:06:47 -0700  182) 		mutex_unlock(&mfd->no_update.lock);
25ee56238aea5 (Ping Li                       2015-05-20 13:23:44 -0700  183) 		mfd->no_update.value = notification_type;
ee779a5bd98d4 (Ping Li                       2014-03-17 10:06:47 -0700  184) 		complete(&mfd->no_update.comp);
ee779a5bd98d4 (Ping Li                       2014-03-17 10:06:47 -0700  185) 		mutex_lock(&mfd->no_update.lock);
ee779a5bd98d4 (Ping Li                       2014-03-17 10:06:47 -0700  186) 	}
ee779a5bd98d4 (Ping Li                       2014-03-17 10:06:47 -0700  187) 	mutex_unlock(&mfd->no_update.lock);
9f2bed0126343 (Gopikrishnaiah Anandan        2015-04-27 22:23:45 -0700  188) 	mdp5_data = mfd_to_mdp5_data(mfd);
9f2bed0126343 (Gopikrishnaiah Anandan        2015-04-27 22:23:45 -0700  189) 	if (mdp5_data) {
25ee56238aea5 (Ping Li                       2015-05-20 13:23:44 -0700  190) 		if (notification_type == NOTIFY_TYPE_BL_AD_ATTEN_UPDATE) {
25ee56238aea5 (Ping Li                       2015-05-20 13:23:44 -0700  191) 			mdp5_data->ad_bl_events++;
25ee56238aea5 (Ping Li                       2015-05-20 13:23:44 -0700  192) 			sysfs_notify_dirent(mdp5_data->ad_bl_event_sd);
25ee56238aea5 (Ping Li                       2015-05-20 13:23:44 -0700  193) 		} else if (notification_type == NOTIFY_TYPE_BL_UPDATE) {
25ee56238aea5 (Ping Li                       2015-05-20 13:23:44 -0700  194) 			mdp5_data->bl_events++;
25ee56238aea5 (Ping Li                       2015-05-20 13:23:44 -0700  195) 			sysfs_notify_dirent(mdp5_data->bl_event_sd);
25ee56238aea5 (Ping Li                       2015-05-20 13:23:44 -0700  196) 		}
9f2bed0126343 (Gopikrishnaiah Anandan        2015-04-27 22:23:45 -0700  197) 	}
ee779a5bd98d4 (Ping Li                       2014-03-17 10:06:47 -0700  198) }
ee779a5bd98d4 (Ping Li                       2014-03-17 10:06:47 -0700  199) 
7b2726a393f13 (Carl Vanderlip                2012-08-28 12:03:28 -0700  200) static int mdss_fb_notify_update(struct msm_fb_data_type *mfd,
7b2726a393f13 (Carl Vanderlip                2012-08-28 12:03:28 -0700  201) 							unsigned long *argp)
7b2726a393f13 (Carl Vanderlip                2012-08-28 12:03:28 -0700  202) {
a637447cc1a8a (Krishna Chaitanya Parimi      2013-10-03 20:51:41 +0530  203) 	int ret;
dabc1a3dddd3f (Benet Clark                   2014-06-24 18:49:53 -0700  204) 	unsigned int notify = 0x0, to_user = 0x0;
7b2726a393f13 (Carl Vanderlip                2012-08-28 12:03:28 -0700  205) 
dabc1a3dddd3f (Benet Clark                   2014-06-24 18:49:53 -0700  206) 	ret = copy_from_user(&notify, argp, sizeof(unsigned int));
7b2726a393f13 (Carl Vanderlip                2012-08-28 12:03:28 -0700  207) 	if (ret) {
7b2726a393f13 (Carl Vanderlip                2012-08-28 12:03:28 -0700  208) 		pr_err("%s:ioctl failed\n", __func__);
7b2726a393f13 (Carl Vanderlip                2012-08-28 12:03:28 -0700  209) 		return ret;
7b2726a393f13 (Carl Vanderlip                2012-08-28 12:03:28 -0700  210) 	}
7b2726a393f13 (Carl Vanderlip                2012-08-28 12:03:28 -0700  211) 
d00b8490439fd (Arpita Banerjee               2013-06-11 19:24:20 -0700  212) 	if (notify > NOTIFY_UPDATE_POWER_OFF)
7b2726a393f13 (Carl Vanderlip                2012-08-28 12:03:28 -0700  213) 		return -EINVAL;
7b2726a393f13 (Carl Vanderlip                2012-08-28 12:03:28 -0700  214) 
1f137a2c70474 (Krishna Chaitanya Parimi      2015-02-10 23:37:05 -0800  215) 	if (notify == NOTIFY_UPDATE_INIT) {
1f137a2c70474 (Krishna Chaitanya Parimi      2015-02-10 23:37:05 -0800  216) 		mutex_lock(&mfd->update.lock);
1f137a2c70474 (Krishna Chaitanya Parimi      2015-02-10 23:37:05 -0800  217) 		mfd->update.init_done = true;
1f137a2c70474 (Krishna Chaitanya Parimi      2015-02-10 23:37:05 -0800  218) 		mutex_unlock(&mfd->update.lock);
1f137a2c70474 (Krishna Chaitanya Parimi      2015-02-10 23:37:05 -0800  219) 		ret = 1;
1f137a2c70474 (Krishna Chaitanya Parimi      2015-02-10 23:37:05 -0800  220) 	} else if (notify == NOTIFY_UPDATE_DEINIT) {
1f137a2c70474 (Krishna Chaitanya Parimi      2015-02-10 23:37:05 -0800  221) 		mutex_lock(&mfd->update.lock);
1f137a2c70474 (Krishna Chaitanya Parimi      2015-02-10 23:37:05 -0800  222) 		mfd->update.init_done = false;
1f137a2c70474 (Krishna Chaitanya Parimi      2015-02-10 23:37:05 -0800  223) 		mutex_unlock(&mfd->update.lock);
1f137a2c70474 (Krishna Chaitanya Parimi      2015-02-10 23:37:05 -0800  224) 		complete(&mfd->update.comp);
1f137a2c70474 (Krishna Chaitanya Parimi      2015-02-10 23:37:05 -0800  225) 		complete(&mfd->no_update.comp);
1f137a2c70474 (Krishna Chaitanya Parimi      2015-02-10 23:37:05 -0800  226) 		ret = 1;
1f137a2c70474 (Krishna Chaitanya Parimi      2015-02-10 23:37:05 -0800  227) 	} else if (mfd->update.is_suspend) {
dab2b4d7faa88 (Krishna Chaitanya Parimi      2014-01-03 18:00:50 +0530  228) 		to_user = NOTIFY_TYPE_SUSPEND;
dab2b4d7faa88 (Krishna Chaitanya Parimi      2014-01-03 18:00:50 +0530  229) 		mfd->update.is_suspend = 0;
dab2b4d7faa88 (Krishna Chaitanya Parimi      2014-01-03 18:00:50 +0530  230) 		ret = 1;
dab2b4d7faa88 (Krishna Chaitanya Parimi      2014-01-03 18:00:50 +0530  231) 	} else if (notify == NOTIFY_UPDATE_START) {
ee779a5bd98d4 (Ping Li                       2014-03-17 10:06:47 -0700  232) 		mutex_lock(&mfd->update.lock);
1f137a2c70474 (Krishna Chaitanya Parimi      2015-02-10 23:37:05 -0800  233) 		if (mfd->update.init_done)
1f137a2c70474 (Krishna Chaitanya Parimi      2015-02-10 23:37:05 -0800  234) 			reinit_completion(&mfd->update.comp);
1f137a2c70474 (Krishna Chaitanya Parimi      2015-02-10 23:37:05 -0800  235) 		else {
1f137a2c70474 (Krishna Chaitanya Parimi      2015-02-10 23:37:05 -0800  236) 			mutex_unlock(&mfd->update.lock);
1f137a2c70474 (Krishna Chaitanya Parimi      2015-02-10 23:37:05 -0800  237) 			pr_err("notify update start called without init\n");
1f137a2c70474 (Krishna Chaitanya Parimi      2015-02-10 23:37:05 -0800  238) 			return -EINVAL;
1f137a2c70474 (Krishna Chaitanya Parimi      2015-02-10 23:37:05 -0800  239) 		}
ee779a5bd98d4 (Ping Li                       2014-03-17 10:06:47 -0700  240) 		mfd->update.ref_count++;
ee779a5bd98d4 (Ping Li                       2014-03-17 10:06:47 -0700  241) 		mutex_unlock(&mfd->update.lock);
7b01cf201c4e8 (Krishna Chaitanya Parimi      2014-02-28 18:48:01 +0530  242) 		ret = wait_for_completion_interruptible_timeout(
7b2726a393f13 (Carl Vanderlip                2012-08-28 12:03:28 -0700  243) 						&mfd->update.comp, 4 * HZ);
ee779a5bd98d4 (Ping Li                       2014-03-17 10:06:47 -0700  244) 		mutex_lock(&mfd->update.lock);
ee779a5bd98d4 (Ping Li                       2014-03-17 10:06:47 -0700  245) 		mfd->update.ref_count--;
ee779a5bd98d4 (Ping Li                       2014-03-17 10:06:47 -0700  246) 		mutex_unlock(&mfd->update.lock);
a637447cc1a8a (Krishna Chaitanya Parimi      2013-10-03 20:51:41 +0530  247) 		to_user = (unsigned int)mfd->update.value;
033ee7261a03c (Krishna Chaitanya Parimi      2013-12-30 09:32:58 +0530  248) 		if (mfd->update.type == NOTIFY_TYPE_SUSPEND) {
033ee7261a03c (Krishna Chaitanya Parimi      2013-12-30 09:32:58 +0530  249) 			to_user = (unsigned int)mfd->update.type;
033ee7261a03c (Krishna Chaitanya Parimi      2013-12-30 09:32:58 +0530  250) 			ret = 1;
033ee7261a03c (Krishna Chaitanya Parimi      2013-12-30 09:32:58 +0530  251) 		}
d00b8490439fd (Arpita Banerjee               2013-06-11 19:24:20 -0700  252) 	} else if (notify == NOTIFY_UPDATE_STOP) {
1f137a2c70474 (Krishna Chaitanya Parimi      2015-02-10 23:37:05 -0800  253) 		mutex_lock(&mfd->update.lock);
acef8428426c5 (Naseer Ahmed                  2016-11-09 12:14:31 -0500  254) 		if (mfd->update.init_done) {
acef8428426c5 (Naseer Ahmed                  2016-11-09 12:14:31 -0500  255) 			mutex_unlock(&mfd->update.lock);
acef8428426c5 (Naseer Ahmed                  2016-11-09 12:14:31 -0500  256) 			mutex_lock(&mfd->no_update.lock);
1f137a2c70474 (Krishna Chaitanya Parimi      2015-02-10 23:37:05 -0800  257) 			reinit_completion(&mfd->no_update.comp);
acef8428426c5 (Naseer Ahmed                  2016-11-09 12:14:31 -0500  258) 		} else {
1f137a2c70474 (Krishna Chaitanya Parimi      2015-02-10 23:37:05 -0800  259) 			mutex_unlock(&mfd->update.lock);
1f137a2c70474 (Krishna Chaitanya Parimi      2015-02-10 23:37:05 -0800  260) 			pr_err("notify update stop called without init\n");
1f137a2c70474 (Krishna Chaitanya Parimi      2015-02-10 23:37:05 -0800  261) 			return -EINVAL;
1f137a2c70474 (Krishna Chaitanya Parimi      2015-02-10 23:37:05 -0800  262) 		}
ee779a5bd98d4 (Ping Li                       2014-03-17 10:06:47 -0700  263) 		mfd->no_update.ref_count++;
ee779a5bd98d4 (Ping Li                       2014-03-17 10:06:47 -0700  264) 		mutex_unlock(&mfd->no_update.lock);
7b01cf201c4e8 (Krishna Chaitanya Parimi      2014-02-28 18:48:01 +0530  265) 		ret = wait_for_completion_interruptible_timeout(
7b2726a393f13 (Carl Vanderlip                2012-08-28 12:03:28 -0700  266) 						&mfd->no_update.comp, 4 * HZ);
ee779a5bd98d4 (Ping Li                       2014-03-17 10:06:47 -0700  267) 		mutex_lock(&mfd->no_update.lock);
ee779a5bd98d4 (Ping Li                       2014-03-17 10:06:47 -0700  268) 		mfd->no_update.ref_count--;
ee779a5bd98d4 (Ping Li                       2014-03-17 10:06:47 -0700  269) 		mutex_unlock(&mfd->no_update.lock);
a637447cc1a8a (Krishna Chaitanya Parimi      2013-10-03 20:51:41 +0530  270) 		to_user = (unsigned int)mfd->no_update.value;
d00b8490439fd (Arpita Banerjee               2013-06-11 19:24:20 -0700  271) 	} else {
49036d7c0ebbd (Aravind Venkateswaran         2014-08-01 17:20:51 -0700  272) 		if (mdss_fb_is_power_on(mfd)) {
309facd77e16d (Terence Hampson               2014-08-28 15:18:03 -0400  273) 			reinit_completion(&mfd->power_off_comp);
7b01cf201c4e8 (Krishna Chaitanya Parimi      2014-02-28 18:48:01 +0530  274) 			ret = wait_for_completion_interruptible_timeout(
d00b8490439fd (Arpita Banerjee               2013-06-11 19:24:20 -0700  275) 						&mfd->power_off_comp, 1 * HZ);
d00b8490439fd (Arpita Banerjee               2013-06-11 19:24:20 -0700  276) 		}
7b2726a393f13 (Carl Vanderlip                2012-08-28 12:03:28 -0700  277) 	}
d00b8490439fd (Arpita Banerjee               2013-06-11 19:24:20 -0700  278) 
7b2726a393f13 (Carl Vanderlip                2012-08-28 12:03:28 -0700  279) 	if (ret == 0)
7b2726a393f13 (Carl Vanderlip                2012-08-28 12:03:28 -0700  280) 		ret = -ETIMEDOUT;
c0129578c5b78 (Carl Vanderlip                2013-05-31 11:55:22 -0700  281) 	else if (ret > 0)
dabc1a3dddd3f (Benet Clark                   2014-06-24 18:49:53 -0700  282) 		ret = copy_to_user(argp, &to_user, sizeof(unsigned int));
5c39398cd9184 (Carl Vanderlip                2013-05-30 11:48:48 -0700  283) 	return ret;
7b2726a393f13 (Carl Vanderlip                2012-08-28 12:03:28 -0700  284) }
7b2726a393f13 (Carl Vanderlip                2012-08-28 12:03:28 -0700  285) 
be48303843a06 (SGCMarkus                     2019-07-09 09:54:59 +0200  286) #if defined(CONFIG_MACH_LGE)
be48303843a06 (SGCMarkus                     2019-07-09 09:54:59 +0200  287) #define BL_ENABLE_TIME_SIZE 19
be48303843a06 (SGCMarkus                     2019-07-09 09:54:59 +0200  288) char bl_enable_time[] = "01-01 00:00:00.000";
be48303843a06 (SGCMarkus                     2019-07-09 09:54:59 +0200  289) int prev_value = 0;
be48303843a06 (SGCMarkus                     2019-07-09 09:54:59 +0200  290) 
be48303843a06 (SGCMarkus                     2019-07-09 09:54:59 +0200  291) static struct dentry *debugfs_bl_enable_time;
be48303843a06 (SGCMarkus                     2019-07-09 09:54:59 +0200  292) 
be48303843a06 (SGCMarkus                     2019-07-09 09:54:59 +0200  293) static int bl_enable_time_show(struct seq_file *m, void *unused)
be48303843a06 (SGCMarkus                     2019-07-09 09:54:59 +0200  294) {
be48303843a06 (SGCMarkus                     2019-07-09 09:54:59 +0200  295) 	seq_printf(m, "%s\n", bl_enable_time);
be48303843a06 (SGCMarkus                     2019-07-09 09:54:59 +0200  296) 	return 0;
be48303843a06 (SGCMarkus                     2019-07-09 09:54:59 +0200  297) }
be48303843a06 (SGCMarkus                     2019-07-09 09:54:59 +0200  298) 
be48303843a06 (SGCMarkus                     2019-07-09 09:54:59 +0200  299) static int bl_enable_time_open(struct inode *inode, struct file *file)
be48303843a06 (SGCMarkus                     2019-07-09 09:54:59 +0200  300) {
be48303843a06 (SGCMarkus                     2019-07-09 09:54:59 +0200  301) 	return single_open(file, bl_enable_time_show, NULL);
be48303843a06 (SGCMarkus                     2019-07-09 09:54:59 +0200  302) }
be48303843a06 (SGCMarkus                     2019-07-09 09:54:59 +0200  303) 
be48303843a06 (SGCMarkus                     2019-07-09 09:54:59 +0200  304) static const struct file_operations bl_enable_time_fops = {
be48303843a06 (SGCMarkus                     2019-07-09 09:54:59 +0200  305) 	.open		= bl_enable_time_open,
be48303843a06 (SGCMarkus                     2019-07-09 09:54:59 +0200  306) 	.read		= seq_read,
be48303843a06 (SGCMarkus                     2019-07-09 09:54:59 +0200  307) 	.llseek		= seq_lseek,
be48303843a06 (SGCMarkus                     2019-07-09 09:54:59 +0200  308) };
be48303843a06 (SGCMarkus                     2019-07-09 09:54:59 +0200  309) #endif
be48303843a06 (SGCMarkus                     2019-07-09 09:54:59 +0200  310) 
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700  311) static int lcd_backlight_registered;
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700  312) 
be48303843a06 (SGCMarkus                     2019-07-09 09:54:59 +0200  313) #if defined(CONFIG_LGE_DISPLAY_VIDEO_ENHANCEMENT)
be48303843a06 (SGCMarkus                     2019-07-09 09:54:59 +0200  314) void mdss_fb_set_bl_brightness(struct led_classdev *led_cdev,
be48303843a06 (SGCMarkus                     2019-07-09 09:54:59 +0200  315) 				      enum led_brightness value)
be48303843a06 (SGCMarkus                     2019-07-09 09:54:59 +0200  316) #else
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700  317) static void mdss_fb_set_bl_brightness(struct led_classdev *led_cdev,
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700  318) 				      enum led_brightness value)
be48303843a06 (SGCMarkus                     2019-07-09 09:54:59 +0200  319) #endif /* CONFIG_LGE_DISPLAY_VIDEO_ENHANCEMENT */
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700  320) {
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700  321) 	struct msm_fb_data_type *mfd = dev_get_drvdata(led_cdev->dev->parent);
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700  322) 	int bl_lvl;
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700  323) 
be48303843a06 (SGCMarkus                     2019-07-09 09:54:59 +0200  324) #if defined(CONFIG_MACH_LGE)
be48303843a06 (SGCMarkus                     2019-07-09 09:54:59 +0200  325) 	struct timespec time;
be48303843a06 (SGCMarkus                     2019-07-09 09:54:59 +0200  326) 	struct tm tmresult;
be48303843a06 (SGCMarkus                     2019-07-09 09:54:59 +0200  327) 	int create_debugfs = 0;
be48303843a06 (SGCMarkus                     2019-07-09 09:54:59 +0200  328) #endif
a506802723703 (Shimrit Malichi               2015-01-12 10:37:10 +0200  329) 	if (mfd->boot_notification_led) {
a506802723703 (Shimrit Malichi               2015-01-12 10:37:10 +0200  330) 		led_trigger_event(mfd->boot_notification_led, 0);
a506802723703 (Shimrit Malichi               2015-01-12 10:37:10 +0200  331) 		mfd->boot_notification_led = NULL;
a506802723703 (Shimrit Malichi               2015-01-12 10:37:10 +0200  332) 	}
a506802723703 (Shimrit Malichi               2015-01-12 10:37:10 +0200  333) 
2d9ff87c8c075 (Ping Li                       2013-11-14 03:33:12 -0500  334) 	if (value > mfd->panel_info->brightness_max)
2d9ff87c8c075 (Ping Li                       2013-11-14 03:33:12 -0500  335) 		value = mfd->panel_info->brightness_max;
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700  336) 
be48303843a06 (SGCMarkus                     2019-07-09 09:54:59 +0200  337) 
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700  338) 	/* This maps android backlight level 0 to 255 into
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700  339) 	   driver backlight level 0 to bl_max with rounding */
fd31eb58f8449 (Carl Vanderlip                2013-05-19 12:08:33 -0700  340) 	MDSS_BRIGHT_TO_BL(bl_lvl, value, mfd->panel_info->bl_max,
2d9ff87c8c075 (Ping Li                       2013-11-14 03:33:12 -0500  341) 				mfd->panel_info->brightness_max);
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700  342) 	if (!bl_lvl && value)
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700  343) 		bl_lvl = 1;
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700  344) 
be48303843a06 (SGCMarkus                     2019-07-09 09:54:59 +0200  345) 	if (!IS_CALIB_MODE_BL(mfd) &&
be48303843a06 (SGCMarkus                     2019-07-09 09:54:59 +0200  346) 			(!mfd->ext_bl_ctrl || !value || !mfd->bl_level)) {
89d9152c0e769 (Carl Vanderlip                2013-05-17 13:52:53 -0700  347) 		mutex_lock(&mfd->bl_lock);
89d9152c0e769 (Carl Vanderlip                2013-05-17 13:52:53 -0700  348) 		mdss_fb_set_backlight(mfd, bl_lvl);
89d9152c0e769 (Carl Vanderlip                2013-05-17 13:52:53 -0700  349) 		mutex_unlock(&mfd->bl_lock);
89d9152c0e769 (Carl Vanderlip                2013-05-17 13:52:53 -0700  350) 	}
be48303843a06 (SGCMarkus                     2019-07-09 09:54:59 +0200  351) 
be48303843a06 (SGCMarkus                     2019-07-09 09:54:59 +0200  352) #if defined(CONFIG_MACH_LGE)
be48303843a06 (SGCMarkus                     2019-07-09 09:54:59 +0200  353) 	if (!create_debugfs) {
be48303843a06 (SGCMarkus                     2019-07-09 09:54:59 +0200  354) 		debugfs_bl_enable_time = debugfs_create_file("bl_enable_time",
be48303843a06 (SGCMarkus                     2019-07-09 09:54:59 +0200  355) 				S_IRUGO, NULL, NULL,
be48303843a06 (SGCMarkus                     2019-07-09 09:54:59 +0200  356) 				&bl_enable_time_fops);
be48303843a06 (SGCMarkus                     2019-07-09 09:54:59 +0200  357) 		create_debugfs = 1;
be48303843a06 (SGCMarkus                     2019-07-09 09:54:59 +0200  358) 	}
be48303843a06 (SGCMarkus                     2019-07-09 09:54:59 +0200  359) 	if (value > 0 && prev_value == 0) {
be48303843a06 (SGCMarkus                     2019-07-09 09:54:59 +0200  360) 		time = __current_kernel_time();
be48303843a06 (SGCMarkus                     2019-07-09 09:54:59 +0200  361) 		time_to_tm(time.tv_sec, sys_tz.tz_minuteswest * 60 * (-1),
be48303843a06 (SGCMarkus                     2019-07-09 09:54:59 +0200  362) 				&tmresult);
be48303843a06 (SGCMarkus                     2019-07-09 09:54:59 +0200  363) 		snprintf(bl_enable_time,
be48303843a06 (SGCMarkus                     2019-07-09 09:54:59 +0200  364) 				BL_ENABLE_TIME_SIZE,
be48303843a06 (SGCMarkus                     2019-07-09 09:54:59 +0200  365) 				"%02d-%02d %02d:%02d:%02d.%03lu\n",
be48303843a06 (SGCMarkus                     2019-07-09 09:54:59 +0200  366) 				tmresult.tm_mon+1,
be48303843a06 (SGCMarkus                     2019-07-09 09:54:59 +0200  367) 				tmresult.tm_mday,
be48303843a06 (SGCMarkus                     2019-07-09 09:54:59 +0200  368) 				tmresult.tm_hour,
be48303843a06 (SGCMarkus                     2019-07-09 09:54:59 +0200  369) 				tmresult.tm_min,
be48303843a06 (SGCMarkus                     2019-07-09 09:54:59 +0200  370) 				tmresult.tm_sec,
be48303843a06 (SGCMarkus                     2019-07-09 09:54:59 +0200  371) 				(unsigned long) time.tv_nsec/1000000);
be48303843a06 (SGCMarkus                     2019-07-09 09:54:59 +0200  372) 		printk(KERN_EMERG "bl_enable_time:%s", bl_enable_time);
be48303843a06 (SGCMarkus                     2019-07-09 09:54:59 +0200  373) 	}
be48303843a06 (SGCMarkus                     2019-07-09 09:54:59 +0200  374) 	prev_value = value;
be48303843a06 (SGCMarkus                     2019-07-09 09:54:59 +0200  375) #endif
be48303843a06 (SGCMarkus                     2019-07-09 09:54:59 +0200  376) 
91939509bccbc (Xu Yang                       2017-03-23 15:58:19 +0800  377) 	mfd->bl_level_usr = bl_lvl;
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700  378) }
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700  379) 
6baec9abc01da (Xu Yang                       2017-02-15 09:29:27 +0800  380) static enum led_brightness mdss_fb_get_bl_brightness(
6baec9abc01da (Xu Yang                       2017-02-15 09:29:27 +0800  381) 	struct led_classdev *led_cdev)
6baec9abc01da (Xu Yang                       2017-02-15 09:29:27 +0800  382) {
be48303843a06 (SGCMarkus                     2019-07-09 09:54:59 +0200  383) #if defined(CONFIG_LGE_DISPLAY_COMMON)
be48303843a06 (SGCMarkus                     2019-07-09 09:54:59 +0200  384) 	return led_cdev->brightness;
be48303843a06 (SGCMarkus                     2019-07-09 09:54:59 +0200  385) #else  /* qct original */
6baec9abc01da (Xu Yang                       2017-02-15 09:29:27 +0800  386) 	struct msm_fb_data_type *mfd = dev_get_drvdata(led_cdev->dev->parent);
6baec9abc01da (Xu Yang                       2017-02-15 09:29:27 +0800  387) 	enum led_brightness value;
6baec9abc01da (Xu Yang                       2017-02-15 09:29:27 +0800  388) 
91939509bccbc (Xu Yang                       2017-03-23 15:58:19 +0800  389) 	MDSS_BL_TO_BRIGHT(value, mfd->bl_level_usr, mfd->panel_info->bl_max,
6baec9abc01da (Xu Yang                       2017-02-15 09:29:27 +0800  390) 			  mfd->panel_info->brightness_max);
6baec9abc01da (Xu Yang                       2017-02-15 09:29:27 +0800  391) 
6baec9abc01da (Xu Yang                       2017-02-15 09:29:27 +0800  392) 	return value;
be48303843a06 (SGCMarkus                     2019-07-09 09:54:59 +0200  393) #endif
6baec9abc01da (Xu Yang                       2017-02-15 09:29:27 +0800  394) }
6baec9abc01da (Xu Yang                       2017-02-15 09:29:27 +0800  395) 
be48303843a06 (SGCMarkus                     2019-07-09 09:54:59 +0200  396) #if defined(CONFIG_LGE_DISPLAY_VIDEO_ENHANCEMENT)
be48303843a06 (SGCMarkus                     2019-07-09 09:54:59 +0200  397) struct led_classdev backlight_led = {
be48303843a06 (SGCMarkus                     2019-07-09 09:54:59 +0200  398) #else
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700  399) static struct led_classdev backlight_led = {
be48303843a06 (SGCMarkus                     2019-07-09 09:54:59 +0200  400) #endif /* CONFIG_LGE_DISPLAY_VIDEO_ENHANCEMENT */
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700  401) 	.name           = "lcd-backlight",
db74d3e4abfd7 (Shivaraj Shetty               2015-06-05 12:04:56 +0530  402) 	.brightness     = MDSS_MAX_BL_BRIGHTNESS / 2,
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700  403) 	.brightness_set = mdss_fb_set_bl_brightness,
6baec9abc01da (Xu Yang                       2017-02-15 09:29:27 +0800  404) 	.brightness_get = mdss_fb_get_bl_brightness,
7c78b51226bf2 (Adrian Salido-Moreno          2013-10-01 12:15:15 -0700  405) 	.max_brightness = MDSS_MAX_BL_BRIGHTNESS,
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700  406) };
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700  407) 
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700  408) static ssize_t mdss_fb_get_type(struct device *dev,
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700  409) 				struct device_attribute *attr, char *buf)
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700  410) {
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700  411) 	ssize_t ret = 0;
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700  412) 	struct fb_info *fbi = dev_get_drvdata(dev);
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700  413) 	struct msm_fb_data_type *mfd = (struct msm_fb_data_type *)fbi->par;
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700  414) 
059a1e16bbdac (Adrian Salido-Moreno          2012-11-14 17:16:03 -0800  415) 	switch (mfd->panel.type) {
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700  416) 	case NO_PANEL:
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700  417) 		ret = snprintf(buf, PAGE_SIZE, "no panel\n");
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700  418) 		break;
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700  419) 	case HDMI_PANEL:
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700  420) 		ret = snprintf(buf, PAGE_SIZE, "hdmi panel\n");
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700  421) 		break;
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700  422) 	case LVDS_PANEL:
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700  423) 		ret = snprintf(buf, PAGE_SIZE, "lvds panel\n");
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700  424) 		break;
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700  425) 	case DTV_PANEL:
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700  426) 		ret = snprintf(buf, PAGE_SIZE, "dtv panel\n");
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700  427) 		break;
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700  428) 	case MIPI_VIDEO_PANEL:
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700  429) 		ret = snprintf(buf, PAGE_SIZE, "mipi dsi video panel\n");
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700  430) 		break;
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700  431) 	case MIPI_CMD_PANEL:
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700  432) 		ret = snprintf(buf, PAGE_SIZE, "mipi dsi cmd panel\n");
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700  433) 		break;
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700  434) 	case WRITEBACK_PANEL:
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700  435) 		ret = snprintf(buf, PAGE_SIZE, "writeback panel\n");
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700  436) 		break;
cfabc2bcfe357 (Chandan Uddaraju              2016-07-26 16:01:54 -0700  437) 	case DP_PANEL:
cfabc2bcfe357 (Chandan Uddaraju              2016-07-26 16:01:54 -0700  438) 		ret = snprintf(buf, PAGE_SIZE, "dp panel\n");
bd18c2ef3365c (Asaf Penso                    2012-10-16 21:47:59 +0200  439) 		break;
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700  440) 	default:
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700  441) 		ret = snprintf(buf, PAGE_SIZE, "unknown panel\n");
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700  442) 		break;
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700  443) 	}
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700  444) 
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700  445) 	return ret;
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700  446) }
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700  447) 
44f6d6b7b256c (Adrian Salido-Moreno          2014-07-23 13:10:15 -0700  448) static int mdss_fb_get_panel_xres(struct mdss_panel_info *pinfo)
44f6d6b7b256c (Adrian Salido-Moreno          2014-07-23 13:10:15 -0700  449) {
44f6d6b7b256c (Adrian Salido-Moreno          2014-07-23 13:10:15 -0700  450) 	struct mdss_panel_data *pdata;
44f6d6b7b256c (Adrian Salido-Moreno          2014-07-23 13:10:15 -0700  451) 	int xres;
44f6d6b7b256c (Adrian Salido-Moreno          2014-07-23 13:10:15 -0700  452) 
44f6d6b7b256c (Adrian Salido-Moreno          2014-07-23 13:10:15 -0700  453) 	pdata = container_of(pinfo, struct mdss_panel_data, panel_info);
44f6d6b7b256c (Adrian Salido-Moreno          2014-07-23 13:10:15 -0700  454) 
44f6d6b7b256c (Adrian Salido-Moreno          2014-07-23 13:10:15 -0700  455) 	xres = pinfo->xres;
649c91d1cd61d (Adrian Salido-Moreno          2015-04-23 18:33:56 -0700  456) 	if (pdata->next && pdata->next->active)
44f6d6b7b256c (Adrian Salido-Moreno          2014-07-23 13:10:15 -0700  457) 		xres += mdss_fb_get_panel_xres(&pdata->next->panel_info);
9f52ca1ecbdf6 (Ashish Garg                   2017-03-26 20:19:25 +0530  458) 	if (pinfo->split_link_enabled)
9f52ca1ecbdf6 (Ashish Garg                   2017-03-26 20:19:25 +0530  459) 		xres = xres * pinfo->mipi.num_of_sublinks;
44f6d6b7b256c (Adrian Salido-Moreno          2014-07-23 13:10:15 -0700  460) 	return xres;
44f6d6b7b256c (Adrian Salido-Moreno          2014-07-23 13:10:15 -0700  461) }
44f6d6b7b256c (Adrian Salido-Moreno          2014-07-23 13:10:15 -0700  462) 
68e08b6ebcff3 (Jayant Shekhar                2014-04-10 16:15:16 +0530  463) static inline int mdss_fb_validate_split(int left, int right,
68e08b6ebcff3 (Jayant Shekhar                2014-04-10 16:15:16 +0530  464) 			struct msm_fb_data_type *mfd)
68e08b6ebcff3 (Jayant Shekhar                2014-04-10 16:15:16 +0530  465) {
68e08b6ebcff3 (Jayant Shekhar                2014-04-10 16:15:16 +0530  466) 	int rc = -EINVAL;
44f6d6b7b256c (Adrian Salido-Moreno          2014-07-23 13:10:15 -0700  467) 	u32 panel_xres = mdss_fb_get_panel_xres(mfd->panel_info);
ffaf975ec3ace (Ujwal Patel                   2014-11-14 15:02:31 -0800  468) 
ffaf975ec3ace (Ujwal Patel                   2014-11-14 15:02:31 -0800  469) 	pr_debug("%pS: split_mode = %d left=%d right=%d panel_xres=%d\n",
ffaf975ec3ace (Ujwal Patel                   2014-11-14 15:02:31 -0800  470) 		__builtin_return_address(0), mfd->split_mode,
ffaf975ec3ace (Ujwal Patel                   2014-11-14 15:02:31 -0800  471) 		left, right, panel_xres);
ffaf975ec3ace (Ujwal Patel                   2014-11-14 15:02:31 -0800  472) 
68e08b6ebcff3 (Jayant Shekhar                2014-04-10 16:15:16 +0530  473) 	/* more validate condition could be added if needed */
68e08b6ebcff3 (Jayant Shekhar                2014-04-10 16:15:16 +0530  474) 	if (left && right) {
68e08b6ebcff3 (Jayant Shekhar                2014-04-10 16:15:16 +0530  475) 		if (panel_xres == left + right) {
68e08b6ebcff3 (Jayant Shekhar                2014-04-10 16:15:16 +0530  476) 			mfd->split_fb_left = left;
68e08b6ebcff3 (Jayant Shekhar                2014-04-10 16:15:16 +0530  477) 			mfd->split_fb_right = right;
68e08b6ebcff3 (Jayant Shekhar                2014-04-10 16:15:16 +0530  478) 			rc = 0;
68e08b6ebcff3 (Jayant Shekhar                2014-04-10 16:15:16 +0530  479) 		}
68e08b6ebcff3 (Jayant Shekhar                2014-04-10 16:15:16 +0530  480) 	} else {
ffaf975ec3ace (Ujwal Patel                   2014-11-14 15:02:31 -0800  481) 		if (mfd->split_mode == MDP_DUAL_LM_DUAL_DISPLAY) {
44f6d6b7b256c (Adrian Salido-Moreno          2014-07-23 13:10:15 -0700  482) 			mfd->split_fb_left = mfd->panel_info->xres;
44f6d6b7b256c (Adrian Salido-Moreno          2014-07-23 13:10:15 -0700  483) 			mfd->split_fb_right = panel_xres - mfd->split_fb_left;
68e08b6ebcff3 (Jayant Shekhar                2014-04-10 16:15:16 +0530  484) 			rc = 0;
68e08b6ebcff3 (Jayant Shekhar                2014-04-10 16:15:16 +0530  485) 		} else {
68e08b6ebcff3 (Jayant Shekhar                2014-04-10 16:15:16 +0530  486) 			mfd->split_fb_left = mfd->split_fb_right = 0;
68e08b6ebcff3 (Jayant Shekhar                2014-04-10 16:15:16 +0530  487) 		}
68e08b6ebcff3 (Jayant Shekhar                2014-04-10 16:15:16 +0530  488) 	}
68e08b6ebcff3 (Jayant Shekhar                2014-04-10 16:15:16 +0530  489) 
68e08b6ebcff3 (Jayant Shekhar                2014-04-10 16:15:16 +0530  490) 	return rc;
68e08b6ebcff3 (Jayant Shekhar                2014-04-10 16:15:16 +0530  491) }
68e08b6ebcff3 (Jayant Shekhar                2014-04-10 16:15:16 +0530  492) 
68e08b6ebcff3 (Jayant Shekhar                2014-04-10 16:15:16 +0530  493) static ssize_t mdss_fb_store_split(struct device *dev,
68e08b6ebcff3 (Jayant Shekhar                2014-04-10 16:15:16 +0530  494) 		struct device_attribute *attr, const char *buf, size_t len)
68e08b6ebcff3 (Jayant Shekhar                2014-04-10 16:15:16 +0530  495) {
ecfab603f9dce (Dhaval Patel                  2015-03-23 22:29:02 -0700  496) 	int data[2] = {0};
68e08b6ebcff3 (Jayant Shekhar                2014-04-10 16:15:16 +0530  497) 	struct fb_info *fbi = dev_get_drvdata(dev);
68e08b6ebcff3 (Jayant Shekhar                2014-04-10 16:15:16 +0530  498) 	struct msm_fb_data_type *mfd = (struct msm_fb_data_type *)fbi->par;
68e08b6ebcff3 (Jayant Shekhar                2014-04-10 16:15:16 +0530  499) 
351537d51f5b8 (Ujwal Patel                   2015-06-03 11:20:44 -0700  500) 	if (2 != sscanf(buf, "%d %d", &data[0], &data[1]))
68e08b6ebcff3 (Jayant Shekhar                2014-04-10 16:15:16 +0530  501) 		pr_debug("Not able to read split values\n");
351537d51f5b8 (Ujwal Patel                   2015-06-03 11:20:44 -0700  502) 	else if (!mdss_fb_validate_split(data[0], data[1], mfd))
351537d51f5b8 (Ujwal Patel                   2015-06-03 11:20:44 -0700  503) 		pr_debug("split left=%d right=%d\n", data[0], data[1]);
68e08b6ebcff3 (Jayant Shekhar                2014-04-10 16:15:16 +0530  504) 
68e08b6ebcff3 (Jayant Shekhar                2014-04-10 16:15:16 +0530  505) 	return len;
d07cc414c46bf (Huaibin Yang                  2013-06-13 17:05:23 -0700  506) }
d07cc414c46bf (Huaibin Yang                  2013-06-13 17:05:23 -0700  507) 
68e08b6ebcff3 (Jayant Shekhar                2014-04-10 16:15:16 +0530  508) static ssize_t mdss_fb_show_split(struct device *dev,
d07cc414c46bf (Huaibin Yang                  2013-06-13 17:05:23 -0700  509) 		struct device_attribute *attr, char *buf)
d07cc414c46bf (Huaibin Yang                  2013-06-13 17:05:23 -0700  510) {
d07cc414c46bf (Huaibin Yang                  2013-06-13 17:05:23 -0700  511) 	ssize_t ret = 0;
d07cc414c46bf (Huaibin Yang                  2013-06-13 17:05:23 -0700  512) 	struct fb_info *fbi = dev_get_drvdata(dev);
d07cc414c46bf (Huaibin Yang                  2013-06-13 17:05:23 -0700  513) 	struct msm_fb_data_type *mfd = (struct msm_fb_data_type *)fbi->par;
d07cc414c46bf (Huaibin Yang                  2013-06-13 17:05:23 -0700  514) 	ret = snprintf(buf, PAGE_SIZE, "%d %d\n",
d07cc414c46bf (Huaibin Yang                  2013-06-13 17:05:23 -0700  515) 		       mfd->split_fb_left, mfd->split_fb_right);
d07cc414c46bf (Huaibin Yang                  2013-06-13 17:05:23 -0700  516) 	return ret;
d07cc414c46bf (Huaibin Yang                  2013-06-13 17:05:23 -0700  517) }
d07cc414c46bf (Huaibin Yang                  2013-06-13 17:05:23 -0700  518) 
68e08b6ebcff3 (Jayant Shekhar                2014-04-10 16:15:16 +0530  519) static void mdss_fb_get_split(struct msm_fb_data_type *mfd)
68e08b6ebcff3 (Jayant Shekhar                2014-04-10 16:15:16 +0530  520) {
ffaf975ec3ace (Ujwal Patel                   2014-11-14 15:02:31 -0800  521) 	if ((mfd->split_mode == MDP_SPLIT_MODE_NONE) &&
65a9c296806c4 (Adrian Salido-Moreno          2015-04-23 18:36:17 -0700  522) 	    (mfd->split_fb_left && mfd->split_fb_right))
ffaf975ec3ace (Ujwal Patel                   2014-11-14 15:02:31 -0800  523) 		mfd->split_mode = MDP_DUAL_LM_SINGLE_DISPLAY;
ffaf975ec3ace (Ujwal Patel                   2014-11-14 15:02:31 -0800  524) 
351537d51f5b8 (Ujwal Patel                   2015-06-03 11:20:44 -0700  525) 	pr_debug("split fb%d left=%d right=%d mode=%d\n", mfd->index,
ffaf975ec3ace (Ujwal Patel                   2014-11-14 15:02:31 -0800  526) 		mfd->split_fb_left, mfd->split_fb_right, mfd->split_mode);
ffaf975ec3ace (Ujwal Patel                   2014-11-14 15:02:31 -0800  527) }
ffaf975ec3ace (Ujwal Patel                   2014-11-14 15:02:31 -0800  528) 
ffaf975ec3ace (Ujwal Patel                   2014-11-14 15:02:31 -0800  529) static ssize_t mdss_fb_get_src_split_info(struct device *dev,
ffaf975ec3ace (Ujwal Patel                   2014-11-14 15:02:31 -0800  530) 	struct device_attribute *attr, char *buf)
ffaf975ec3ace (Ujwal Patel                   2014-11-14 15:02:31 -0800  531) {
ffaf975ec3ace (Ujwal Patel                   2014-11-14 15:02:31 -0800  532) 	int ret = 0;
ffaf975ec3ace (Ujwal Patel                   2014-11-14 15:02:31 -0800  533) 	struct fb_info *fbi = dev_get_drvdata(dev);
ffaf975ec3ace (Ujwal Patel                   2014-11-14 15:02:31 -0800  534) 	struct msm_fb_data_type *mfd = fbi->par;
ffaf975ec3ace (Ujwal Patel                   2014-11-14 15:02:31 -0800  535) 
ffaf975ec3ace (Ujwal Patel                   2014-11-14 15:02:31 -0800  536) 	if (is_split_lm(mfd) && (fbi->var.yres > fbi->var.xres)) {
ffaf975ec3ace (Ujwal Patel                   2014-11-14 15:02:31 -0800  537) 		pr_debug("always split mode enabled\n");
ffaf975ec3ace (Ujwal Patel                   2014-11-14 15:02:31 -0800  538) 		ret = scnprintf(buf, PAGE_SIZE,
ffaf975ec3ace (Ujwal Patel                   2014-11-14 15:02:31 -0800  539) 			"src_split_always\n");
ffaf975ec3ace (Ujwal Patel                   2014-11-14 15:02:31 -0800  540) 	}
ffaf975ec3ace (Ujwal Patel                   2014-11-14 15:02:31 -0800  541) 
ffaf975ec3ace (Ujwal Patel                   2014-11-14 15:02:31 -0800  542) 	return ret;
68e08b6ebcff3 (Jayant Shekhar                2014-04-10 16:15:16 +0530  543) }
68e08b6ebcff3 (Jayant Shekhar                2014-04-10 16:15:16 +0530  544) 
fe4c3c2f7531c (Shivaraj Shetty               2014-07-03 11:35:29 +0530  545) static ssize_t mdss_fb_get_thermal_level(struct device *dev,
fe4c3c2f7531c (Shivaraj Shetty               2014-07-03 11:35:29 +0530  546) 		struct device_attribute *attr, char *buf)
fe4c3c2f7531c (Shivaraj Shetty               2014-07-03 11:35:29 +0530  547) {
fe4c3c2f7531c (Shivaraj Shetty               2014-07-03 11:35:29 +0530  548) 	struct fb_info *fbi = dev_get_drvdata(dev);
fe4c3c2f7531c (Shivaraj Shetty               2014-07-03 11:35:29 +0530  549) 	struct msm_fb_data_type *mfd = fbi->par;
fe4c3c2f7531c (Shivaraj Shetty               2014-07-03 11:35:29 +0530  550) 	int ret;
fe4c3c2f7531c (Shivaraj Shetty               2014-07-03 11:35:29 +0530  551) 
fe4c3c2f7531c (Shivaraj Shetty               2014-07-03 11:35:29 +0530  552) 	ret = scnprintf(buf, PAGE_SIZE, "thermal_level=%d\n",
fe4c3c2f7531c (Shivaraj Shetty               2014-07-03 11:35:29 +0530  553) 						mfd->thermal_level);
fe4c3c2f7531c (Shivaraj Shetty               2014-07-03 11:35:29 +0530  554) 
fe4c3c2f7531c (Shivaraj Shetty               2014-07-03 11:35:29 +0530  555) 	return ret;
fe4c3c2f7531c (Shivaraj Shetty               2014-07-03 11:35:29 +0530  556) }
fe4c3c2f7531c (Shivaraj Shetty               2014-07-03 11:35:29 +0530  557) 
fe4c3c2f7531c (Shivaraj Shetty               2014-07-03 11:35:29 +0530  558) static ssize_t mdss_fb_set_thermal_level(struct device *dev,
fe4c3c2f7531c (Shivaraj Shetty               2014-07-03 11:35:29 +0530  559) 	struct device_attribute *attr, const char *buf, size_t count)
fe4c3c2f7531c (Shivaraj Shetty               2014-07-03 11:35:29 +0530  560) {
fe4c3c2f7531c (Shivaraj Shetty               2014-07-03 11:35:29 +0530  561) 	struct fb_info *fbi = dev_get_drvdata(dev);
fe4c3c2f7531c (Shivaraj Shetty               2014-07-03 11:35:29 +0530  562) 	struct msm_fb_data_type *mfd = fbi->par;
fe4c3c2f7531c (Shivaraj Shetty               2014-07-03 11:35:29 +0530  563) 	int rc = 0;
fe4c3c2f7531c (Shivaraj Shetty               2014-07-03 11:35:29 +0530  564) 	int thermal_level = 0;
fe4c3c2f7531c (Shivaraj Shetty               2014-07-03 11:35:29 +0530  565) 
fe4c3c2f7531c (Shivaraj Shetty               2014-07-03 11:35:29 +0530  566) 	rc = kstrtoint(buf, 10, &thermal_level);
fe4c3c2f7531c (Shivaraj Shetty               2014-07-03 11:35:29 +0530  567) 	if (rc) {
fe4c3c2f7531c (Shivaraj Shetty               2014-07-03 11:35:29 +0530  568) 		pr_err("kstrtoint failed. rc=%d\n", rc);
fe4c3c2f7531c (Shivaraj Shetty               2014-07-03 11:35:29 +0530  569) 		return rc;
fe4c3c2f7531c (Shivaraj Shetty               2014-07-03 11:35:29 +0530  570) 	}
fe4c3c2f7531c (Shivaraj Shetty               2014-07-03 11:35:29 +0530  571) 
fe4c3c2f7531c (Shivaraj Shetty               2014-07-03 11:35:29 +0530  572) 	pr_debug("Thermal level set to %d\n", thermal_level);
fe4c3c2f7531c (Shivaraj Shetty               2014-07-03 11:35:29 +0530  573) 	mfd->thermal_level = thermal_level;
fe4c3c2f7531c (Shivaraj Shetty               2014-07-03 11:35:29 +0530  574) 	sysfs_notify(&mfd->fbi->dev->kobj, NULL, "msm_fb_thermal_level");
fe4c3c2f7531c (Shivaraj Shetty               2014-07-03 11:35:29 +0530  575) 
fe4c3c2f7531c (Shivaraj Shetty               2014-07-03 11:35:29 +0530  576) 	return count;
fe4c3c2f7531c (Shivaraj Shetty               2014-07-03 11:35:29 +0530  577) }
fe4c3c2f7531c (Shivaraj Shetty               2014-07-03 11:35:29 +0530  578) 
93619215fa1d7 (Jayant Shekhar                2013-09-20 12:53:30 +0530  579) static ssize_t mdss_mdp_show_blank_event(struct device *dev,
93619215fa1d7 (Jayant Shekhar                2013-09-20 12:53:30 +0530  580) 		struct device_attribute *attr, char *buf)
93619215fa1d7 (Jayant Shekhar                2013-09-20 12:53:30 +0530  581) {
93619215fa1d7 (Jayant Shekhar                2013-09-20 12:53:30 +0530  582) 	struct fb_info *fbi = dev_get_drvdata(dev);
93619215fa1d7 (Jayant Shekhar                2013-09-20 12:53:30 +0530  583) 	struct msm_fb_data_type *mfd = (struct msm_fb_data_type *)fbi->par;
93619215fa1d7 (Jayant Shekhar                2013-09-20 12:53:30 +0530  584) 	int ret;
93619215fa1d7 (Jayant Shekhar                2013-09-20 12:53:30 +0530  585) 
b9095befda98a (Aravind Venkateswaran         2014-07-28 23:24:46 -0700  586) 	pr_debug("fb%d panel_power_state = %d\n", mfd->index,
b9095befda98a (Aravind Venkateswaran         2014-07-28 23:24:46 -0700  587) 		mfd->panel_power_state);
93619215fa1d7 (Jayant Shekhar                2013-09-20 12:53:30 +0530  588) 	ret = scnprintf(buf, PAGE_SIZE, "panel_power_on = %d\n",
b9095befda98a (Aravind Venkateswaran         2014-07-28 23:24:46 -0700  589) 						mfd->panel_power_state);
93619215fa1d7 (Jayant Shekhar                2013-09-20 12:53:30 +0530  590) 
93619215fa1d7 (Jayant Shekhar                2013-09-20 12:53:30 +0530  591) 	return ret;
93619215fa1d7 (Jayant Shekhar                2013-09-20 12:53:30 +0530  592) }
93619215fa1d7 (Jayant Shekhar                2013-09-20 12:53:30 +0530  593) 
824b24b09cd46 (Aravind Venkateswaran         2014-02-06 18:27:27 -0800  594) static void __mdss_fb_idle_notify_work(struct work_struct *work)
824b24b09cd46 (Aravind Venkateswaran         2014-02-06 18:27:27 -0800  595) {
824b24b09cd46 (Aravind Venkateswaran         2014-02-06 18:27:27 -0800  596) 	struct delayed_work *dw = to_delayed_work(work);
824b24b09cd46 (Aravind Venkateswaran         2014-02-06 18:27:27 -0800  597) 	struct msm_fb_data_type *mfd = container_of(dw, struct msm_fb_data_type,
824b24b09cd46 (Aravind Venkateswaran         2014-02-06 18:27:27 -0800  598) 		idle_notify_work);
824b24b09cd46 (Aravind Venkateswaran         2014-02-06 18:27:27 -0800  599) 
824b24b09cd46 (Aravind Venkateswaran         2014-02-06 18:27:27 -0800  600) 	/* Notify idle-ness here */
824b24b09cd46 (Aravind Venkateswaran         2014-02-06 18:27:27 -0800  601) 	pr_debug("Idle timeout %dms expired!\n", mfd->idle_time);
35589945c50c7 (Ujwal Patel                   2015-02-13 12:38:24 -0800  602) 	if (mfd->idle_time)
35589945c50c7 (Ujwal Patel                   2015-02-13 12:38:24 -0800  603) 		sysfs_notify(&mfd->fbi->dev->kobj, NULL, "idle_notify");
20eafef76e5ba (Vinu Deokaran                 2015-07-16 16:14:30 -0700  604) 	mfd->idle_state = MDSS_FB_IDLE;
824b24b09cd46 (Aravind Venkateswaran         2014-02-06 18:27:27 -0800  605) }
824b24b09cd46 (Aravind Venkateswaran         2014-02-06 18:27:27 -0800  606) 
90fd65ba93d5c (Krishna Manikandan            2016-12-28 17:58:39 +0530  607) 
90fd65ba93d5c (Krishna Manikandan            2016-12-28 17:58:39 +0530  608) static ssize_t mdss_fb_get_fps_info(struct device *dev,
90fd65ba93d5c (Krishna Manikandan            2016-12-28 17:58:39 +0530  609) 		struct device_attribute *attr, char *buf)
90fd65ba93d5c (Krishna Manikandan            2016-12-28 17:58:39 +0530  610) {
90fd65ba93d5c (Krishna Manikandan            2016-12-28 17:58:39 +0530  611) 	struct fb_info *fbi = dev_get_drvdata(dev);
90fd65ba93d5c (Krishna Manikandan            2016-12-28 17:58:39 +0530  612) 	struct msm_fb_data_type *mfd = fbi->par;
90fd65ba93d5c (Krishna Manikandan            2016-12-28 17:58:39 +0530  613) 	unsigned int fps_int, fps_float;
90fd65ba93d5c (Krishna Manikandan            2016-12-28 17:58:39 +0530  614) 
90fd65ba93d5c (Krishna Manikandan            2016-12-28 17:58:39 +0530  615) 	if (mfd->panel_power_state != MDSS_PANEL_POWER_ON)
90fd65ba93d5c (Krishna Manikandan            2016-12-28 17:58:39 +0530  616) 		mfd->fps_info.measured_fps = 0;
90fd65ba93d5c (Krishna Manikandan            2016-12-28 17:58:39 +0530  617) 	fps_int = (unsigned int) mfd->fps_info.measured_fps;
90fd65ba93d5c (Krishna Manikandan            2016-12-28 17:58:39 +0530  618) 	fps_float = do_div(fps_int, 10);
90fd65ba93d5c (Krishna Manikandan            2016-12-28 17:58:39 +0530  619) 	return scnprintf(buf, PAGE_SIZE, "%d.%d\n", fps_int, fps_float);
90fd65ba93d5c (Krishna Manikandan            2016-12-28 17:58:39 +0530  620) 
90fd65ba93d5c (Krishna Manikandan            2016-12-28 17:58:39 +0530  621) }
90fd65ba93d5c (Krishna Manikandan            2016-12-28 17:58:39 +0530  622) 
824b24b09cd46 (Aravind Venkateswaran         2014-02-06 18:27:27 -0800  623) static ssize_t mdss_fb_get_idle_time(struct device *dev,
824b24b09cd46 (Aravind Venkateswaran         2014-02-06 18:27:27 -0800  624) 		struct device_attribute *attr, char *buf)
824b24b09cd46 (Aravind Venkateswaran         2014-02-06 18:27:27 -0800  625) {
824b24b09cd46 (Aravind Venkateswaran         2014-02-06 18:27:27 -0800  626) 	struct fb_info *fbi = dev_get_drvdata(dev);
824b24b09cd46 (Aravind Venkateswaran         2014-02-06 18:27:27 -0800  627) 	struct msm_fb_data_type *mfd = fbi->par;
824b24b09cd46 (Aravind Venkateswaran         2014-02-06 18:27:27 -0800  628) 	int ret;
824b24b09cd46 (Aravind Venkateswaran         2014-02-06 18:27:27 -0800  629) 
824b24b09cd46 (Aravind Venkateswaran         2014-02-06 18:27:27 -0800  630) 	ret = scnprintf(buf, PAGE_SIZE, "%d", mfd->idle_time);
824b24b09cd46 (Aravind Venkateswaran         2014-02-06 18:27:27 -0800  631) 
824b24b09cd46 (Aravind Venkateswaran         2014-02-06 18:27:27 -0800  632) 	return ret;
824b24b09cd46 (Aravind Venkateswaran         2014-02-06 18:27:27 -0800  633) }
824b24b09cd46 (Aravind Venkateswaran         2014-02-06 18:27:27 -0800  634) 
824b24b09cd46 (Aravind Venkateswaran         2014-02-06 18:27:27 -0800  635) static ssize_t mdss_fb_set_idle_time(struct device *dev,
824b24b09cd46 (Aravind Venkateswaran         2014-02-06 18:27:27 -0800  636) 	struct device_attribute *attr, const char *buf, size_t count)
824b24b09cd46 (Aravind Venkateswaran         2014-02-06 18:27:27 -0800  637) {
824b24b09cd46 (Aravind Venkateswaran         2014-02-06 18:27:27 -0800  638) 	struct fb_info *fbi = dev_get_drvdata(dev);
824b24b09cd46 (Aravind Venkateswaran         2014-02-06 18:27:27 -0800  639) 	struct msm_fb_data_type *mfd = fbi->par;
824b24b09cd46 (Aravind Venkateswaran         2014-02-06 18:27:27 -0800  640) 	int rc = 0;
824b24b09cd46 (Aravind Venkateswaran         2014-02-06 18:27:27 -0800  641) 	int idle_time = 0;
824b24b09cd46 (Aravind Venkateswaran         2014-02-06 18:27:27 -0800  642) 
824b24b09cd46 (Aravind Venkateswaran         2014-02-06 18:27:27 -0800  643) 	rc = kstrtoint(buf, 10, &idle_time);
824b24b09cd46 (Aravind Venkateswaran         2014-02-06 18:27:27 -0800  644) 	if (rc) {
824b24b09cd46 (Aravind Venkateswaran         2014-02-06 18:27:27 -0800  645) 		pr_err("kstrtoint failed. rc=%d\n", rc);
824b24b09cd46 (Aravind Venkateswaran         2014-02-06 18:27:27 -0800  646) 		return rc;
824b24b09cd46 (Aravind Venkateswaran         2014-02-06 18:27:27 -0800  647) 	}
824b24b09cd46 (Aravind Venkateswaran         2014-02-06 18:27:27 -0800  648) 
824b24b09cd46 (Aravind Venkateswaran         2014-02-06 18:27:27 -0800  649) 	pr_debug("Idle time = %d\n", idle_time);
824b24b09cd46 (Aravind Venkateswaran         2014-02-06 18:27:27 -0800  650) 	mfd->idle_time = idle_time;
824b24b09cd46 (Aravind Venkateswaran         2014-02-06 18:27:27 -0800  651) 
824b24b09cd46 (Aravind Venkateswaran         2014-02-06 18:27:27 -0800  652) 	return count;
824b24b09cd46 (Aravind Venkateswaran         2014-02-06 18:27:27 -0800  653) }
824b24b09cd46 (Aravind Venkateswaran         2014-02-06 18:27:27 -0800  654) 
824b24b09cd46 (Aravind Venkateswaran         2014-02-06 18:27:27 -0800  655) static ssize_t mdss_fb_get_idle_notify(struct device *dev,
824b24b09cd46 (Aravind Venkateswaran         2014-02-06 18:27:27 -0800  656) 		struct device_attribute *attr, char *buf)
824b24b09cd46 (Aravind Venkateswaran         2014-02-06 18:27:27 -0800  657) {
824b24b09cd46 (Aravind Venkateswaran         2014-02-06 18:27:27 -0800  658) 	struct fb_info *fbi = dev_get_drvdata(dev);
824b24b09cd46 (Aravind Venkateswaran         2014-02-06 18:27:27 -0800  659) 	struct msm_fb_data_type *mfd = fbi->par;
824b24b09cd46 (Aravind Venkateswaran         2014-02-06 18:27:27 -0800  660) 	int ret;
824b24b09cd46 (Aravind Venkateswaran         2014-02-06 18:27:27 -0800  661) 
824b24b09cd46 (Aravind Venkateswaran         2014-02-06 18:27:27 -0800  662) 	ret = scnprintf(buf, PAGE_SIZE, "%s",
824b24b09cd46 (Aravind Venkateswaran         2014-02-06 18:27:27 -0800  663) 		work_busy(&mfd->idle_notify_work.work) ? "no" : "yes");
824b24b09cd46 (Aravind Venkateswaran         2014-02-06 18:27:27 -0800  664) 
824b24b09cd46 (Aravind Venkateswaran         2014-02-06 18:27:27 -0800  665) 	return ret;
824b24b09cd46 (Aravind Venkateswaran         2014-02-06 18:27:27 -0800  666) }
824b24b09cd46 (Aravind Venkateswaran         2014-02-06 18:27:27 -0800  667) 
869c067a6d347 (Jeykumar Sankaran             2014-03-06 12:12:24 -0800  668) static ssize_t mdss_fb_get_panel_info(struct device *dev,
869c067a6d347 (Jeykumar Sankaran             2014-03-06 12:12:24 -0800  669) 		struct device_attribute *attr, char *buf)
869c067a6d347 (Jeykumar Sankaran             2014-03-06 12:12:24 -0800  670) {
869c067a6d347 (Jeykumar Sankaran             2014-03-06 12:12:24 -0800  671) 	struct fb_info *fbi = dev_get_drvdata(dev);
869c067a6d347 (Jeykumar Sankaran             2014-03-06 12:12:24 -0800  672) 	struct msm_fb_data_type *mfd = fbi->par;
869c067a6d347 (Jeykumar Sankaran             2014-03-06 12:12:24 -0800  673) 	struct mdss_panel_info *pinfo = mfd->panel_info;
869c067a6d347 (Jeykumar Sankaran             2014-03-06 12:12:24 -0800  674) 	int ret;
3d764869b9039 (Ramkumar Radhakrishnan        2016-07-13 14:56:31 -0700  675) 	bool dfps_porch_mode = false;
3d764869b9039 (Ramkumar Radhakrishnan        2016-07-13 14:56:31 -0700  676) 
3d764869b9039 (Ramkumar Radhakrishnan        2016-07-13 14:56:31 -0700  677) 	if (pinfo->dfps_update == DFPS_IMMEDIATE_PORCH_UPDATE_MODE_HFP ||
3d764869b9039 (Ramkumar Radhakrishnan        2016-07-13 14:56:31 -0700  678) 		pinfo->dfps_update == DFPS_IMMEDIATE_PORCH_UPDATE_MODE_VFP)
3d764869b9039 (Ramkumar Radhakrishnan        2016-07-13 14:56:31 -0700  679) 		dfps_porch_mode = true;
869c067a6d347 (Jeykumar Sankaran             2014-03-06 12:12:24 -0800  680) 
869c067a6d347 (Jeykumar Sankaran             2014-03-06 12:12:24 -0800  681) 	ret = scnprintf(buf, PAGE_SIZE,
3a28acf18f5bf (Kuogee Hsieh                  2014-05-01 16:02:48 -0700  682) 			"pu_en=%d\nxstart=%d\nwalign=%d\nystart=%d\nhalign=%d\n"
a3888ae72db32 (Jeevan Shriram                2014-09-10 15:19:01 -0700  683) 			"min_w=%d\nmin_h=%d\nroi_merge=%d\ndyn_fps_en=%d\n"
b9a2fe27d1ed7 (Dhaval Patel                  2014-10-20 12:30:02 -0700  684) 			"min_fps=%d\nmax_fps=%d\npanel_name=%s\n"
f472340bf77bf (Sandeep Panda                 2015-11-07 00:49:57 +0530  685) 			"primary_panel=%d\nis_pluggable=%d\ndisplay_id=%s\n"
3d764869b9039 (Ramkumar Radhakrishnan        2016-07-13 14:56:31 -0700  686) 			"is_cec_supported=%d\nis_pingpong_split=%d\n"
1e54d7815f415 (Shashank Babu Chinta Venkata  2016-11-09 19:58:26 -0800  687) 			"dfps_porch_mode=%d\npu_roi_cnt=%d\ndual_dsi=%d\n"
19a9088e54e87 (Ray Zhang                     2016-11-28 15:01:55 +0800  688) 			"is_hdr_enabled=%d\npeak_brightness=%d\n"
19a9088e54e87 (Ray Zhang                     2016-11-28 15:01:55 +0800  689) 			"blackness_level=%d\naverage_brightness=%d\n"
1e54d7815f415 (Shashank Babu Chinta Venkata  2016-11-09 19:58:26 -0800  690) 			"white_chromaticity_x=%d\nwhite_chromaticity_y=%d\n"
1e54d7815f415 (Shashank Babu Chinta Venkata  2016-11-09 19:58:26 -0800  691) 			"red_chromaticity_x=%d\nred_chromaticity_y=%d\n"
1e54d7815f415 (Shashank Babu Chinta Venkata  2016-11-09 19:58:26 -0800  692) 			"green_chromaticity_x=%d\ngreen_chromaticity_y=%d\n"
c388e8fc0677f (Krishna Chaitanya Devarakonda 2016-11-21 21:52:35 +0530  693) 			"blue_chromaticity_x=%d\nblue_chromaticity_y=%d\n"
be48303843a06 (SGCMarkus                     2019-07-09 09:54:59 +0200  694) 			"panel_orientation=%d\n",
5e6e59afed340 (Veera Sundaram Sankaran       2016-04-21 14:41:44 -0700  695) 			pinfo->partial_update_enabled,
5e6e59afed340 (Veera Sundaram Sankaran       2016-04-21 14:41:44 -0700  696) 			pinfo->roi_alignment.xstart_pix_align,
5e6e59afed340 (Veera Sundaram Sankaran       2016-04-21 14:41:44 -0700  697) 			pinfo->roi_alignment.width_pix_align,
5e6e59afed340 (Veera Sundaram Sankaran       2016-04-21 14:41:44 -0700  698) 			pinfo->roi_alignment.ystart_pix_align,
5e6e59afed340 (Veera Sundaram Sankaran       2016-04-21 14:41:44 -0700  699) 			pinfo->roi_alignment.height_pix_align,
5e6e59afed340 (Veera Sundaram Sankaran       2016-04-21 14:41:44 -0700  700) 			pinfo->roi_alignment.min_width,
5e6e59afed340 (Veera Sundaram Sankaran       2016-04-21 14:41:44 -0700  701) 			pinfo->roi_alignment.min_height,
5e6e59afed340 (Veera Sundaram Sankaran       2016-04-21 14:41:44 -0700  702) 			pinfo->partial_update_roi_merge,
a5d404445a8ef (Zohaib Alam                   2014-09-26 13:29:03 -0400  703) 			pinfo->dynamic_fps, pinfo->min_fps, pinfo->max_fps,
61c19bb151cbe (Ajay Singh Parmar             2015-03-23 23:23:13 -0700  704) 			pinfo->panel_name, pinfo->is_prim_panel,
f472340bf77bf (Sandeep Panda                 2015-11-07 00:49:57 +0530  705) 			pinfo->is_pluggable, pinfo->display_id,
3d764869b9039 (Ramkumar Radhakrishnan        2016-07-13 14:56:31 -0700  706) 			pinfo->is_cec_supported, is_pingpong_split(mfd),
d5da41a9807d9 (Veera Sundaram Sankaran       2016-10-10 17:14:32 -0700  707) 			dfps_porch_mode, pinfo->partial_update_enabled,
1e54d7815f415 (Shashank Babu Chinta Venkata  2016-11-09 19:58:26 -0800  708) 			is_panel_split(mfd), pinfo->hdr_properties.hdr_enabled,
1e54d7815f415 (Shashank Babu Chinta Venkata  2016-11-09 19:58:26 -0800  709) 			pinfo->hdr_properties.peak_brightness,
1e54d7815f415 (Shashank Babu Chinta Venkata  2016-11-09 19:58:26 -0800  710) 			pinfo->hdr_properties.blackness_level,
19a9088e54e87 (Ray Zhang                     2016-11-28 15:01:55 +0800  711) 			pinfo->hdr_properties.avg_brightness,
1e54d7815f415 (Shashank Babu Chinta Venkata  2016-11-09 19:58:26 -0800  712) 			pinfo->hdr_properties.display_primaries[0],
1e54d7815f415 (Shashank Babu Chinta Venkata  2016-11-09 19:58:26 -0800  713) 			pinfo->hdr_properties.display_primaries[1],
1e54d7815f415 (Shashank Babu Chinta Venkata  2016-11-09 19:58:26 -0800  714) 			pinfo->hdr_properties.display_primaries[2],
1e54d7815f415 (Shashank Babu Chinta Venkata  2016-11-09 19:58:26 -0800  715) 			pinfo->hdr_properties.display_primaries[3],
1e54d7815f415 (Shashank Babu Chinta Venkata  2016-11-09 19:58:26 -0800  716) 			pinfo->hdr_properties.display_primaries[4],
1e54d7815f415 (Shashank Babu Chinta Venkata  2016-11-09 19:58:26 -0800  717) 			pinfo->hdr_properties.display_primaries[5],
1e54d7815f415 (Shashank Babu Chinta Venkata  2016-11-09 19:58:26 -0800  718) 			pinfo->hdr_properties.display_primaries[6],
c388e8fc0677f (Krishna Chaitanya Devarakonda 2016-11-21 21:52:35 +0530  719) 			pinfo->hdr_properties.display_primaries[7],
be48303843a06 (SGCMarkus                     2019-07-09 09:54:59 +0200  720) 			pinfo->panel_orientation);
869c067a6d347 (Jeykumar Sankaran             2014-03-06 12:12:24 -0800  721) 
869c067a6d347 (Jeykumar Sankaran             2014-03-06 12:12:24 -0800  722) 	return ret;
869c067a6d347 (Jeykumar Sankaran             2014-03-06 12:12:24 -0800  723) }
a3888ae72db32 (Jeevan Shriram                2014-09-10 15:19:01 -0700  724) 
7937cdefcf8bf (Ray Zhang                     2015-01-08 14:53:11 +0800  725) static ssize_t mdss_fb_get_panel_status(struct device *dev,
7937cdefcf8bf (Ray Zhang                     2015-01-08 14:53:11 +0800  726) 		struct device_attribute *attr, char *buf)
7937cdefcf8bf (Ray Zhang                     2015-01-08 14:53:11 +0800  727) {
7937cdefcf8bf (Ray Zhang                     2015-01-08 14:53:11 +0800  728) 	struct fb_info *fbi = dev_get_drvdata(dev);
7937cdefcf8bf (Ray Zhang                     2015-01-08 14:53:11 +0800  729) 	struct msm_fb_data_type *mfd = fbi->par;
7937cdefcf8bf (Ray Zhang                     2015-01-08 14:53:11 +0800  730) 	int ret;
7937cdefcf8bf (Ray Zhang                     2015-01-08 14:53:11 +0800  731) 	int panel_status;
7937cdefcf8bf (Ray Zhang                     2015-01-08 14:53:11 +0800  732) 
3c94a189b5c38 (Dhaval Patel                  2015-12-17 14:25:17 -0800  733) 	if (mdss_panel_is_power_off(mfd->panel_power_state)) {
3c94a189b5c38 (Dhaval Patel                  2015-12-17 14:25:17 -0800  734) 		ret = scnprintf(buf, PAGE_SIZE, "panel_status=%s\n", "suspend");
3c94a189b5c38 (Dhaval Patel                  2015-12-17 14:25:17 -0800  735) 	} else {
3c94a189b5c38 (Dhaval Patel                  2015-12-17 14:25:17 -0800  736) 		panel_status = mdss_fb_send_panel_event(mfd,
e871e6fd4a447 (Sandeep Panda                 2017-04-13 18:00:54 +0530  737) 				MDSS_EVENT_DSI_PANEL_STATUS, mfd);
3c94a189b5c38 (Dhaval Patel                  2015-12-17 14:25:17 -0800  738) 		ret = scnprintf(buf, PAGE_SIZE, "panel_status=%s\n",
3c94a189b5c38 (Dhaval Patel                  2015-12-17 14:25:17 -0800  739) 			panel_status > 0 ? "alive" : "dead");
3c94a189b5c38 (Dhaval Patel                  2015-12-17 14:25:17 -0800  740) 	}
7937cdefcf8bf (Ray Zhang                     2015-01-08 14:53:11 +0800  741) 
7937cdefcf8bf (Ray Zhang                     2015-01-08 14:53:11 +0800  742) 	return ret;
7937cdefcf8bf (Ray Zhang                     2015-01-08 14:53:11 +0800  743) }
7937cdefcf8bf (Ray Zhang                     2015-01-08 14:53:11 +0800  744) 
7aa48794fcb1e (Huaibin Yang                  2015-02-11 14:13:07 -0800  745) static ssize_t mdss_fb_force_panel_dead(struct device *dev,
7aa48794fcb1e (Huaibin Yang                  2015-02-11 14:13:07 -0800  746) 	struct device_attribute *attr, const char *buf, size_t len)
7aa48794fcb1e (Huaibin Yang                  2015-02-11 14:13:07 -0800  747) {
7aa48794fcb1e (Huaibin Yang                  2015-02-11 14:13:07 -0800  748) 	struct fb_info *fbi = dev_get_drvdata(dev);
7aa48794fcb1e (Huaibin Yang                  2015-02-11 14:13:07 -0800  749) 	struct msm_fb_data_type *mfd = (struct msm_fb_data_type *)fbi->par;
7aa48794fcb1e (Huaibin Yang                  2015-02-11 14:13:07 -0800  750) 	struct mdss_panel_data *pdata;
7aa48794fcb1e (Huaibin Yang                  2015-02-11 14:13:07 -0800  751) 
7aa48794fcb1e (Huaibin Yang                  2015-02-11 14:13:07 -0800  752) 	pdata = dev_get_platdata(&mfd->pdev->dev);
7aa48794fcb1e (Huaibin Yang                  2015-02-11 14:13:07 -0800  753) 	if (!pdata) {
7aa48794fcb1e (Huaibin Yang                  2015-02-11 14:13:07 -0800  754) 		pr_err("no panel connected!\n");
7aa48794fcb1e (Huaibin Yang                  2015-02-11 14:13:07 -0800  755) 		return len;
7aa48794fcb1e (Huaibin Yang                  2015-02-11 14:13:07 -0800  756) 	}
7aa48794fcb1e (Huaibin Yang                  2015-02-11 14:13:07 -0800  757) 
b11c90dac54ac (Shalini Krishnamoorthi        2016-06-30 14:00:04 -0700  758) 	if (kstrtouint(buf, 0, &pdata->panel_info.panel_force_dead))
b11c90dac54ac (Shalini Krishnamoorthi        2016-06-30 14:00:04 -0700  759) 		pr_err("kstrtouint buf error!\n");
7aa48794fcb1e (Huaibin Yang                  2015-02-11 14:13:07 -0800  760) 
7aa48794fcb1e (Huaibin Yang                  2015-02-11 14:13:07 -0800  761) 	return len;
7aa48794fcb1e (Huaibin Yang                  2015-02-11 14:13:07 -0800  762) }
7aa48794fcb1e (Huaibin Yang                  2015-02-11 14:13:07 -0800  763) 
41211cdb1fff1 (Sandeep Panda                 2014-04-09 17:15:37 +0530  764) /*
07930a15004de (Terence Hampson               2015-01-21 13:36:24 -0500  765)  * mdss_fb_blanking_mode_switch() - Function triggers dynamic mode switch
41211cdb1fff1 (Sandeep Panda                 2014-04-09 17:15:37 +0530  766)  * @mfd:	Framebuffer data structure for display
41211cdb1fff1 (Sandeep Panda                 2014-04-09 17:15:37 +0530  767)  * @mode:	Enabled/Disable LowPowerMode
41211cdb1fff1 (Sandeep Panda                 2014-04-09 17:15:37 +0530  768)  *		1: Enter into LowPowerMode
41211cdb1fff1 (Sandeep Panda                 2014-04-09 17:15:37 +0530  769)  *		0: Exit from LowPowerMode
41211cdb1fff1 (Sandeep Panda                 2014-04-09 17:15:37 +0530  770)  *
07930a15004de (Terence Hampson               2015-01-21 13:36:24 -0500  771)  * This Function dynamically switches to and from video mode. This
07930a15004de (Terence Hampson               2015-01-21 13:36:24 -0500  772)  * swtich involves the panel turning off backlight during trantision.
41211cdb1fff1 (Sandeep Panda                 2014-04-09 17:15:37 +0530  773)  */
07930a15004de (Terence Hampson               2015-01-21 13:36:24 -0500  774) static int mdss_fb_blanking_mode_switch(struct msm_fb_data_type *mfd, int mode)
41211cdb1fff1 (Sandeep Panda                 2014-04-09 17:15:37 +0530  775) {
41211cdb1fff1 (Sandeep Panda                 2014-04-09 17:15:37 +0530  776) 	int ret = 0;
41211cdb1fff1 (Sandeep Panda                 2014-04-09 17:15:37 +0530  777) 	u32 bl_lvl = 0;
41211cdb1fff1 (Sandeep Panda                 2014-04-09 17:15:37 +0530  778) 	struct mdss_panel_info *pinfo = NULL;
41211cdb1fff1 (Sandeep Panda                 2014-04-09 17:15:37 +0530  779) 	struct mdss_panel_data *pdata;
41211cdb1fff1 (Sandeep Panda                 2014-04-09 17:15:37 +0530  780) 
41211cdb1fff1 (Sandeep Panda                 2014-04-09 17:15:37 +0530  781) 	if (!mfd || !mfd->panel_info)
41211cdb1fff1 (Sandeep Panda                 2014-04-09 17:15:37 +0530  782) 		return -EINVAL;
41211cdb1fff1 (Sandeep Panda                 2014-04-09 17:15:37 +0530  783) 
41211cdb1fff1 (Sandeep Panda                 2014-04-09 17:15:37 +0530  784) 	pinfo = mfd->panel_info;
41211cdb1fff1 (Sandeep Panda                 2014-04-09 17:15:37 +0530  785) 
07930a15004de (Terence Hampson               2015-01-21 13:36:24 -0500  786) 	if (!pinfo->mipi.dms_mode) {
41211cdb1fff1 (Sandeep Panda                 2014-04-09 17:15:37 +0530  787) 		pr_warn("Panel does not support dynamic switch!\n");
41211cdb1fff1 (Sandeep Panda                 2014-04-09 17:15:37 +0530  788) 		return 0;
41211cdb1fff1 (Sandeep Panda                 2014-04-09 17:15:37 +0530  789) 	}
41211cdb1fff1 (Sandeep Panda                 2014-04-09 17:15:37 +0530  790) 
41211cdb1fff1 (Sandeep Panda                 2014-04-09 17:15:37 +0530  791) 	if (mode == pinfo->mipi.mode) {
41211cdb1fff1 (Sandeep Panda                 2014-04-09 17:15:37 +0530  792) 		pr_debug("Already in requested mode!\n");
41211cdb1fff1 (Sandeep Panda                 2014-04-09 17:15:37 +0530  793) 		return 0;
41211cdb1fff1 (Sandeep Panda                 2014-04-09 17:15:37 +0530  794) 	}
76c82ae2a89e1 (Sandeep Panda                 2014-07-18 10:51:40 +0530  795) 	pr_debug("Enter mode: %d\n", mode);
41211cdb1fff1 (Sandeep Panda                 2014-04-09 17:15:37 +0530  796) 
41211cdb1fff1 (Sandeep Panda                 2014-04-09 17:15:37 +0530  797) 	pdata = dev_get_platdata(&mfd->pdev->dev);
41211cdb1fff1 (Sandeep Panda                 2014-04-09 17:15:37 +0530  798) 
41211cdb1fff1 (Sandeep Panda                 2014-04-09 17:15:37 +0530  799) 	pdata->panel_info.dynamic_switch_pending = true;
26bebe99120eb (Ujwal Patel                   2015-04-22 14:51:12 -0700  800) 	ret = mdss_fb_pan_idle(mfd);
26bebe99120eb (Ujwal Patel                   2015-04-22 14:51:12 -0700  801) 	if (ret) {
26bebe99120eb (Ujwal Patel                   2015-04-22 14:51:12 -0700  802) 		pr_err("mdss_fb_pan_idle for fb%d failed. ret=%d\n",
26bebe99120eb (Ujwal Patel                   2015-04-22 14:51:12 -0700  803) 			mfd->index, ret);
26bebe99120eb (Ujwal Patel                   2015-04-22 14:51:12 -0700  804) 		pdata->panel_info.dynamic_switch_pending = false;
26bebe99120eb (Ujwal Patel                   2015-04-22 14:51:12 -0700  805) 		return ret;
26bebe99120eb (Ujwal Patel                   2015-04-22 14:51:12 -0700  806) 	}
41211cdb1fff1 (Sandeep Panda                 2014-04-09 17:15:37 +0530  807) 
41211cdb1fff1 (Sandeep Panda                 2014-04-09 17:15:37 +0530  808) 	mutex_lock(&mfd->bl_lock);
41211cdb1fff1 (Sandeep Panda                 2014-04-09 17:15:37 +0530  809) 	bl_lvl = mfd->bl_level;
41211cdb1fff1 (Sandeep Panda                 2014-04-09 17:15:37 +0530  810) 	mdss_fb_set_backlight(mfd, 0);
0f38e4eaebf47 (Shivaraj Shetty               2014-06-10 21:28:36 +0530  811) 	mutex_unlock(&mfd->bl_lock);
41211cdb1fff1 (Sandeep Panda                 2014-04-09 17:15:37 +0530  812) 
41211cdb1fff1 (Sandeep Panda                 2014-04-09 17:15:37 +0530  813) 	lock_fb_info(mfd->fbi);
41211cdb1fff1 (Sandeep Panda                 2014-04-09 17:15:37 +0530  814) 	ret = mdss_fb_blank_sub(FB_BLANK_POWERDOWN, mfd->fbi,
41211cdb1fff1 (Sandeep Panda                 2014-04-09 17:15:37 +0530  815) 						mfd->op_enable);
41211cdb1fff1 (Sandeep Panda                 2014-04-09 17:15:37 +0530  816) 	if (ret) {
41211cdb1fff1 (Sandeep Panda                 2014-04-09 17:15:37 +0530  817) 		pr_err("can't turn off display!\n");
41211cdb1fff1 (Sandeep Panda                 2014-04-09 17:15:37 +0530  818) 		unlock_fb_info(mfd->fbi);
41211cdb1fff1 (Sandeep Panda                 2014-04-09 17:15:37 +0530  819) 		return ret;
41211cdb1fff1 (Sandeep Panda                 2014-04-09 17:15:37 +0530  820) 	}
41211cdb1fff1 (Sandeep Panda                 2014-04-09 17:15:37 +0530  821) 
41211cdb1fff1 (Sandeep Panda                 2014-04-09 17:15:37 +0530  822) 	mfd->op_enable = false;
41211cdb1fff1 (Sandeep Panda                 2014-04-09 17:15:37 +0530  823) 
07930a15004de (Terence Hampson               2015-01-21 13:36:24 -0500  824) 	ret = mfd->mdp.configure_panel(mfd, mode, 1);
07930a15004de (Terence Hampson               2015-01-21 13:36:24 -0500  825) 	mdss_fb_set_mdp_sync_pt_threshold(mfd, mfd->panel.type);
41211cdb1fff1 (Sandeep Panda                 2014-04-09 17:15:37 +0530  826) 
41211cdb1fff1 (Sandeep Panda                 2014-04-09 17:15:37 +0530  827) 	mfd->op_enable = true;
41211cdb1fff1 (Sandeep Panda                 2014-04-09 17:15:37 +0530  828) 
41211cdb1fff1 (Sandeep Panda                 2014-04-09 17:15:37 +0530  829) 	ret = mdss_fb_blank_sub(FB_BLANK_UNBLANK, mfd->fbi,
41211cdb1fff1 (Sandeep Panda                 2014-04-09 17:15:37 +0530  830) 					mfd->op_enable);
41211cdb1fff1 (Sandeep Panda                 2014-04-09 17:15:37 +0530  831) 	if (ret) {
41211cdb1fff1 (Sandeep Panda                 2014-04-09 17:15:37 +0530  832) 		pr_err("can't turn on display!\n");
41211cdb1fff1 (Sandeep Panda                 2014-04-09 17:15:37 +0530  833) 		unlock_fb_info(mfd->fbi);
41211cdb1fff1 (Sandeep Panda                 2014-04-09 17:15:37 +0530  834) 		return ret;
41211cdb1fff1 (Sandeep Panda                 2014-04-09 17:15:37 +0530  835) 	}
41211cdb1fff1 (Sandeep Panda                 2014-04-09 17:15:37 +0530  836) 	unlock_fb_info(mfd->fbi);
41211cdb1fff1 (Sandeep Panda                 2014-04-09 17:15:37 +0530  837) 
0f38e4eaebf47 (Shivaraj Shetty               2014-06-10 21:28:36 +0530  838) 	mutex_lock(&mfd->bl_lock);
f97adf46f51a0 (Dhaval Patel                  2015-10-21 10:55:51 -0700  839) 	mfd->allow_bl_update = true;
41211cdb1fff1 (Sandeep Panda                 2014-04-09 17:15:37 +0530  840) 	mdss_fb_set_backlight(mfd, bl_lvl);
41211cdb1fff1 (Sandeep Panda                 2014-04-09 17:15:37 +0530  841) 	mutex_unlock(&mfd->bl_lock);
41211cdb1fff1 (Sandeep Panda                 2014-04-09 17:15:37 +0530  842) 
41211cdb1fff1 (Sandeep Panda                 2014-04-09 17:15:37 +0530  843) 	pdata->panel_info.dynamic_switch_pending = false;
41211cdb1fff1 (Sandeep Panda                 2014-04-09 17:15:37 +0530  844) 	pdata->panel_info.is_lpm_mode = mode ? 1 : 0;
41211cdb1fff1 (Sandeep Panda                 2014-04-09 17:15:37 +0530  845) 
41211cdb1fff1 (Sandeep Panda                 2014-04-09 17:15:37 +0530  846) 	if (ret) {
41211cdb1fff1 (Sandeep Panda                 2014-04-09 17:15:37 +0530  847) 		pr_err("can't turn on display!\n");
41211cdb1fff1 (Sandeep Panda                 2014-04-09 17:15:37 +0530  848) 		return ret;
41211cdb1fff1 (Sandeep Panda                 2014-04-09 17:15:37 +0530  849) 	}
41211cdb1fff1 (Sandeep Panda                 2014-04-09 17:15:37 +0530  850) 
41211cdb1fff1 (Sandeep Panda                 2014-04-09 17:15:37 +0530  851) 	pr_debug("Exit mode: %d\n", mode);
41211cdb1fff1 (Sandeep Panda                 2014-04-09 17:15:37 +0530  852) 
41211cdb1fff1 (Sandeep Panda                 2014-04-09 17:15:37 +0530  853) 	return 0;
41211cdb1fff1 (Sandeep Panda                 2014-04-09 17:15:37 +0530  854) }
869c067a6d347 (Jeykumar Sankaran             2014-03-06 12:12:24 -0800  855) 
dcd8ca273948d (Huaibin Yang                  2015-02-25 23:43:31 -0800  856) static ssize_t mdss_fb_change_dfps_mode(struct device *dev,
dcd8ca273948d (Huaibin Yang                  2015-02-25 23:43:31 -0800  857) 	struct device_attribute *attr, const char *buf, size_t len)
dcd8ca273948d (Huaibin Yang                  2015-02-25 23:43:31 -0800  858) {
dcd8ca273948d (Huaibin Yang                  2015-02-25 23:43:31 -0800  859) 	struct fb_info *fbi = dev_get_drvdata(dev);
dcd8ca273948d (Huaibin Yang                  2015-02-25 23:43:31 -0800  860) 	struct msm_fb_data_type *mfd = (struct msm_fb_data_type *)fbi->par;
dcd8ca273948d (Huaibin Yang                  2015-02-25 23:43:31 -0800  861) 	struct mdss_panel_data *pdata;
dcd8ca273948d (Huaibin Yang                  2015-02-25 23:43:31 -0800  862) 	struct mdss_panel_info *pinfo;
dcd8ca273948d (Huaibin Yang                  2015-02-25 23:43:31 -0800  863) 	u32 dfps_mode;
dcd8ca273948d (Huaibin Yang                  2015-02-25 23:43:31 -0800  864) 
dcd8ca273948d (Huaibin Yang                  2015-02-25 23:43:31 -0800  865) 	pdata = dev_get_platdata(&mfd->pdev->dev);
dcd8ca273948d (Huaibin Yang                  2015-02-25 23:43:31 -0800  866) 	if (!pdata) {
dcd8ca273948d (Huaibin Yang                  2015-02-25 23:43:31 -0800  867) 		pr_err("no panel connected!\n");
dcd8ca273948d (Huaibin Yang                  2015-02-25 23:43:31 -0800  868) 		return len;
dcd8ca273948d (Huaibin Yang                  2015-02-25 23:43:31 -0800  869) 	}
dcd8ca273948d (Huaibin Yang                  2015-02-25 23:43:31 -0800  870) 	pinfo = &pdata->panel_info;
dcd8ca273948d (Huaibin Yang                  2015-02-25 23:43:31 -0800  871) 
b11c90dac54ac (Shalini Krishnamoorthi        2016-06-30 14:00:04 -0700  872) 	if (kstrtouint(buf, 0, &dfps_mode)) {
b11c90dac54ac (Shalini Krishnamoorthi        2016-06-30 14:00:04 -0700  873) 		pr_err("kstrtouint buf error!\n");
dcd8ca273948d (Huaibin Yang                  2015-02-25 23:43:31 -0800  874) 		return len;
dcd8ca273948d (Huaibin Yang                  2015-02-25 23:43:31 -0800  875) 	}
dcd8ca273948d (Huaibin Yang                  2015-02-25 23:43:31 -0800  876) 
dcd8ca273948d (Huaibin Yang                  2015-02-25 23:43:31 -0800  877) 	if (dfps_mode >= DFPS_MODE_MAX) {
dcd8ca273948d (Huaibin Yang                  2015-02-25 23:43:31 -0800  878) 		pinfo->dynamic_fps = false;
dcd8ca273948d (Huaibin Yang                  2015-02-25 23:43:31 -0800  879) 		return len;
dcd8ca273948d (Huaibin Yang                  2015-02-25 23:43:31 -0800  880) 	}
dcd8ca273948d (Huaibin Yang                  2015-02-25 23:43:31 -0800  881) 
f7bad5e06ae0f (Chandan Uddaraju              2015-12-23 11:03:49 -0800  882) 	if (mfd->idle_time != 0) {
f7bad5e06ae0f (Chandan Uddaraju              2015-12-23 11:03:49 -0800  883) 		pr_err("ERROR: Idle time is not disabled.\n");
f7bad5e06ae0f (Chandan Uddaraju              2015-12-23 11:03:49 -0800  884) 		return len;
f7bad5e06ae0f (Chandan Uddaraju              2015-12-23 11:03:49 -0800  885) 	}
f7bad5e06ae0f (Chandan Uddaraju              2015-12-23 11:03:49 -0800  886) 
f7bad5e06ae0f (Chandan Uddaraju              2015-12-23 11:03:49 -0800  887) 	if (pinfo->current_fps != pinfo->default_fps) {
f7bad5e06ae0f (Chandan Uddaraju              2015-12-23 11:03:49 -0800  888) 		pr_err("ERROR: panel not configured to default fps\n");
f7bad5e06ae0f (Chandan Uddaraju              2015-12-23 11:03:49 -0800  889) 		return len;
f7bad5e06ae0f (Chandan Uddaraju              2015-12-23 11:03:49 -0800  890) 	}
f7bad5e06ae0f (Chandan Uddaraju              2015-12-23 11:03:49 -0800  891) 
dcd8ca273948d (Huaibin Yang                  2015-02-25 23:43:31 -0800  892) 	pinfo->dynamic_fps = true;
dcd8ca273948d (Huaibin Yang                  2015-02-25 23:43:31 -0800  893) 	pinfo->dfps_update = dfps_mode;
dcd8ca273948d (Huaibin Yang                  2015-02-25 23:43:31 -0800  894) 
f7bad5e06ae0f (Chandan Uddaraju              2015-12-23 11:03:49 -0800  895) 	if (pdata->next)
f7bad5e06ae0f (Chandan Uddaraju              2015-12-23 11:03:49 -0800  896) 		pdata->next->panel_info.dfps_update = dfps_mode;
f7bad5e06ae0f (Chandan Uddaraju              2015-12-23 11:03:49 -0800  897) 
dcd8ca273948d (Huaibin Yang                  2015-02-25 23:43:31 -0800  898) 	return len;
dcd8ca273948d (Huaibin Yang                  2015-02-25 23:43:31 -0800  899) }
dcd8ca273948d (Huaibin Yang                  2015-02-25 23:43:31 -0800  900) 
dcd8ca273948d (Huaibin Yang                  2015-02-25 23:43:31 -0800  901) static ssize_t mdss_fb_get_dfps_mode(struct device *dev,
dcd8ca273948d (Huaibin Yang                  2015-02-25 23:43:31 -0800  902) 		struct device_attribute *attr, char *buf)
dcd8ca273948d (Huaibin Yang                  2015-02-25 23:43:31 -0800  903) {
dcd8ca273948d (Huaibin Yang                  2015-02-25 23:43:31 -0800  904) 	struct fb_info *fbi = dev_get_drvdata(dev);
dcd8ca273948d (Huaibin Yang                  2015-02-25 23:43:31 -0800  905) 	struct msm_fb_data_type *mfd = (struct msm_fb_data_type *)fbi->par;
dcd8ca273948d (Huaibin Yang                  2015-02-25 23:43:31 -0800  906) 	struct mdss_panel_data *pdata;
dcd8ca273948d (Huaibin Yang                  2015-02-25 23:43:31 -0800  907) 	struct mdss_panel_info *pinfo;
dcd8ca273948d (Huaibin Yang                  2015-02-25 23:43:31 -0800  908) 	int ret;
dcd8ca273948d (Huaibin Yang                  2015-02-25 23:43:31 -0800  909) 
dcd8ca273948d (Huaibin Yang                  2015-02-25 23:43:31 -0800  910) 	pdata = dev_get_platdata(&mfd->pdev->dev);
dcd8ca273948d (Huaibin Yang                  2015-02-25 23:43:31 -0800  911) 	if (!pdata) {
dcd8ca273948d (Huaibin Yang                  2015-02-25 23:43:31 -0800  912) 		pr_err("no panel connected!\n");
dcd8ca273948d (Huaibin Yang                  2015-02-25 23:43:31 -0800  913) 		return -EINVAL;
dcd8ca273948d (Huaibin Yang                  2015-02-25 23:43:31 -0800  914) 	}
dcd8ca273948d (Huaibin Yang                  2015-02-25 23:43:31 -0800  915) 	pinfo = &pdata->panel_info;
dcd8ca273948d (Huaibin Yang                  2015-02-25 23:43:31 -0800  916) 
dcd8ca273948d (Huaibin Yang                  2015-02-25 23:43:31 -0800  917) 	ret = scnprintf(buf, PAGE_SIZE, "dfps enabled=%d mode=%d\n",
dcd8ca273948d (Huaibin Yang                  2015-02-25 23:43:31 -0800  918) 		pinfo->dynamic_fps, pinfo->dfps_update);
dcd8ca273948d (Huaibin Yang                  2015-02-25 23:43:31 -0800  919) 
dcd8ca273948d (Huaibin Yang                  2015-02-25 23:43:31 -0800  920) 	return ret;
dcd8ca273948d (Huaibin Yang                  2015-02-25 23:43:31 -0800  921) }
dcd8ca273948d (Huaibin Yang                  2015-02-25 23:43:31 -0800  922) 
e6819350df123 (Yahui Wang                    2016-12-12 15:50:38 +0800  923) static ssize_t mdss_fb_change_persist_mode(struct device *dev,
e6819350df123 (Yahui Wang                    2016-12-12 15:50:38 +0800  924) 	struct device_attribute *attr, const char *buf, size_t len)
e6819350df123 (Yahui Wang                    2016-12-12 15:50:38 +0800  925) {
e6819350df123 (Yahui Wang                    2016-12-12 15:50:38 +0800  926) 	struct fb_info *fbi = dev_get_drvdata(dev);
e6819350df123 (Yahui Wang                    2016-12-12 15:50:38 +0800  927) 	struct msm_fb_data_type *mfd = (struct msm_fb_data_type *)fbi->par;
e6819350df123 (Yahui Wang                    2016-12-12 15:50:38 +0800  928) 	struct mdss_panel_info *pinfo = NULL;
e6819350df123 (Yahui Wang                    2016-12-12 15:50:38 +0800  929) 	struct mdss_panel_data *pdata;
e6819350df123 (Yahui Wang                    2016-12-12 15:50:38 +0800  930) 	int ret = 0;
e6819350df123 (Yahui Wang                    2016-12-12 15:50:38 +0800  931) 	u32 persist_mode;
e6819350df123 (Yahui Wang                    2016-12-12 15:50:38 +0800  932) 
e6819350df123 (Yahui Wang                    2016-12-12 15:50:38 +0800  933) 	if (!mfd || !mfd->panel_info) {
e6819350df123 (Yahui Wang                    2016-12-12 15:50:38 +0800  934) 		pr_err("%s: Panel info is NULL!\n", __func__);
e6819350df123 (Yahui Wang                    2016-12-12 15:50:38 +0800  935) 		return len;
e6819350df123 (Yahui Wang                    2016-12-12 15:50:38 +0800  936) 	}
e6819350df123 (Yahui Wang                    2016-12-12 15:50:38 +0800  937) 
e6819350df123 (Yahui Wang                    2016-12-12 15:50:38 +0800  938) 	pinfo = mfd->panel_info;
e6819350df123 (Yahui Wang                    2016-12-12 15:50:38 +0800  939) 
e6819350df123 (Yahui Wang                    2016-12-12 15:50:38 +0800  940) 	if (kstrtouint(buf, 0, &persist_mode)) {
e6819350df123 (Yahui Wang                    2016-12-12 15:50:38 +0800  941) 		pr_err("kstrtouint buf error!\n");
e6819350df123 (Yahui Wang                    2016-12-12 15:50:38 +0800  942) 		return len;
e6819350df123 (Yahui Wang                    2016-12-12 15:50:38 +0800  943) 	}
e6819350df123 (Yahui Wang                    2016-12-12 15:50:38 +0800  944) 
e6819350df123 (Yahui Wang                    2016-12-12 15:50:38 +0800  945) 	mutex_lock(&mfd->mdss_sysfs_lock);
e6819350df123 (Yahui Wang                    2016-12-12 15:50:38 +0800  946) 	if (mdss_panel_is_power_off(mfd->panel_power_state)) {
e6819350df123 (Yahui Wang                    2016-12-12 15:50:38 +0800  947) 		pinfo->persist_mode = persist_mode;
e6819350df123 (Yahui Wang                    2016-12-12 15:50:38 +0800  948) 		goto end;
e6819350df123 (Yahui Wang                    2016-12-12 15:50:38 +0800  949) 	}
e6819350df123 (Yahui Wang                    2016-12-12 15:50:38 +0800  950) 
e6819350df123 (Yahui Wang                    2016-12-12 15:50:38 +0800  951) 	mutex_lock(&mfd->bl_lock);
e6819350df123 (Yahui Wang                    2016-12-12 15:50:38 +0800  952) 
e6819350df123 (Yahui Wang                    2016-12-12 15:50:38 +0800  953) 	pdata = dev_get_platdata(&mfd->pdev->dev);
e6819350df123 (Yahui Wang                    2016-12-12 15:50:38 +0800  954) 	if ((pdata) && (pdata->apply_display_setting))
e6819350df123 (Yahui Wang                    2016-12-12 15:50:38 +0800  955) 		ret = pdata->apply_display_setting(pdata, persist_mode);
e6819350df123 (Yahui Wang                    2016-12-12 15:50:38 +0800  956) 
e6819350df123 (Yahui Wang                    2016-12-12 15:50:38 +0800  957) 	mutex_unlock(&mfd->bl_lock);
e6819350df123 (Yahui Wang                    2016-12-12 15:50:38 +0800  958) 
e6819350df123 (Yahui Wang                    2016-12-12 15:50:38 +0800  959) 	if (!ret) {
e6819350df123 (Yahui Wang                    2016-12-12 15:50:38 +0800  960) 		pr_debug("%s: Persist mode %d\n", __func__, persist_mode);
e6819350df123 (Yahui Wang                    2016-12-12 15:50:38 +0800  961) 		pinfo->persist_mode = persist_mode;
e6819350df123 (Yahui Wang                    2016-12-12 15:50:38 +0800  962) 	}
e6819350df123 (Yahui Wang                    2016-12-12 15:50:38 +0800  963) 
e6819350df123 (Yahui Wang                    2016-12-12 15:50:38 +0800  964) end:
e6819350df123 (Yahui Wang                    2016-12-12 15:50:38 +0800  965) 	mutex_unlock(&mfd->mdss_sysfs_lock);
e6819350df123 (Yahui Wang                    2016-12-12 15:50:38 +0800  966) 
e6819350df123 (Yahui Wang                    2016-12-12 15:50:38 +0800  967) 	return len;
e6819350df123 (Yahui Wang                    2016-12-12 15:50:38 +0800  968) }
e6819350df123 (Yahui Wang                    2016-12-12 15:50:38 +0800  969) 
e6819350df123 (Yahui Wang                    2016-12-12 15:50:38 +0800  970) static ssize_t mdss_fb_get_persist_mode(struct device *dev,
e6819350df123 (Yahui Wang                    2016-12-12 15:50:38 +0800  971) 		struct device_attribute *attr, char *buf)
e6819350df123 (Yahui Wang                    2016-12-12 15:50:38 +0800  972) {
e6819350df123 (Yahui Wang                    2016-12-12 15:50:38 +0800  973) 	struct fb_info *fbi = dev_get_drvdata(dev);
e6819350df123 (Yahui Wang                    2016-12-12 15:50:38 +0800  974) 	struct msm_fb_data_type *mfd = (struct msm_fb_data_type *)fbi->par;
e6819350df123 (Yahui Wang                    2016-12-12 15:50:38 +0800  975) 	struct mdss_panel_data *pdata;
e6819350df123 (Yahui Wang                    2016-12-12 15:50:38 +0800  976) 	struct mdss_panel_info *pinfo;
e6819350df123 (Yahui Wang                    2016-12-12 15:50:38 +0800  977) 	int ret;
e6819350df123 (Yahui Wang                    2016-12-12 15:50:38 +0800  978) 
e6819350df123 (Yahui Wang                    2016-12-12 15:50:38 +0800  979) 	pdata = dev_get_platdata(&mfd->pdev->dev);
e6819350df123 (Yahui Wang                    2016-12-12 15:50:38 +0800  980) 	if (!pdata) {
e6819350df123 (Yahui Wang                    2016-12-12 15:50:38 +0800  981) 		pr_err("no panel connected!\n");
e6819350df123 (Yahui Wang                    2016-12-12 15:50:38 +0800  982) 		return -EINVAL;
e6819350df123 (Yahui Wang                    2016-12-12 15:50:38 +0800  983) 	}
e6819350df123 (Yahui Wang                    2016-12-12 15:50:38 +0800  984) 	pinfo = &pdata->panel_info;
e6819350df123 (Yahui Wang                    2016-12-12 15:50:38 +0800  985) 
e6819350df123 (Yahui Wang                    2016-12-12 15:50:38 +0800  986) 	ret = scnprintf(buf, PAGE_SIZE, "%d\n", pinfo->persist_mode);
e6819350df123 (Yahui Wang                    2016-12-12 15:50:38 +0800  987) 
e6819350df123 (Yahui Wang                    2016-12-12 15:50:38 +0800  988) 	return ret;
e6819350df123 (Yahui Wang                    2016-12-12 15:50:38 +0800  989) }
e6819350df123 (Yahui Wang                    2016-12-12 15:50:38 +0800  990) 
cdc3ace6a8a1c (Abhijit Kulkarni              2017-02-08 16:41:16 -0800  991) static ssize_t mdss_fb_idle_pc_notify(struct device *dev,
cdc3ace6a8a1c (Abhijit Kulkarni              2017-02-08 16:41:16 -0800  992) 		struct device_attribute *attr, char *buf)
cdc3ace6a8a1c (Abhijit Kulkarni              2017-02-08 16:41:16 -0800  993) {
cdc3ace6a8a1c (Abhijit Kulkarni              2017-02-08 16:41:16 -0800  994) 	return scnprintf(buf, PAGE_SIZE, "idle power collapsed\n");
cdc3ace6a8a1c (Abhijit Kulkarni              2017-02-08 16:41:16 -0800  995) }
cdc3ace6a8a1c (Abhijit Kulkarni              2017-02-08 16:41:16 -0800  996) 
458b074be71b4 (Ujwal Patel                   2012-08-13 17:03:00 -0700  997) static DEVICE_ATTR(msm_fb_type, S_IRUGO, mdss_fb_get_type, NULL);
68e08b6ebcff3 (Jayant Shekhar                2014-04-10 16:15:16 +0530  998) static DEVICE_ATTR(msm_fb_split, S_IRUGO | S_IWUSR, mdss_fb_show_split,
68e08b6ebcff3 (Jayant Shekhar                2014-04-10 16:15:16 +0530  999) 					mdss_fb_store_split);
93619215fa1d7 (Jayant Shekhar                2013-09-20 12:53:30 +0530 1000) static DEVICE_ATTR(show_blank_event, S_IRUGO, mdss_mdp_show_blank_event, NULL);
824b24b09cd46 (Aravind Venkateswaran         2014-02-06 18:27:27 -0800 1001) static DEVICE_ATTR(idle_time, S_IRUGO | S_IWUSR | S_IWGRP,
824b24b09cd46 (Aravind Venkateswaran         2014-02-06 18:27:27 -0800 1002) 	mdss_fb_get_idle_time, mdss_fb_set_idle_time);
824b24b09cd46 (Aravind Venkateswaran         2014-02-06 18:27:27 -0800 1003) static DEVICE_ATTR(idle_notify, S_IRUGO, mdss_fb_get_idle_notify, NULL);
869c067a6d347 (Jeykumar Sankaran             2014-03-06 12:12:24 -0800 1004) static DEVICE_ATTR(msm_fb_panel_info, S_IRUGO, mdss_fb_get_panel_info, NULL);
2bda05c8b03aa (Ujwal Patel                   2014-06-03 12:53:11 -0700 1005) static DEVICE_ATTR(msm_fb_src_split_info, S_IRUGO, mdss_fb_get_src_split_info,
2bda05c8b03aa (Ujwal Patel                   2014-06-03 12:53:11 -0700 1006) 	NULL);
fe4c3c2f7531c (Shivaraj Shetty               2014-07-03 11:35:29 +0530 1007) static DEVICE_ATTR(msm_fb_thermal_level, S_IRUGO | S_IWUSR,
fe4c3c2f7531c (Shivaraj Shetty               2014-07-03 11:35:29 +0530 1008) 	mdss_fb_get_thermal_level, mdss_fb_set_thermal_level);
7aa48794fcb1e (Huaibin Yang                  2015-02-11 14:13:07 -0800 1009) static DEVICE_ATTR(msm_fb_panel_status, S_IRUGO | S_IWUSR,
7aa48794fcb1e (Huaibin Yang                  2015-02-11 14:13:07 -0800 1010) 	mdss_fb_get_panel_status, mdss_fb_force_panel_dead);
dcd8ca273948d (Huaibin Yang                  2015-02-25 23:43:31 -0800 1011) static DEVICE_ATTR(msm_fb_dfps_mode, S_IRUGO | S_IWUSR,
dcd8ca273948d (Huaibin Yang                  2015-02-25 23:43:31 -0800 1012) 	mdss_fb_get_dfps_mode, mdss_fb_change_dfps_mode);
90fd65ba93d5c (Krishna Manikandan            2016-12-28 17:58:39 +0530 1013) static DEVICE_ATTR(measured_fps, S_IRUGO | S_IWUSR | S_IWGRP,
90fd65ba93d5c (Krishna Manikandan            2016-12-28 17:58:39 +0530 1014) 	mdss_fb_get_fps_info, NULL);
e6819350df123 (Yahui Wang                    2016-12-12 15:50:38 +0800 1015) static DEVICE_ATTR(msm_fb_persist_mode, S_IRUGO | S_IWUSR,
e6819350df123 (Yahui Wang                    2016-12-12 15:50:38 +0800 1016) 	mdss_fb_get_persist_mode, mdss_fb_change_persist_mode);
cdc3ace6a8a1c (Abhijit Kulkarni              2017-02-08 16:41:16 -0800 1017) static DEVICE_ATTR(idle_power_collapse, S_IRUGO, mdss_fb_idle_pc_notify, NULL);
cdc3ace6a8a1c (Abhijit Kulkarni              2017-02-08 16:41:16 -0800 1018) 
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 1019) static struct attribute *mdss_fb_attrs[] = {
458b074be71b4 (Ujwal Patel                   2012-08-13 17:03:00 -0700 1020) 	&dev_attr_msm_fb_type.attr,
d07cc414c46bf (Huaibin Yang                  2013-06-13 17:05:23 -0700 1021) 	&dev_attr_msm_fb_split.attr,
93619215fa1d7 (Jayant Shekhar                2013-09-20 12:53:30 +0530 1022) 	&dev_attr_show_blank_event.attr,
824b24b09cd46 (Aravind Venkateswaran         2014-02-06 18:27:27 -0800 1023) 	&dev_attr_idle_time.attr,
824b24b09cd46 (Aravind Venkateswaran         2014-02-06 18:27:27 -0800 1024) 	&dev_attr_idle_notify.attr,
869c067a6d347 (Jeykumar Sankaran             2014-03-06 12:12:24 -0800 1025) 	&dev_attr_msm_fb_panel_info.attr,
2bda05c8b03aa (Ujwal Patel                   2014-06-03 12:53:11 -0700 1026) 	&dev_attr_msm_fb_src_split_info.attr,
fe4c3c2f7531c (Shivaraj Shetty               2014-07-03 11:35:29 +0530 1027) 	&dev_attr_msm_fb_thermal_level.attr,
7937cdefcf8bf (Ray Zhang                     2015-01-08 14:53:11 +0800 1028) 	&dev_attr_msm_fb_panel_status.attr,
dcd8ca273948d (Huaibin Yang                  2015-02-25 23:43:31 -0800 1029) 	&dev_attr_msm_fb_dfps_mode.attr,
90fd65ba93d5c (Krishna Manikandan            2016-12-28 17:58:39 +0530 1030) 	&dev_attr_measured_fps.attr,
e6819350df123 (Yahui Wang                    2016-12-12 15:50:38 +0800 1031) 	&dev_attr_msm_fb_persist_mode.attr,
cdc3ace6a8a1c (Abhijit Kulkarni              2017-02-08 16:41:16 -0800 1032) 	&dev_attr_idle_power_collapse.attr,
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 1033) 	NULL,
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 1034) };
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 1035) 
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 1036) static struct attribute_group mdss_fb_attr_group = {
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 1037) 	.attrs = mdss_fb_attrs,
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 1038) };
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 1039) 
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 1040) static int mdss_fb_create_sysfs(struct msm_fb_data_type *mfd)
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 1041) {
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 1042) 	int rc;
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 1043) 
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 1044) 	rc = sysfs_create_group(&mfd->fbi->dev->kobj, &mdss_fb_attr_group);
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 1045) 	if (rc)
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 1046) 		pr_err("sysfs group creation failed, rc=%d\n", rc);
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 1047) 	return rc;
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 1048) }
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 1049) 
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 1050) static void mdss_fb_remove_sysfs(struct msm_fb_data_type *mfd)
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 1051) {
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 1052) 	sysfs_remove_group(&mfd->fbi->dev->kobj, &mdss_fb_attr_group);
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 1053) }
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 1054) 
5c1f7cd906b20 (Ujwal Patel                   2013-07-25 10:09:02 -0700 1055) static void mdss_fb_shutdown(struct platform_device *pdev)
5c1f7cd906b20 (Ujwal Patel                   2013-07-25 10:09:02 -0700 1056) {
5c1f7cd906b20 (Ujwal Patel                   2013-07-25 10:09:02 -0700 1057) 	struct msm_fb_data_type *mfd = platform_get_drvdata(pdev);
5c1f7cd906b20 (Ujwal Patel                   2013-07-25 10:09:02 -0700 1058) 
272d4979007a1 (Aravind Venkateswaran         2013-11-12 14:33:16 -0800 1059) 	mfd->shutdown_pending = true;
bc4c597e76ef4 (Ujwal Patel                   2015-04-21 18:33:06 -0700 1060) 
bc4c597e76ef4 (Ujwal Patel                   2015-04-21 18:33:06 -0700 1061) 	/* wake up threads waiting on idle or kickoff queues */
bc4c597e76ef4 (Ujwal Patel                   2015-04-21 18:33:06 -0700 1062) 	wake_up_all(&mfd->idle_wait_q);
bc4c597e76ef4 (Ujwal Patel                   2015-04-21 18:33:06 -0700 1063) 	wake_up_all(&mfd->kickoff_wait_q);
bc4c597e76ef4 (Ujwal Patel                   2015-04-21 18:33:06 -0700 1064) 
a681b26df0050 (Ujwal Patel                   2013-10-22 23:24:46 -0700 1065) 	lock_fb_info(mfd->fbi);
a681b26df0050 (Ujwal Patel                   2013-10-22 23:24:46 -0700 1066) 	mdss_fb_release_all(mfd->fbi, true);
0cc38ec27bf86 (Adrian Salido-Moreno          2014-11-14 14:05:08 -0800 1067) 	sysfs_notify(&mfd->fbi->dev->kobj, NULL, "show_blank_event");
a681b26df0050 (Ujwal Patel                   2013-10-22 23:24:46 -0700 1068) 	unlock_fb_info(mfd->fbi);
5c1f7cd906b20 (Ujwal Patel                   2013-07-25 10:09:02 -0700 1069) }
5c1f7cd906b20 (Ujwal Patel                   2013-07-25 10:09:02 -0700 1070) 
93aeac2ac1a89 (Vinu Deokaran                 2015-06-23 13:20:39 -0700 1071) static void mdss_fb_input_event_handler(struct input_handle *handle,
93aeac2ac1a89 (Vinu Deokaran                 2015-06-23 13:20:39 -0700 1072) 				    unsigned int type,
93aeac2ac1a89 (Vinu Deokaran                 2015-06-23 13:20:39 -0700 1073) 				    unsigned int code,
93aeac2ac1a89 (Vinu Deokaran                 2015-06-23 13:20:39 -0700 1074) 				    int value)
93aeac2ac1a89 (Vinu Deokaran                 2015-06-23 13:20:39 -0700 1075) {
93aeac2ac1a89 (Vinu Deokaran                 2015-06-23 13:20:39 -0700 1076) 	struct msm_fb_data_type *mfd = handle->handler->private;
93aeac2ac1a89 (Vinu Deokaran                 2015-06-23 13:20:39 -0700 1077) 	int rc;
93aeac2ac1a89 (Vinu Deokaran                 2015-06-23 13:20:39 -0700 1078) 
ba55276d8c58e (Vinu Deokaran                 2015-08-13 09:55:23 -0700 1079) 	if ((type != EV_ABS) || !mdss_fb_is_power_on(mfd))
93aeac2ac1a89 (Vinu Deokaran                 2015-06-23 13:20:39 -0700 1080) 		return;
93aeac2ac1a89 (Vinu Deokaran                 2015-06-23 13:20:39 -0700 1081) 
93aeac2ac1a89 (Vinu Deokaran                 2015-06-23 13:20:39 -0700 1082) 	if (mfd->mdp.input_event_handler) {
93aeac2ac1a89 (Vinu Deokaran                 2015-06-23 13:20:39 -0700 1083) 		rc = mfd->mdp.input_event_handler(mfd);
93aeac2ac1a89 (Vinu Deokaran                 2015-06-23 13:20:39 -0700 1084) 		if (rc)
93aeac2ac1a89 (Vinu Deokaran                 2015-06-23 13:20:39 -0700 1085) 			pr_err("mdp input event handler failed\n");
93aeac2ac1a89 (Vinu Deokaran                 2015-06-23 13:20:39 -0700 1086) 	}
93aeac2ac1a89 (Vinu Deokaran                 2015-06-23 13:20:39 -0700 1087) }
93aeac2ac1a89 (Vinu Deokaran                 2015-06-23 13:20:39 -0700 1088) 
93aeac2ac1a89 (Vinu Deokaran                 2015-06-23 13:20:39 -0700 1089) static int mdss_fb_input_connect(struct input_handler *handler,
93aeac2ac1a89 (Vinu Deokaran                 2015-06-23 13:20:39 -0700 1090) 			     struct input_dev *dev,
93aeac2ac1a89 (Vinu Deokaran                 2015-06-23 13:20:39 -0700 1091) 			     const struct input_device_id *id)
93aeac2ac1a89 (Vinu Deokaran                 2015-06-23 13:20:39 -0700 1092) {
93aeac2ac1a89 (Vinu Deokaran                 2015-06-23 13:20:39 -0700 1093) 	int rc;
93aeac2ac1a89 (Vinu Deokaran                 2015-06-23 13:20:39 -0700 1094) 	struct input_handle *handle;
93aeac2ac1a89 (Vinu Deokaran                 2015-06-23 13:20:39 -0700 1095) 
93aeac2ac1a89 (Vinu Deokaran                 2015-06-23 13:20:39 -0700 1096) 	handle = kzalloc(sizeof(*handle), GFP_KERNEL);
93aeac2ac1a89 (Vinu Deokaran                 2015-06-23 13:20:39 -0700 1097) 	if (!handle)
93aeac2ac1a89 (Vinu Deokaran                 2015-06-23 13:20:39 -0700 1098) 		return -ENOMEM;
93aeac2ac1a89 (Vinu Deokaran                 2015-06-23 13:20:39 -0700 1099) 
93aeac2ac1a89 (Vinu Deokaran                 2015-06-23 13:20:39 -0700 1100) 	handle->dev = dev;
93aeac2ac1a89 (Vinu Deokaran                 2015-06-23 13:20:39 -0700 1101) 	handle->handler = handler;
93aeac2ac1a89 (Vinu Deokaran                 2015-06-23 13:20:39 -0700 1102) 	handle->name = handler->name;
93aeac2ac1a89 (Vinu Deokaran                 2015-06-23 13:20:39 -0700 1103) 
93aeac2ac1a89 (Vinu Deokaran                 2015-06-23 13:20:39 -0700 1104) 	rc = input_register_handle(handle);
93aeac2ac1a89 (Vinu Deokaran                 2015-06-23 13:20:39 -0700 1105) 	if (rc) {
93aeac2ac1a89 (Vinu Deokaran                 2015-06-23 13:20:39 -0700 1106) 		pr_err("failed to register input handle, rc = %d\n", rc);
93aeac2ac1a89 (Vinu Deokaran                 2015-06-23 13:20:39 -0700 1107) 		goto error;
93aeac2ac1a89 (Vinu Deokaran                 2015-06-23 13:20:39 -0700 1108) 	}
93aeac2ac1a89 (Vinu Deokaran                 2015-06-23 13:20:39 -0700 1109) 
93aeac2ac1a89 (Vinu Deokaran                 2015-06-23 13:20:39 -0700 1110) 	rc = input_open_device(handle);
93aeac2ac1a89 (Vinu Deokaran                 2015-06-23 13:20:39 -0700 1111) 	if (rc) {
93aeac2ac1a89 (Vinu Deokaran                 2015-06-23 13:20:39 -0700 1112) 		pr_err("failed to open input device, rc = %d\n", rc);
93aeac2ac1a89 (Vinu Deokaran                 2015-06-23 13:20:39 -0700 1113) 		goto error_unregister;
93aeac2ac1a89 (Vinu Deokaran                 2015-06-23 13:20:39 -0700 1114) 	}
93aeac2ac1a89 (Vinu Deokaran                 2015-06-23 13:20:39 -0700 1115) 
93aeac2ac1a89 (Vinu Deokaran                 2015-06-23 13:20:39 -0700 1116) 	return 0;
93aeac2ac1a89 (Vinu Deokaran                 2015-06-23 13:20:39 -0700 1117) 
93aeac2ac1a89 (Vinu Deokaran                 2015-06-23 13:20:39 -0700 1118) error_unregister:
93aeac2ac1a89 (Vinu Deokaran                 2015-06-23 13:20:39 -0700 1119) 	input_unregister_handle(handle);
93aeac2ac1a89 (Vinu Deokaran                 2015-06-23 13:20:39 -0700 1120) error:
93aeac2ac1a89 (Vinu Deokaran                 2015-06-23 13:20:39 -0700 1121) 	kfree(handle);
93aeac2ac1a89 (Vinu Deokaran                 2015-06-23 13:20:39 -0700 1122) 	return rc;
93aeac2ac1a89 (Vinu Deokaran                 2015-06-23 13:20:39 -0700 1123) }
93aeac2ac1a89 (Vinu Deokaran                 2015-06-23 13:20:39 -0700 1124) 
93aeac2ac1a89 (Vinu Deokaran                 2015-06-23 13:20:39 -0700 1125) static void mdss_fb_input_disconnect(struct input_handle *handle)
93aeac2ac1a89 (Vinu Deokaran                 2015-06-23 13:20:39 -0700 1126) {
93aeac2ac1a89 (Vinu Deokaran                 2015-06-23 13:20:39 -0700 1127) 	input_close_device(handle);
93aeac2ac1a89 (Vinu Deokaran                 2015-06-23 13:20:39 -0700 1128) 	input_unregister_handle(handle);
93aeac2ac1a89 (Vinu Deokaran                 2015-06-23 13:20:39 -0700 1129) 	kfree(handle);
93aeac2ac1a89 (Vinu Deokaran                 2015-06-23 13:20:39 -0700 1130) }
93aeac2ac1a89 (Vinu Deokaran                 2015-06-23 13:20:39 -0700 1131) 
93aeac2ac1a89 (Vinu Deokaran                 2015-06-23 13:20:39 -0700 1132) /*
93aeac2ac1a89 (Vinu Deokaran                 2015-06-23 13:20:39 -0700 1133)  * Structure for specifying event parameters on which to receive callbacks.
93aeac2ac1a89 (Vinu Deokaran                 2015-06-23 13:20:39 -0700 1134)  * This structure will trigger a callback in case of a touch event (specified by
93aeac2ac1a89 (Vinu Deokaran                 2015-06-23 13:20:39 -0700 1135)  * EV_ABS) where there is a change in X and Y coordinates,
93aeac2ac1a89 (Vinu Deokaran                 2015-06-23 13:20:39 -0700 1136)  */
93aeac2ac1a89 (Vinu Deokaran                 2015-06-23 13:20:39 -0700 1137) static const struct input_device_id mdss_fb_input_ids[] = {
93aeac2ac1a89 (Vinu Deokaran                 2015-06-23 13:20:39 -0700 1138) 	{
93aeac2ac1a89 (Vinu Deokaran                 2015-06-23 13:20:39 -0700 1139) 		.flags = INPUT_DEVICE_ID_MATCH_EVBIT,
93aeac2ac1a89 (Vinu Deokaran                 2015-06-23 13:20:39 -0700 1140) 		.evbit = { BIT_MASK(EV_ABS) },
93aeac2ac1a89 (Vinu Deokaran                 2015-06-23 13:20:39 -0700 1141) 		.absbit = { [BIT_WORD(ABS_MT_POSITION_X)] =
93aeac2ac1a89 (Vinu Deokaran                 2015-06-23 13:20:39 -0700 1142) 				BIT_MASK(ABS_MT_POSITION_X) |
93aeac2ac1a89 (Vinu Deokaran                 2015-06-23 13:20:39 -0700 1143) 				BIT_MASK(ABS_MT_POSITION_Y) },
93aeac2ac1a89 (Vinu Deokaran                 2015-06-23 13:20:39 -0700 1144) 	},
93aeac2ac1a89 (Vinu Deokaran                 2015-06-23 13:20:39 -0700 1145) 	{ },
93aeac2ac1a89 (Vinu Deokaran                 2015-06-23 13:20:39 -0700 1146) };
93aeac2ac1a89 (Vinu Deokaran                 2015-06-23 13:20:39 -0700 1147) 
93aeac2ac1a89 (Vinu Deokaran                 2015-06-23 13:20:39 -0700 1148) static int mdss_fb_register_input_handler(struct msm_fb_data_type *mfd)
93aeac2ac1a89 (Vinu Deokaran                 2015-06-23 13:20:39 -0700 1149) {
93aeac2ac1a89 (Vinu Deokaran                 2015-06-23 13:20:39 -0700 1150) 	int rc;
93aeac2ac1a89 (Vinu Deokaran                 2015-06-23 13:20:39 -0700 1151) 	struct input_handler *handler;
93aeac2ac1a89 (Vinu Deokaran                 2015-06-23 13:20:39 -0700 1152) 
93aeac2ac1a89 (Vinu Deokaran                 2015-06-23 13:20:39 -0700 1153) 	if (mfd->input_handler)
93aeac2ac1a89 (Vinu Deokaran                 2015-06-23 13:20:39 -0700 1154) 		return -EINVAL;
93aeac2ac1a89 (Vinu Deokaran                 2015-06-23 13:20:39 -0700 1155) 
93aeac2ac1a89 (Vinu Deokaran                 2015-06-23 13:20:39 -0700 1156) 	handler = kzalloc(sizeof(*handler), GFP_KERNEL);
93aeac2ac1a89 (Vinu Deokaran                 2015-06-23 13:20:39 -0700 1157) 	if (!handler)
93aeac2ac1a89 (Vinu Deokaran                 2015-06-23 13:20:39 -0700 1158) 		return -ENOMEM;
93aeac2ac1a89 (Vinu Deokaran                 2015-06-23 13:20:39 -0700 1159) 
93aeac2ac1a89 (Vinu Deokaran                 2015-06-23 13:20:39 -0700 1160) 	handler->event = mdss_fb_input_event_handler;
93aeac2ac1a89 (Vinu Deokaran                 2015-06-23 13:20:39 -0700 1161) 	handler->connect = mdss_fb_input_connect;
93aeac2ac1a89 (Vinu Deokaran                 2015-06-23 13:20:39 -0700 1162) 	handler->disconnect = mdss_fb_input_disconnect,
93aeac2ac1a89 (Vinu Deokaran                 2015-06-23 13:20:39 -0700 1163) 	handler->name = "mdss_fb",
93aeac2ac1a89 (Vinu Deokaran                 2015-06-23 13:20:39 -0700 1164) 	handler->id_table = mdss_fb_input_ids;
93aeac2ac1a89 (Vinu Deokaran                 2015-06-23 13:20:39 -0700 1165) 	handler->private = mfd;
93aeac2ac1a89 (Vinu Deokaran                 2015-06-23 13:20:39 -0700 1166) 
93aeac2ac1a89 (Vinu Deokaran                 2015-06-23 13:20:39 -0700 1167) 	rc = input_register_handler(handler);
93aeac2ac1a89 (Vinu Deokaran                 2015-06-23 13:20:39 -0700 1168) 	if (rc) {
93aeac2ac1a89 (Vinu Deokaran                 2015-06-23 13:20:39 -0700 1169) 		pr_err("Unable to register the input handler\n");
93aeac2ac1a89 (Vinu Deokaran                 2015-06-23 13:20:39 -0700 1170) 		kfree(handler);
93aeac2ac1a89 (Vinu Deokaran                 2015-06-23 13:20:39 -0700 1171) 	} else {
93aeac2ac1a89 (Vinu Deokaran                 2015-06-23 13:20:39 -0700 1172) 		mfd->input_handler = handler;
93aeac2ac1a89 (Vinu Deokaran                 2015-06-23 13:20:39 -0700 1173) 	}
93aeac2ac1a89 (Vinu Deokaran                 2015-06-23 13:20:39 -0700 1174) 
93aeac2ac1a89 (Vinu Deokaran                 2015-06-23 13:20:39 -0700 1175) 	return rc;
93aeac2ac1a89 (Vinu Deokaran                 2015-06-23 13:20:39 -0700 1176) }
93aeac2ac1a89 (Vinu Deokaran                 2015-06-23 13:20:39 -0700 1177) 
93aeac2ac1a89 (Vinu Deokaran                 2015-06-23 13:20:39 -0700 1178) static void mdss_fb_unregister_input_handler(struct msm_fb_data_type *mfd)
93aeac2ac1a89 (Vinu Deokaran                 2015-06-23 13:20:39 -0700 1179) {
93aeac2ac1a89 (Vinu Deokaran                 2015-06-23 13:20:39 -0700 1180) 	if (!mfd->input_handler)
93aeac2ac1a89 (Vinu Deokaran                 2015-06-23 13:20:39 -0700 1181) 		return;
93aeac2ac1a89 (Vinu Deokaran                 2015-06-23 13:20:39 -0700 1182) 
93aeac2ac1a89 (Vinu Deokaran                 2015-06-23 13:20:39 -0700 1183) 	input_unregister_handler(mfd->input_handler);
93aeac2ac1a89 (Vinu Deokaran                 2015-06-23 13:20:39 -0700 1184) 	kfree(mfd->input_handler);
93aeac2ac1a89 (Vinu Deokaran                 2015-06-23 13:20:39 -0700 1185) }
93aeac2ac1a89 (Vinu Deokaran                 2015-06-23 13:20:39 -0700 1186) 
649c91d1cd61d (Adrian Salido-Moreno          2015-04-23 18:33:56 -0700 1187) static void mdss_fb_videomode_from_panel_timing(struct fb_videomode *videomode,
649c91d1cd61d (Adrian Salido-Moreno          2015-04-23 18:33:56 -0700 1188) 		struct mdss_panel_timing *pt)
649c91d1cd61d (Adrian Salido-Moreno          2015-04-23 18:33:56 -0700 1189) {
649c91d1cd61d (Adrian Salido-Moreno          2015-04-23 18:33:56 -0700 1190) 	videomode->name = pt->name;
649c91d1cd61d (Adrian Salido-Moreno          2015-04-23 18:33:56 -0700 1191) 	videomode->xres = pt->xres;
649c91d1cd61d (Adrian Salido-Moreno          2015-04-23 18:33:56 -0700 1192) 	videomode->yres = pt->yres;
649c91d1cd61d (Adrian Salido-Moreno          2015-04-23 18:33:56 -0700 1193) 	videomode->left_margin = pt->h_back_porch;
649c91d1cd61d (Adrian Salido-Moreno          2015-04-23 18:33:56 -0700 1194) 	videomode->right_margin = pt->h_front_porch;
649c91d1cd61d (Adrian Salido-Moreno          2015-04-23 18:33:56 -0700 1195) 	videomode->hsync_len = pt->h_pulse_width;
649c91d1cd61d (Adrian Salido-Moreno          2015-04-23 18:33:56 -0700 1196) 	videomode->upper_margin = pt->v_back_porch;
649c91d1cd61d (Adrian Salido-Moreno          2015-04-23 18:33:56 -0700 1197) 	videomode->lower_margin = pt->v_front_porch;
649c91d1cd61d (Adrian Salido-Moreno          2015-04-23 18:33:56 -0700 1198) 	videomode->vsync_len = pt->v_pulse_width;
649c91d1cd61d (Adrian Salido-Moreno          2015-04-23 18:33:56 -0700 1199) 	videomode->refresh = pt->frame_rate;
649c91d1cd61d (Adrian Salido-Moreno          2015-04-23 18:33:56 -0700 1200) 	videomode->flag = 0;
649c91d1cd61d (Adrian Salido-Moreno          2015-04-23 18:33:56 -0700 1201) 	videomode->vmode = 0;
649c91d1cd61d (Adrian Salido-Moreno          2015-04-23 18:33:56 -0700 1202) 	videomode->sync = 0;
d9f95bd8d910d (Adrian Salido-Moreno          2015-08-21 15:42:52 -0700 1203) 
d9f95bd8d910d (Adrian Salido-Moreno          2015-08-21 15:42:52 -0700 1204) 	if (videomode->refresh) {
d9f95bd8d910d (Adrian Salido-Moreno          2015-08-21 15:42:52 -0700 1205) 		unsigned long clk_rate, h_total, v_total;
d9f95bd8d910d (Adrian Salido-Moreno          2015-08-21 15:42:52 -0700 1206) 
d9f95bd8d910d (Adrian Salido-Moreno          2015-08-21 15:42:52 -0700 1207) 		h_total = videomode->xres + videomode->left_margin
d9f95bd8d910d (Adrian Salido-Moreno          2015-08-21 15:42:52 -0700 1208) 			+ videomode->right_margin + videomode->hsync_len;
d9f95bd8d910d (Adrian Salido-Moreno          2015-08-21 15:42:52 -0700 1209) 		v_total = videomode->yres + videomode->lower_margin
d9f95bd8d910d (Adrian Salido-Moreno          2015-08-21 15:42:52 -0700 1210) 			+ videomode->upper_margin + videomode->vsync_len;
d9f95bd8d910d (Adrian Salido-Moreno          2015-08-21 15:42:52 -0700 1211) 		clk_rate = h_total * v_total * videomode->refresh;
dfe5ee688c976 (Vishnuvardhan Prodduturi      2015-11-13 14:28:58 +0530 1212) 		videomode->pixclock =
dfe5ee688c976 (Vishnuvardhan Prodduturi      2015-11-13 14:28:58 +0530 1213) 			KHZ2PICOS(clk_rate / 1000);
d9f95bd8d910d (Adrian Salido-Moreno          2015-08-21 15:42:52 -0700 1214) 	} else {
dfe5ee688c976 (Vishnuvardhan Prodduturi      2015-11-13 14:28:58 +0530 1215) 		videomode->pixclock =
dfe5ee688c976 (Vishnuvardhan Prodduturi      2015-11-13 14:28:58 +0530 1216) 			KHZ2PICOS((unsigned long)pt->clk_rate / 1000);
d9f95bd8d910d (Adrian Salido-Moreno          2015-08-21 15:42:52 -0700 1217) 	}
649c91d1cd61d (Adrian Salido-Moreno          2015-04-23 18:33:56 -0700 1218) }
649c91d1cd61d (Adrian Salido-Moreno          2015-04-23 18:33:56 -0700 1219) 
df73dce85c64f (Veera Sundaram Sankaran       2016-04-15 11:57:24 -0700 1220) static void mdss_fb_set_split_mode(struct msm_fb_data_type *mfd,
df73dce85c64f (Veera Sundaram Sankaran       2016-04-15 11:57:24 -0700 1221) 		struct mdss_panel_data *pdata)
df73dce85c64f (Veera Sundaram Sankaran       2016-04-15 11:57:24 -0700 1222) {
df73dce85c64f (Veera Sundaram Sankaran       2016-04-15 11:57:24 -0700 1223) 	if (pdata->panel_info.is_split_display) {
df73dce85c64f (Veera Sundaram Sankaran       2016-04-15 11:57:24 -0700 1224) 		struct mdss_panel_data *pnext = pdata->next;
df73dce85c64f (Veera Sundaram Sankaran       2016-04-15 11:57:24 -0700 1225) 
df73dce85c64f (Veera Sundaram Sankaran       2016-04-15 11:57:24 -0700 1226) 		mfd->split_fb_left = pdata->panel_info.lm_widths[0];
df73dce85c64f (Veera Sundaram Sankaran       2016-04-15 11:57:24 -0700 1227) 		if (pnext)
df73dce85c64f (Veera Sundaram Sankaran       2016-04-15 11:57:24 -0700 1228) 			mfd->split_fb_right = pnext->panel_info.lm_widths[0];
df73dce85c64f (Veera Sundaram Sankaran       2016-04-15 11:57:24 -0700 1229) 
df73dce85c64f (Veera Sundaram Sankaran       2016-04-15 11:57:24 -0700 1230) 		if (pdata->panel_info.use_pingpong_split)
df73dce85c64f (Veera Sundaram Sankaran       2016-04-15 11:57:24 -0700 1231) 			mfd->split_mode = MDP_PINGPONG_SPLIT;
df73dce85c64f (Veera Sundaram Sankaran       2016-04-15 11:57:24 -0700 1232) 		else
df73dce85c64f (Veera Sundaram Sankaran       2016-04-15 11:57:24 -0700 1233) 			mfd->split_mode = MDP_DUAL_LM_DUAL_DISPLAY;
df73dce85c64f (Veera Sundaram Sankaran       2016-04-15 11:57:24 -0700 1234) 	} else if ((pdata->panel_info.lm_widths[0] != 0)
df73dce85c64f (Veera Sundaram Sankaran       2016-04-15 11:57:24 -0700 1235) 			&& (pdata->panel_info.lm_widths[1] != 0)) {
df73dce85c64f (Veera Sundaram Sankaran       2016-04-15 11:57:24 -0700 1236) 		mfd->split_fb_left = pdata->panel_info.lm_widths[0];
df73dce85c64f (Veera Sundaram Sankaran       2016-04-15 11:57:24 -0700 1237) 		mfd->split_fb_right = pdata->panel_info.lm_widths[1];
df73dce85c64f (Veera Sundaram Sankaran       2016-04-15 11:57:24 -0700 1238) 		mfd->split_mode = MDP_DUAL_LM_SINGLE_DISPLAY;
df73dce85c64f (Veera Sundaram Sankaran       2016-04-15 11:57:24 -0700 1239) 	} else {
df73dce85c64f (Veera Sundaram Sankaran       2016-04-15 11:57:24 -0700 1240) 		mfd->split_mode = MDP_SPLIT_MODE_NONE;
df73dce85c64f (Veera Sundaram Sankaran       2016-04-15 11:57:24 -0700 1241) 	}
df73dce85c64f (Veera Sundaram Sankaran       2016-04-15 11:57:24 -0700 1242) }
df73dce85c64f (Veera Sundaram Sankaran       2016-04-15 11:57:24 -0700 1243) 
649c91d1cd61d (Adrian Salido-Moreno          2015-04-23 18:33:56 -0700 1244) static int mdss_fb_init_panel_modes(struct msm_fb_data_type *mfd,
649c91d1cd61d (Adrian Salido-Moreno          2015-04-23 18:33:56 -0700 1245) 		struct mdss_panel_data *pdata)
649c91d1cd61d (Adrian Salido-Moreno          2015-04-23 18:33:56 -0700 1246) {
649c91d1cd61d (Adrian Salido-Moreno          2015-04-23 18:33:56 -0700 1247) 	struct fb_info *fbi = mfd->fbi;
649c91d1cd61d (Adrian Salido-Moreno          2015-04-23 18:33:56 -0700 1248) 	struct fb_videomode *modedb;
649c91d1cd61d (Adrian Salido-Moreno          2015-04-23 18:33:56 -0700 1249) 	struct mdss_panel_timing *pt;
649c91d1cd61d (Adrian Salido-Moreno          2015-04-23 18:33:56 -0700 1250) 	struct list_head *pos;
649c91d1cd61d (Adrian Salido-Moreno          2015-04-23 18:33:56 -0700 1251) 	int num_timings = 0;
649c91d1cd61d (Adrian Salido-Moreno          2015-04-23 18:33:56 -0700 1252) 	int i = 0;
649c91d1cd61d (Adrian Salido-Moreno          2015-04-23 18:33:56 -0700 1253) 
649c91d1cd61d (Adrian Salido-Moreno          2015-04-23 18:33:56 -0700 1254) 	/* check if multiple modes are supported */
232dc79d1f0fc (Adrian Salido-Moreno          2015-08-17 18:19:56 -0700 1255) 	if (!pdata->timings_list.prev || !pdata->timings_list.next)
232dc79d1f0fc (Adrian Salido-Moreno          2015-08-17 18:19:56 -0700 1256) 		INIT_LIST_HEAD(&pdata->timings_list);
232dc79d1f0fc (Adrian Salido-Moreno          2015-08-17 18:19:56 -0700 1257) 
232dc79d1f0fc (Adrian Salido-Moreno          2015-08-17 18:19:56 -0700 1258) 	if (!fbi || !pdata->current_timing || list_empty(&pdata->timings_list))
649c91d1cd61d (Adrian Salido-Moreno          2015-04-23 18:33:56 -0700 1259) 		return 0;
649c91d1cd61d (Adrian Salido-Moreno          2015-04-23 18:33:56 -0700 1260) 
649c91d1cd61d (Adrian Salido-Moreno          2015-04-23 18:33:56 -0700 1261) 	list_for_each(pos, &pdata->timings_list)
649c91d1cd61d (Adrian Salido-Moreno          2015-04-23 18:33:56 -0700 1262) 		num_timings++;
649c91d1cd61d (Adrian Salido-Moreno          2015-04-23 18:33:56 -0700 1263) 
649c91d1cd61d (Adrian Salido-Moreno          2015-04-23 18:33:56 -0700 1264) 	modedb = devm_kzalloc(fbi->dev, num_timings * sizeof(*modedb),
649c91d1cd61d (Adrian Salido-Moreno          2015-04-23 18:33:56 -0700 1265) 			GFP_KERNEL);
649c91d1cd61d (Adrian Salido-Moreno          2015-04-23 18:33:56 -0700 1266) 	if (!modedb)
649c91d1cd61d (Adrian Salido-Moreno          2015-04-23 18:33:56 -0700 1267) 		return -ENOMEM;
649c91d1cd61d (Adrian Salido-Moreno          2015-04-23 18:33:56 -0700 1268) 
649c91d1cd61d (Adrian Salido-Moreno          2015-04-23 18:33:56 -0700 1269) 	list_for_each_entry(pt, &pdata->timings_list, list) {
649c91d1cd61d (Adrian Salido-Moreno          2015-04-23 18:33:56 -0700 1270) 		struct mdss_panel_timing *spt = NULL;
649c91d1cd61d (Adrian Salido-Moreno          2015-04-23 18:33:56 -0700 1271) 
649c91d1cd61d (Adrian Salido-Moreno          2015-04-23 18:33:56 -0700 1272) 		mdss_fb_videomode_from_panel_timing(modedb + i, pt);
649c91d1cd61d (Adrian Salido-Moreno          2015-04-23 18:33:56 -0700 1273) 		if (pdata->next) {
649c91d1cd61d (Adrian Salido-Moreno          2015-04-23 18:33:56 -0700 1274) 			spt = mdss_panel_get_timing_by_name(pdata->next,
649c91d1cd61d (Adrian Salido-Moreno          2015-04-23 18:33:56 -0700 1275) 					modedb[i].name);
b3c7e19b7430a (Sandeep Panda                 2017-06-28 18:31:35 +0530 1276) 			/* for split config, recalculate xres and pixel clock */
b3c7e19b7430a (Sandeep Panda                 2017-06-28 18:31:35 +0530 1277) 			if (!IS_ERR_OR_NULL(spt)) {
b3c7e19b7430a (Sandeep Panda                 2017-06-28 18:31:35 +0530 1278) 				unsigned long pclk, h_total, v_total;
649c91d1cd61d (Adrian Salido-Moreno          2015-04-23 18:33:56 -0700 1279) 				modedb[i].xres += spt->xres;
b3c7e19b7430a (Sandeep Panda                 2017-06-28 18:31:35 +0530 1280) 				h_total = modedb[i].xres +
b3c7e19b7430a (Sandeep Panda                 2017-06-28 18:31:35 +0530 1281) 					modedb[i].left_margin +
b3c7e19b7430a (Sandeep Panda                 2017-06-28 18:31:35 +0530 1282) 					modedb[i].right_margin +
b3c7e19b7430a (Sandeep Panda                 2017-06-28 18:31:35 +0530 1283) 					modedb[i].hsync_len;
b3c7e19b7430a (Sandeep Panda                 2017-06-28 18:31:35 +0530 1284) 				v_total = modedb[i].yres +
b3c7e19b7430a (Sandeep Panda                 2017-06-28 18:31:35 +0530 1285) 					modedb[i].lower_margin +
b3c7e19b7430a (Sandeep Panda                 2017-06-28 18:31:35 +0530 1286) 					modedb[i].upper_margin +
b3c7e19b7430a (Sandeep Panda                 2017-06-28 18:31:35 +0530 1287) 					modedb[i].vsync_len;
b3c7e19b7430a (Sandeep Panda                 2017-06-28 18:31:35 +0530 1288) 				pclk = h_total * v_total * modedb[i].refresh;
b3c7e19b7430a (Sandeep Panda                 2017-06-28 18:31:35 +0530 1289) 				modedb[i].pixclock = KHZ2PICOS(pclk / 1000);
b3c7e19b7430a (Sandeep Panda                 2017-06-28 18:31:35 +0530 1290) 			} else {
649c91d1cd61d (Adrian Salido-Moreno          2015-04-23 18:33:56 -0700 1291) 				pr_debug("no matching split config for %s\n",
649c91d1cd61d (Adrian Salido-Moreno          2015-04-23 18:33:56 -0700 1292) 						modedb[i].name);
b3c7e19b7430a (Sandeep Panda                 2017-06-28 18:31:35 +0530 1293) 			}
649c91d1cd61d (Adrian Salido-Moreno          2015-04-23 18:33:56 -0700 1294) 
649c91d1cd61d (Adrian Salido-Moreno          2015-04-23 18:33:56 -0700 1295) 			/*
649c91d1cd61d (Adrian Salido-Moreno          2015-04-23 18:33:56 -0700 1296) 			 * if no panel timing found for current, need to
649c91d1cd61d (Adrian Salido-Moreno          2015-04-23 18:33:56 -0700 1297) 			 * disable it otherwise mark it as active
649c91d1cd61d (Adrian Salido-Moreno          2015-04-23 18:33:56 -0700 1298) 			 */
649c91d1cd61d (Adrian Salido-Moreno          2015-04-23 18:33:56 -0700 1299) 			if (pt == pdata->current_timing)
649c91d1cd61d (Adrian Salido-Moreno          2015-04-23 18:33:56 -0700 1300) 				pdata->next->active = !IS_ERR_OR_NULL(spt);
649c91d1cd61d (Adrian Salido-Moreno          2015-04-23 18:33:56 -0700 1301) 		}
649c91d1cd61d (Adrian Salido-Moreno          2015-04-23 18:33:56 -0700 1302) 
649c91d1cd61d (Adrian Salido-Moreno          2015-04-23 18:33:56 -0700 1303) 		if (pt == pdata->current_timing) {
649c91d1cd61d (Adrian Salido-Moreno          2015-04-23 18:33:56 -0700 1304) 			pr_debug("found current mode: %s\n", pt->name);
649c91d1cd61d (Adrian Salido-Moreno          2015-04-23 18:33:56 -0700 1305) 			fbi->mode = modedb + i;
649c91d1cd61d (Adrian Salido-Moreno          2015-04-23 18:33:56 -0700 1306) 		}
649c91d1cd61d (Adrian Salido-Moreno          2015-04-23 18:33:56 -0700 1307) 		i++;
649c91d1cd61d (Adrian Salido-Moreno          2015-04-23 18:33:56 -0700 1308) 	}
649c91d1cd61d (Adrian Salido-Moreno          2015-04-23 18:33:56 -0700 1309) 
649c91d1cd61d (Adrian Salido-Moreno          2015-04-23 18:33:56 -0700 1310) 	fbi->monspecs.modedb = modedb;
649c91d1cd61d (Adrian Salido-Moreno          2015-04-23 18:33:56 -0700 1311) 	fbi->monspecs.modedb_len = num_timings;
d9f95bd8d910d (Adrian Salido-Moreno          2015-08-21 15:42:52 -0700 1312) 
d9f95bd8d910d (Adrian Salido-Moreno          2015-08-21 15:42:52 -0700 1313) 	/* destroy and recreate modelist */
d9f95bd8d910d (Adrian Salido-Moreno          2015-08-21 15:42:52 -0700 1314) 	fb_destroy_modelist(&fbi->modelist);
d9f95bd8d910d (Adrian Salido-Moreno          2015-08-21 15:42:52 -0700 1315) 
d9f95bd8d910d (Adrian Salido-Moreno          2015-08-21 15:42:52 -0700 1316) 	if (fbi->mode)
d9f95bd8d910d (Adrian Salido-Moreno          2015-08-21 15:42:52 -0700 1317) 		fb_videomode_to_var(&fbi->var, fbi->mode);
649c91d1cd61d (Adrian Salido-Moreno          2015-04-23 18:33:56 -0700 1318) 	fb_videomode_to_modelist(modedb, num_timings, &fbi->modelist);
649c91d1cd61d (Adrian Salido-Moreno          2015-04-23 18:33:56 -0700 1319) 
649c91d1cd61d (Adrian Salido-Moreno          2015-04-23 18:33:56 -0700 1320) 	return 0;
649c91d1cd61d (Adrian Salido-Moreno          2015-04-23 18:33:56 -0700 1321) }
649c91d1cd61d (Adrian Salido-Moreno          2015-04-23 18:33:56 -0700 1322) 
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 1323) static int mdss_fb_probe(struct platform_device *pdev)
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 1324) {
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 1325) 	struct msm_fb_data_type *mfd = NULL;
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 1326) 	struct mdss_panel_data *pdata;
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 1327) 	struct fb_info *fbi;
b11b49207482a (Jeykumar Sankaran             2016-06-09 14:58:43 -0700 1328) 	struct mdss_overlay_private *mdp5_data = NULL;
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 1329) 	int rc;
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 1330) 
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 1331) 	if (fbi_list_index >= MAX_FBI_LIST)
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 1332) 		return -ENOMEM;
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 1333) 
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 1334) 	pdata = dev_get_platdata(&pdev->dev);
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 1335) 	if (!pdata)
031ad9d5f81ae (Adrian Salido-Moreno          2013-02-05 18:27:58 -0800 1336) 		return -EPROBE_DEFER;
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 1337) 
a9de5b071d548 (Naseer Ahmed                  2015-11-03 10:03:28 -0800 1338) 	if (!mdp_instance) {
a9de5b071d548 (Naseer Ahmed                  2015-11-03 10:03:28 -0800 1339) 		pr_err("mdss mdp resource not initialized yet\n");
a9de5b071d548 (Naseer Ahmed                  2015-11-03 10:03:28 -0800 1340) 		return -ENODEV;
a9de5b071d548 (Naseer Ahmed                  2015-11-03 10:03:28 -0800 1341) 	}
a9de5b071d548 (Naseer Ahmed                  2015-11-03 10:03:28 -0800 1342) 
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 1343) 	/*
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 1344) 	 * alloc framebuffer info + par data
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 1345) 	 */
00f85c063f4dc (Adrian Salido-Moreno          2012-08-22 19:34:43 -0700 1346) 	fbi = framebuffer_alloc(sizeof(struct msm_fb_data_type), NULL);
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 1347) 	if (fbi == NULL) {
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 1348) 		pr_err("can't allocate framebuffer info data!\n");
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 1349) 		return -ENOMEM;
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 1350) 	}
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 1351) 
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 1352) 	mfd = (struct msm_fb_data_type *)fbi->par;
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 1353) 	mfd->key = MFD_KEY;
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 1354) 	mfd->fbi = fbi;
059a1e16bbdac (Adrian Salido-Moreno          2012-11-14 17:16:03 -0800 1355) 	mfd->panel_info = &pdata->panel_info;
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 1356) 	mfd->panel.type = pdata->panel_info.type;
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 1357) 	mfd->panel.id = mfd->index;
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 1358) 	mfd->fb_page = MDSS_FB_NUM;
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 1359) 	mfd->index = fbi_list_index;
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 1360) 	mfd->mdp_fb_page_protection = MDP_FB_PAGE_PROTECTION_WRITECOMBINE;
059a1e16bbdac (Adrian Salido-Moreno          2012-11-14 17:16:03 -0800 1361) 
2ff017575c01b (Carl Vanderlip                2013-08-27 16:25:45 -0700 1362) 	mfd->ext_ad_ctrl = -1;
db74d3e4abfd7 (Shivaraj Shetty               2015-06-05 12:04:56 +0530 1363) 	if (mfd->panel_info && mfd->panel_info->brightness_max > 0)
db74d3e4abfd7 (Shivaraj Shetty               2015-06-05 12:04:56 +0530 1364) 		MDSS_BRIGHT_TO_BL(mfd->bl_level, backlight_led.brightness,
db74d3e4abfd7 (Shivaraj Shetty               2015-06-05 12:04:56 +0530 1365) 		mfd->panel_info->bl_max, mfd->panel_info->brightness_max);
db74d3e4abfd7 (Shivaraj Shetty               2015-06-05 12:04:56 +0530 1366) 	else
db74d3e4abfd7 (Shivaraj Shetty               2015-06-05 12:04:56 +0530 1367) 		mfd->bl_level = 0;
db74d3e4abfd7 (Shivaraj Shetty               2015-06-05 12:04:56 +0530 1368) 
728069952b10f (Carl Vanderlip                2012-08-27 14:52:39 -0700 1369) 	mfd->bl_scale = 1024;
0e2fd71526fbd (Ping Li                       2014-08-29 15:12:37 -0700 1370) 	mfd->ad_bl_level = 0;
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 1371) 	mfd->fb_imgType = MDP_RGBA_8888;
f954efe13095b (Krishna Chaitanya Parimi      2015-01-09 15:09:59 +0530 1372) 	mfd->calib_mode_bl = 0;
25a3708f14eb1 (Raviteja Tamatam              2016-05-25 15:48:54 +0530 1373) 	mfd->unset_bl_level = U32_MAX;
be48303843a06 (SGCMarkus                     2019-07-09 09:54:59 +0200 1374) #if defined(CONFIG_LGE_DISPLAY_AMBIENT_SUPPORTED)
be48303843a06 (SGCMarkus                     2019-07-09 09:54:59 +0200 1375) 	mfd->unset_bl_level_ex = U32_MAX;
be48303843a06 (SGCMarkus                     2019-07-09 09:54:59 +0200 1376) 	mfd->allow_bl_update_ex = false;
be48303843a06 (SGCMarkus                     2019-07-09 09:54:59 +0200 1377) #endif
bd26112bb1875 (Xu Yang                       2017-03-17 17:15:19 +0800 1378) 	mfd->bl_extn_level = -1;
91939509bccbc (Xu Yang                       2017-03-23 15:58:19 +0800 1379) 	mfd->bl_level_usr = backlight_led.brightness;
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 1380) 
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 1381) 	mfd->pdev = pdev;
ffaf975ec3ace (Ujwal Patel                   2014-11-14 15:02:31 -0800 1382) 
be48303843a06 (SGCMarkus                     2019-07-09 09:54:59 +0200 1383) #ifdef CONFIG_LGE_DISPLAY_COMMON
be48303843a06 (SGCMarkus                     2019-07-09 09:54:59 +0200 1384) 	lge_mdss_fb_init(mfd);
be48303843a06 (SGCMarkus                     2019-07-09 09:54:59 +0200 1385) 	if (mfd->index == 0)
be48303843a06 (SGCMarkus                     2019-07-09 09:54:59 +0200 1386) 		mfd->need_panel_reg_backup = true;
be48303843a06 (SGCMarkus                     2019-07-09 09:54:59 +0200 1387) #endif
be48303843a06 (SGCMarkus                     2019-07-09 09:54:59 +0200 1388) 
be23185307077 (Adrian Salido-Moreno          2016-04-06 09:29:37 -0700 1389) 	mfd->split_fb_left = mfd->split_fb_right = 0;
351537d51f5b8 (Ujwal Patel                   2015-06-03 11:20:44 -0700 1390) 
df73dce85c64f (Veera Sundaram Sankaran       2016-04-15 11:57:24 -0700 1391) 	mdss_fb_set_split_mode(mfd, pdata);
351537d51f5b8 (Ujwal Patel                   2015-06-03 11:20:44 -0700 1392) 	pr_info("fb%d: split_mode:%d left:%d right:%d\n", mfd->index,
351537d51f5b8 (Ujwal Patel                   2015-06-03 11:20:44 -0700 1393) 		mfd->split_mode, mfd->split_fb_left, mfd->split_fb_right);
ffaf975ec3ace (Ujwal Patel                   2014-11-14 15:02:31 -0800 1394) 
b192f3c2c194b (Xiaoming Zhou                 2012-12-21 21:23:15 -0500 1395) 	mfd->mdp = *mdp_instance;
a506802723703 (Shimrit Malichi               2015-01-12 10:37:10 +0200 1396) 
a506802723703 (Shimrit Malichi               2015-01-12 10:37:10 +0200 1397) 	rc = of_property_read_bool(pdev->dev.of_node,
a506802723703 (Shimrit Malichi               2015-01-12 10:37:10 +0200 1398) 		"qcom,boot-indication-enabled");
a506802723703 (Shimrit Malichi               2015-01-12 10:37:10 +0200 1399) 
a506802723703 (Shimrit Malichi               2015-01-12 10:37:10 +0200 1400) 	if (rc) {
a506802723703 (Shimrit Malichi               2015-01-12 10:37:10 +0200 1401) 		led_trigger_register_simple("boot-indication",
a506802723703 (Shimrit Malichi               2015-01-12 10:37:10 +0200 1402) 			&(mfd->boot_notification_led));
a506802723703 (Shimrit Malichi               2015-01-12 10:37:10 +0200 1403) 	}
a506802723703 (Shimrit Malichi               2015-01-12 10:37:10 +0200 1404) 
d6bf565bedd22 (Dhaval Patel                  2015-03-27 19:03:33 -0700 1405) 	INIT_LIST_HEAD(&mfd->file_list);
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 1406) 
c0cf914b69b88 (Carl Vanderlip                2013-04-04 20:57:17 -0700 1407) 	mutex_init(&mfd->bl_lock);
e6819350df123 (Yahui Wang                    2016-12-12 15:50:38 +0800 1408) 	mutex_init(&mfd->mdss_sysfs_lock);
07930a15004de (Terence Hampson               2015-01-21 13:36:24 -0500 1409) 	mutex_init(&mfd->switch_lock);
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 1410) 
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 1411) 	fbi_list[fbi_list_index++] = fbi;
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 1412) 
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 1413) 	platform_set_drvdata(pdev, mfd);
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 1414) 
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 1415) 	rc = mdss_fb_register(mfd);
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 1416) 	if (rc)
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 1417) 		return rc;
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 1418) 
af6fbb8c79378 (Tatenda Chipeperekwa          2016-03-30 11:09:19 -0700 1419) 	mdss_fb_create_sysfs(mfd);
be48303843a06 (SGCMarkus                     2019-07-09 09:54:59 +0200 1420) #ifdef CONFIG_LGE_DISPLAY_COMMON
be48303843a06 (SGCMarkus                     2019-07-09 09:54:59 +0200 1421) 	lge_mdss_fb_create_sysfs(mfd);
be48303843a06 (SGCMarkus                     2019-07-09 09:54:59 +0200 1422) #endif
af6fbb8c79378 (Tatenda Chipeperekwa          2016-03-30 11:09:19 -0700 1423) 	mdss_fb_send_panel_event(mfd, MDSS_EVENT_FB_REGISTERED, fbi);
af6fbb8c79378 (Tatenda Chipeperekwa          2016-03-30 11:09:19 -0700 1424) 
b192f3c2c194b (Xiaoming Zhou                 2012-12-21 21:23:15 -0500 1425) 	if (mfd->mdp.init_fnc) {
b192f3c2c194b (Xiaoming Zhou                 2012-12-21 21:23:15 -0500 1426) 		rc = mfd->mdp.init_fnc(mfd);
b192f3c2c194b (Xiaoming Zhou                 2012-12-21 21:23:15 -0500 1427) 		if (rc) {
b192f3c2c194b (Xiaoming Zhou                 2012-12-21 21:23:15 -0500 1428) 			pr_err("init_fnc failed\n");
b192f3c2c194b (Xiaoming Zhou                 2012-12-21 21:23:15 -0500 1429) 			return rc;
b192f3c2c194b (Xiaoming Zhou                 2012-12-21 21:23:15 -0500 1430) 		}
b192f3c2c194b (Xiaoming Zhou                 2012-12-21 21:23:15 -0500 1431) 	}
90fd65ba93d5c (Krishna Manikandan            2016-12-28 17:58:39 +0530 1432) 	mdss_fb_init_fps_info(mfd);
b192f3c2c194b (Xiaoming Zhou                 2012-12-21 21:23:15 -0500 1433) 
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 1434) 	rc = pm_runtime_set_active(mfd->fbi->dev);
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 1435) 	if (rc < 0)
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 1436) 		pr_err("pm_runtime: fail to set active.\n");
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 1437) 	pm_runtime_enable(mfd->fbi->dev);
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 1438) 
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 1439) 	/* android supports only one lcd-backlight/lcd for now */
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 1440) 	if (!lcd_backlight_registered) {
2d9ff87c8c075 (Ping Li                       2013-11-14 03:33:12 -0500 1441) 		backlight_led.brightness = mfd->panel_info->brightness_max;
2d9ff87c8c075 (Ping Li                       2013-11-14 03:33:12 -0500 1442) 		backlight_led.max_brightness = mfd->panel_info->brightness_max;
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 1443) 		if (led_classdev_register(&pdev->dev, &backlight_led))
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 1444) 			pr_err("led_classdev_register failed\n");
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 1445) 		else
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 1446) 			lcd_backlight_registered = 1;
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 1447) 	}
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 1448) 
be48303843a06 (SGCMarkus                     2019-07-09 09:54:59 +0200 1449) #ifdef CONFIG_LGE_DISPLAY_COMMON
be48303843a06 (SGCMarkus                     2019-07-09 09:54:59 +0200 1450) 	if (mfd->index == 0) {
be48303843a06 (SGCMarkus                     2019-07-09 09:54:59 +0200 1451) 		u32 tmp;
be48303843a06 (SGCMarkus                     2019-07-09 09:54:59 +0200 1452) 		int ret;
be48303843a06 (SGCMarkus                     2019-07-09 09:54:59 +0200 1453) 		ret = of_property_read_u32(pdev->dev.of_node,
be48303843a06 (SGCMarkus                     2019-07-09 09:54:59 +0200 1454) 					"qcom,default-brightness", &tmp);
be48303843a06 (SGCMarkus                     2019-07-09 09:54:59 +0200 1455) 		pr_debug("qcom,default-brightness read result = %d, value = %d\n", ret, tmp);
be48303843a06 (SGCMarkus                     2019-07-09 09:54:59 +0200 1456) 		mfd->panel_info->default_brightness = (ret == 0 && tmp != 0)?tmp:mfd->panel_info->brightness_max;
be48303843a06 (SGCMarkus                     2019-07-09 09:54:59 +0200 1457) 		pr_info("qcom,default-brightness = %d\n", mfd->panel_info->default_brightness);
be48303843a06 (SGCMarkus                     2019-07-09 09:54:59 +0200 1458) 
be48303843a06 (SGCMarkus                     2019-07-09 09:54:59 +0200 1459) 		backlight_led.brightness = mfd->panel_info->default_brightness;
be48303843a06 (SGCMarkus                     2019-07-09 09:54:59 +0200 1460) 		backlight_led.usr_brightness_req = mfd->panel_info->default_brightness;
be48303843a06 (SGCMarkus                     2019-07-09 09:54:59 +0200 1461) 	}
be48303843a06 (SGCMarkus                     2019-07-09 09:54:59 +0200 1462) #endif
be48303843a06 (SGCMarkus                     2019-07-09 09:54:59 +0200 1463) 
be48303843a06 (SGCMarkus                     2019-07-09 09:54:59 +0200 1464) #if defined(CONFIG_LGE_DISPLAY_AMBIENT_SUPPORTED)
be48303843a06 (SGCMarkus                     2019-07-09 09:54:59 +0200 1465) 	lge_ambient_brightness_register(mfd);
be48303843a06 (SGCMarkus                     2019-07-09 09:54:59 +0200 1466) #endif
be48303843a06 (SGCMarkus                     2019-07-09 09:54:59 +0200 1467) 
649c91d1cd61d (Adrian Salido-Moreno          2015-04-23 18:33:56 -0700 1468) 	mdss_fb_init_panel_modes(mfd, pdata);
649c91d1cd61d (Adrian Salido-Moreno          2015-04-23 18:33:56 -0700 1469) 
21a8ee10e53eb (Jayant Shekhar                2013-08-22 12:31:56 +0530 1470) 	mfd->mdp_sync_pt_data.fence_name = "mdp-fence";
21a8ee10e53eb (Jayant Shekhar                2013-08-22 12:31:56 +0530 1471) 	if (mfd->mdp_sync_pt_data.timeline == NULL) {
9bc30b3c612e8 (Ken Zhang                     2012-11-07 18:33:16 -0500 1472) 		char timeline_name[16];
9bc30b3c612e8 (Ken Zhang                     2012-11-07 18:33:16 -0500 1473) 		snprintf(timeline_name, sizeof(timeline_name),
9bc30b3c612e8 (Ken Zhang                     2012-11-07 18:33:16 -0500 1474) 			"mdss_fb_%d", mfd->index);
21a8ee10e53eb (Jayant Shekhar                2013-08-22 12:31:56 +0530 1475) 		 mfd->mdp_sync_pt_data.timeline =
21a8ee10e53eb (Jayant Shekhar                2013-08-22 12:31:56 +0530 1476) 				sw_sync_timeline_create(timeline_name);
21a8ee10e53eb (Jayant Shekhar                2013-08-22 12:31:56 +0530 1477) 		if (mfd->mdp_sync_pt_data.timeline == NULL) {
7593d245112a1 (Adrian Salido-Moreno          2014-01-10 15:39:49 -0800 1478) 			pr_err("cannot create release fence time line\n");
9bc30b3c612e8 (Ken Zhang                     2012-11-07 18:33:16 -0500 1479) 			return -ENOMEM;
9bc30b3c612e8 (Ken Zhang                     2012-11-07 18:33:16 -0500 1480) 		}
a964a547c7031 (Adrian Salido-Moreno          2013-09-19 19:52:09 -0700 1481) 		mfd->mdp_sync_pt_data.notifier.notifier_call =
a964a547c7031 (Adrian Salido-Moreno          2013-09-19 19:52:09 -0700 1482) 			__mdss_fb_sync_buf_done_callback;
b11b49207482a (Jeykumar Sankaran             2016-06-09 14:58:43 -0700 1483) 
b11b49207482a (Jeykumar Sankaran             2016-06-09 14:58:43 -0700 1484) 		/* Initialize CWB notifier callback */
b11b49207482a (Jeykumar Sankaran             2016-06-09 14:58:43 -0700 1485) 		mdp5_data = mfd_to_mdp5_data(mfd);
b11b49207482a (Jeykumar Sankaran             2016-06-09 14:58:43 -0700 1486) 		if (test_bit(MDSS_CAPS_CWB_SUPPORTED,
b11b49207482a (Jeykumar Sankaran             2016-06-09 14:58:43 -0700 1487) 					mdp5_data->mdata->mdss_caps_map))
b11b49207482a (Jeykumar Sankaran             2016-06-09 14:58:43 -0700 1488) 			mdp5_data->cwb.cwb_sync_pt_data.notifier.notifier_call =
b11b49207482a (Jeykumar Sankaran             2016-06-09 14:58:43 -0700 1489) 				__mdss_fb_sync_buf_done_callback;
9bc30b3c612e8 (Ken Zhang                     2012-11-07 18:33:16 -0500 1490) 	}
7593d245112a1 (Adrian Salido-Moreno          2014-01-10 15:39:49 -0800 1491) 
07930a15004de (Terence Hampson               2015-01-21 13:36:24 -0500 1492) 	mdss_fb_set_mdp_sync_pt_threshold(mfd, mfd->panel.type);
41211cdb1fff1 (Sandeep Panda                 2014-04-09 17:15:37 +0530 1493) 
41211cdb1fff1 (Sandeep Panda                 2014-04-09 17:15:37 +0530 1494) 	if (mfd->mdp.splash_init_fnc)
41211cdb1fff1 (Sandeep Panda                 2014-04-09 17:15:37 +0530 1495) 		mfd->mdp.splash_init_fnc(mfd);
41211cdb1fff1 (Sandeep Panda                 2014-04-09 17:15:37 +0530 1496) 
93aeac2ac1a89 (Vinu Deokaran                 2015-06-23 13:20:39 -0700 1497) 	/*
93aeac2ac1a89 (Vinu Deokaran                 2015-06-23 13:20:39 -0700 1498) 	 * Register with input driver for a callback for command mode panels.
93aeac2ac1a89 (Vinu Deokaran                 2015-06-23 13:20:39 -0700 1499) 	 * When there is an input event, mdp clocks will be turned on to reduce
93aeac2ac1a89 (Vinu Deokaran                 2015-06-23 13:20:39 -0700 1500) 	 * latency when a frame update happens.
20eafef76e5ba (Vinu Deokaran                 2015-07-16 16:14:30 -0700 1501) 	 * For video mode panels, idle timeout will be delayed so that userspace
20eafef76e5ba (Vinu Deokaran                 2015-07-16 16:14:30 -0700 1502) 	 * does not get an idle event while new frames are expected. In case of
20eafef76e5ba (Vinu Deokaran                 2015-07-16 16:14:30 -0700 1503) 	 * an idle event, user space tries to fall back to GPU composition which
20eafef76e5ba (Vinu Deokaran                 2015-07-16 16:14:30 -0700 1504) 	 * can lead to increased load when there are new frames.
93aeac2ac1a89 (Vinu Deokaran                 2015-06-23 13:20:39 -0700 1505) 	 */
20eafef76e5ba (Vinu Deokaran                 2015-07-16 16:14:30 -0700 1506) 	if ((mfd->panel_info->type == MIPI_CMD_PANEL) ||
20eafef76e5ba (Vinu Deokaran                 2015-07-16 16:14:30 -0700 1507) 	    (mfd->panel_info->type == MIPI_VIDEO_PANEL))
93aeac2ac1a89 (Vinu Deokaran                 2015-06-23 13:20:39 -0700 1508) 		if (mdss_fb_register_input_handler(mfd))
93aeac2ac1a89 (Vinu Deokaran                 2015-06-23 13:20:39 -0700 1509) 			pr_err("failed to register input handler\n");
93aeac2ac1a89 (Vinu Deokaran                 2015-06-23 13:20:39 -0700 1510) 
41211cdb1fff1 (Sandeep Panda                 2014-04-09 17:15:37 +0530 1511) 	INIT_DELAYED_WORK(&mfd->idle_notify_work, __mdss_fb_idle_notify_work);
41211cdb1fff1 (Sandeep Panda                 2014-04-09 17:15:37 +0530 1512) 
41211cdb1fff1 (Sandeep Panda                 2014-04-09 17:15:37 +0530 1513) 	return rc;
41211cdb1fff1 (Sandeep Panda                 2014-04-09 17:15:37 +0530 1514) }
41211cdb1fff1 (Sandeep Panda                 2014-04-09 17:15:37 +0530 1515) 
07930a15004de (Terence Hampson               2015-01-21 13:36:24 -0500 1516) static void mdss_fb_set_mdp_sync_pt_threshold(struct msm_fb_data_type *mfd,
07930a15004de (Terence Hampson               2015-01-21 13:36:24 -0500 1517) 		int type)
41211cdb1fff1 (Sandeep Panda                 2014-04-09 17:15:37 +0530 1518) {
41211cdb1fff1 (Sandeep Panda                 2014-04-09 17:15:37 +0530 1519) 	if (!mfd)
41211cdb1fff1 (Sandeep Panda                 2014-04-09 17:15:37 +0530 1520) 		return;
41211cdb1fff1 (Sandeep Panda                 2014-04-09 17:15:37 +0530 1521) 
07930a15004de (Terence Hampson               2015-01-21 13:36:24 -0500 1522) 	switch (type) {
7593d245112a1 (Adrian Salido-Moreno          2014-01-10 15:39:49 -0800 1523) 	case WRITEBACK_PANEL:
21a8ee10e53eb (Jayant Shekhar                2013-08-22 12:31:56 +0530 1524) 		mfd->mdp_sync_pt_data.threshold = 1;
7593d245112a1 (Adrian Salido-Moreno          2014-01-10 15:39:49 -0800 1525) 		mfd->mdp_sync_pt_data.retire_threshold = 0;
7593d245112a1 (Adrian Salido-Moreno          2014-01-10 15:39:49 -0800 1526) 		break;
7593d245112a1 (Adrian Salido-Moreno          2014-01-10 15:39:49 -0800 1527) 	case MIPI_CMD_PANEL:
7593d245112a1 (Adrian Salido-Moreno          2014-01-10 15:39:49 -0800 1528) 		mfd->mdp_sync_pt_data.threshold = 1;
7593d245112a1 (Adrian Salido-Moreno          2014-01-10 15:39:49 -0800 1529) 		mfd->mdp_sync_pt_data.retire_threshold = 1;
7593d245112a1 (Adrian Salido-Moreno          2014-01-10 15:39:49 -0800 1530) 		break;
7593d245112a1 (Adrian Salido-Moreno          2014-01-10 15:39:49 -0800 1531) 	default:
21a8ee10e53eb (Jayant Shekhar                2013-08-22 12:31:56 +0530 1532) 		mfd->mdp_sync_pt_data.threshold = 2;
7593d245112a1 (Adrian Salido-Moreno          2014-01-10 15:39:49 -0800 1533) 		mfd->mdp_sync_pt_data.retire_threshold = 0;
7593d245112a1 (Adrian Salido-Moreno          2014-01-10 15:39:49 -0800 1534) 		break;
7593d245112a1 (Adrian Salido-Moreno          2014-01-10 15:39:49 -0800 1535) 	}
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 1536) }
07930a15004de (Terence Hampson               2015-01-21 13:36:24 -0500 1537) 
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 1538) static int mdss_fb_remove(struct platform_device *pdev)
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 1539) {
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 1540) 	struct msm_fb_data_type *mfd;
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 1541) 
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 1542) 	mfd = (struct msm_fb_data_type *)platform_get_drvdata(pdev);
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 1543) 
2c45a80a5fd6e (Mathew Karimpanal             2013-11-14 20:19:37 -0800 1544) 	if (!mfd)
2c45a80a5fd6e (Mathew Karimpanal             2013-11-14 20:19:37 -0800 1545) 		return -ENODEV;
2c45a80a5fd6e (Mathew Karimpanal             2013-11-14 20:19:37 -0800 1546) 
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 1547) 	mdss_fb_remove_sysfs(mfd);
be48303843a06 (SGCMarkus                     2019-07-09 09:54:59 +0200 1548) #ifdef CONFIG_LGE_DISPLAY_COMMON
be48303843a06 (SGCMarkus                     2019-07-09 09:54:59 +0200 1549) 	lge_mdss_fb_remove_sysfs(mfd);
be48303843a06 (SGCMarkus                     2019-07-09 09:54:59 +0200 1550) #endif
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 1551) 
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 1552) 	pm_runtime_disable(mfd->fbi->dev);
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 1553) 
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 1554) 	if (mfd->key != MFD_KEY)
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 1555) 		return -EINVAL;
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 1556) 
93aeac2ac1a89 (Vinu Deokaran                 2015-06-23 13:20:39 -0700 1557) 	mdss_fb_unregister_input_handler(mfd);
5074b7148629a (Krishna Srinivas              2016-09-22 17:32:44 -0700 1558) 	mdss_panel_debugfs_cleanup(mfd->panel_info);
93aeac2ac1a89 (Vinu Deokaran                 2015-06-23 13:20:39 -0700 1559) 
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 1560) 	if (mdss_fb_suspend_sub(mfd))
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 1561) 		pr_err("msm_fb_remove: can't stop the device %d\n",
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 1562) 			    mfd->index);
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 1563) 
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 1564) 	/* remove /dev/fb* */
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 1565) 	unregister_framebuffer(mfd->fbi);
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 1566) 
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 1567) 	if (lcd_backlight_registered) {
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 1568) 		lcd_backlight_registered = 0;
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 1569) 		led_classdev_unregister(&backlight_led);
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 1570) 	}
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 1571) 
be48303843a06 (SGCMarkus                     2019-07-09 09:54:59 +0200 1572) #if defined(CONFIG_LGE_DISPLAY_AMBIENT_SUPPORTED)
be48303843a06 (SGCMarkus                     2019-07-09 09:54:59 +0200 1573) 	lge_ambient_brightness_unregister();
be48303843a06 (SGCMarkus                     2019-07-09 09:54:59 +0200 1574) #endif
be48303843a06 (SGCMarkus                     2019-07-09 09:54:59 +0200 1575) 
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 1576) 	return 0;
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 1577) }
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 1578) 
5f270e6406a9a (Adrian Salido-Moreno          2012-12-14 20:18:10 -0800 1579) static int mdss_fb_send_panel_event(struct msm_fb_data_type *mfd,
5f270e6406a9a (Adrian Salido-Moreno          2012-12-14 20:18:10 -0800 1580) 					int event, void *arg)
a31f977a0c692 (Adrian Salido-Moreno          2012-11-05 16:51:27 -0800 1581) {
94c0a0e5ca180 (Veera Sundaram Sankaran       2015-08-06 11:57:37 -0700 1582) 	int ret = 0;
a31f977a0c692 (Adrian Salido-Moreno          2012-11-05 16:51:27 -0800 1583) 	struct mdss_panel_data *pdata;
a31f977a0c692 (Adrian Salido-Moreno          2012-11-05 16:51:27 -0800 1584) 
a31f977a0c692 (Adrian Salido-Moreno          2012-11-05 16:51:27 -0800 1585) 	pdata = dev_get_platdata(&mfd->pdev->dev);
a31f977a0c692 (Adrian Salido-Moreno          2012-11-05 16:51:27 -0800 1586) 	if (!pdata) {
a31f977a0c692 (Adrian Salido-Moreno          2012-11-05 16:51:27 -0800 1587) 		pr_err("no panel connected\n");
a31f977a0c692 (Adrian Salido-Moreno          2012-11-05 16:51:27 -0800 1588) 		return -ENODEV;
a31f977a0c692 (Adrian Salido-Moreno          2012-11-05 16:51:27 -0800 1589) 	}
a31f977a0c692 (Adrian Salido-Moreno          2012-11-05 16:51:27 -0800 1590) 
5f270e6406a9a (Adrian Salido-Moreno          2012-12-14 20:18:10 -0800 1591) 	pr_debug("sending event=%d for fb%d\n", event, mfd->index);
a31f977a0c692 (Adrian Salido-Moreno          2012-11-05 16:51:27 -0800 1592) 
94c0a0e5ca180 (Veera Sundaram Sankaran       2015-08-06 11:57:37 -0700 1593) 	do {
94c0a0e5ca180 (Veera Sundaram Sankaran       2015-08-06 11:57:37 -0700 1594) 		if (pdata->event_handler)
94c0a0e5ca180 (Veera Sundaram Sankaran       2015-08-06 11:57:37 -0700 1595) 			ret = pdata->event_handler(pdata, event, arg);
a31f977a0c692 (Adrian Salido-Moreno          2012-11-05 16:51:27 -0800 1596) 
94c0a0e5ca180 (Veera Sundaram Sankaran       2015-08-06 11:57:37 -0700 1597) 		pdata = pdata->next;
94c0a0e5ca180 (Veera Sundaram Sankaran       2015-08-06 11:57:37 -0700 1598) 	} while (!ret && pdata);
94c0a0e5ca180 (Veera Sundaram Sankaran       2015-08-06 11:57:37 -0700 1599) 
94c0a0e5ca180 (Veera Sundaram Sankaran       2015-08-06 11:57:37 -0700 1600) 	return ret;
a31f977a0c692 (Adrian Salido-Moreno          2012-11-05 16:51:27 -0800 1601) }
a31f977a0c692 (Adrian Salido-Moreno          2012-11-05 16:51:27 -0800 1602) 
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 1603) static int mdss_fb_suspend_sub(struct msm_fb_data_type *mfd)
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 1604) {
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 1605) 	int ret = 0;
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 1606) 
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 1607) 	if ((!mfd) || (mfd->key != MFD_KEY))
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 1608) 		return 0;
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 1609) 
39e7f3e661e54 (Adrian Salido-Moreno          2012-08-06 11:22:46 -0700 1610) 	pr_debug("mdss_fb suspend index=%d\n", mfd->index);
39e7f3e661e54 (Adrian Salido-Moreno          2012-08-06 11:22:46 -0700 1611) 
26bebe99120eb (Ujwal Patel                   2015-04-22 14:51:12 -0700 1612) 	ret = mdss_fb_pan_idle(mfd);
26bebe99120eb (Ujwal Patel                   2015-04-22 14:51:12 -0700 1613) 	if (ret) {
26bebe99120eb (Ujwal Patel                   2015-04-22 14:51:12 -0700 1614) 		pr_warn("mdss_fb_pan_idle for fb%d failed. ret=%d\n",
26bebe99120eb (Ujwal Patel                   2015-04-22 14:51:12 -0700 1615) 			mfd->index, ret);
26bebe99120eb (Ujwal Patel                   2015-04-22 14:51:12 -0700 1616) 		goto exit;
26bebe99120eb (Ujwal Patel                   2015-04-22 14:51:12 -0700 1617) 	}
26bebe99120eb (Ujwal Patel                   2015-04-22 14:51:12 -0700 1618) 
38bc092bedf35 (Adrian Salido-Moreno          2012-11-28 18:41:33 -0800 1619) 	ret = mdss_fb_send_panel_event(mfd, MDSS_EVENT_SUSPEND, NULL);
a31f977a0c692 (Adrian Salido-Moreno          2012-11-05 16:51:27 -0800 1620) 	if (ret) {
a31f977a0c692 (Adrian Salido-Moreno          2012-11-05 16:51:27 -0800 1621) 		pr_warn("unable to suspend fb%d (%d)\n", mfd->index, ret);
26bebe99120eb (Ujwal Patel                   2015-04-22 14:51:12 -0700 1622) 		goto exit;
a31f977a0c692 (Adrian Salido-Moreno          2012-11-05 16:51:27 -0800 1623) 	}
a31f977a0c692 (Adrian Salido-Moreno          2012-11-05 16:51:27 -0800 1624) 
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 1625) 	mfd->suspend.op_enable = mfd->op_enable;
b9095befda98a (Aravind Venkateswaran         2014-07-28 23:24:46 -0700 1626) 	mfd->suspend.panel_power_state = mfd->panel_power_state;
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 1627) 
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 1628) 	if (mfd->op_enable) {
789b61dcb3605 (Aravind Venkateswaran         2014-07-29 00:11:45 -0700 1629) 		/*
0c111eb0ac585 (Aravind Venkateswaran         2014-10-23 17:23:50 -0700 1630) 		 * Ideally, display should have either been blanked by now, or
0c111eb0ac585 (Aravind Venkateswaran         2014-10-23 17:23:50 -0700 1631) 		 * should have transitioned to a low power state. If not, then
fbcc005c2b893 (Aravind Venkateswaran         2014-10-30 15:03:45 -0700 1632) 		 * as a fall back option, enter ulp state to leave the display
fbcc005c2b893 (Aravind Venkateswaran         2014-10-30 15:03:45 -0700 1633) 		 * on, but turn off all interface clocks.
789b61dcb3605 (Aravind Venkateswaran         2014-07-29 00:11:45 -0700 1634) 		 */
fbcc005c2b893 (Aravind Venkateswaran         2014-10-30 15:03:45 -0700 1635) 		if (mdss_fb_is_power_on(mfd)) {
fbcc005c2b893 (Aravind Venkateswaran         2014-10-30 15:03:45 -0700 1636) 			ret = mdss_fb_blank_sub(BLANK_FLAG_ULP, mfd->fbi,
0c111eb0ac585 (Aravind Venkateswaran         2014-10-23 17:23:50 -0700 1637) 					mfd->suspend.op_enable);
0c111eb0ac585 (Aravind Venkateswaran         2014-10-23 17:23:50 -0700 1638) 			if (ret) {
0c111eb0ac585 (Aravind Venkateswaran         2014-10-23 17:23:50 -0700 1639) 				pr_err("can't turn off display!\n");
26bebe99120eb (Ujwal Patel                   2015-04-22 14:51:12 -0700 1640) 				goto exit;
0c111eb0ac585 (Aravind Venkateswaran         2014-10-23 17:23:50 -0700 1641) 			}
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 1642) 		}
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 1643) 		mfd->op_enable = false;
de6b1b3c15535 (Adrian Salido-Moreno          2013-02-27 21:51:50 -0800 1644) 		fb_set_suspend(mfd->fbi, FBINFO_STATE_SUSPENDED);
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 1645) 	}
26bebe99120eb (Ujwal Patel                   2015-04-22 14:51:12 -0700 1646) exit:
26bebe99120eb (Ujwal Patel                   2015-04-22 14:51:12 -0700 1647) 	return ret;
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 1648) }
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 1649) 
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 1650) static int mdss_fb_resume_sub(struct msm_fb_data_type *mfd)
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 1651) {
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 1652) 	int ret = 0;
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 1653) 
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 1654) 	if ((!mfd) || (mfd->key != MFD_KEY))
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 1655) 		return 0;
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 1656) 
309facd77e16d (Terence Hampson               2014-08-28 15:18:03 -0400 1657) 	reinit_completion(&mfd->power_set_comp);
2747a8445ca2d (Ken Zhang                     2012-12-21 23:12:05 -0500 1658) 	mfd->is_power_setting = true;
39e7f3e661e54 (Adrian Salido-Moreno          2012-08-06 11:22:46 -0700 1659) 	pr_debug("mdss_fb resume index=%d\n", mfd->index);
39e7f3e661e54 (Adrian Salido-Moreno          2012-08-06 11:22:46 -0700 1660) 
26bebe99120eb (Ujwal Patel                   2015-04-22 14:51:12 -0700 1661) 	ret = mdss_fb_pan_idle(mfd);
26bebe99120eb (Ujwal Patel                   2015-04-22 14:51:12 -0700 1662) 	if (ret) {
26bebe99120eb (Ujwal Patel                   2015-04-22 14:51:12 -0700 1663) 		pr_warn("mdss_fb_pan_idle for fb%d failed. ret=%d\n",
26bebe99120eb (Ujwal Patel                   2015-04-22 14:51:12 -0700 1664) 			mfd->index, ret);
26bebe99120eb (Ujwal Patel                   2015-04-22 14:51:12 -0700 1665) 		return ret;
26bebe99120eb (Ujwal Patel                   2015-04-22 14:51:12 -0700 1666) 	}
26bebe99120eb (Ujwal Patel                   2015-04-22 14:51:12 -0700 1667) 
38bc092bedf35 (Adrian Salido-Moreno          2012-11-28 18:41:33 -0800 1668) 	ret = mdss_fb_send_panel_event(mfd, MDSS_EVENT_RESUME, NULL);
a31f977a0c692 (Adrian Salido-Moreno          2012-11-05 16:51:27 -0800 1669) 	if (ret) {
a31f977a0c692 (Adrian Salido-Moreno          2012-11-05 16:51:27 -0800 1670) 		pr_warn("unable to resume fb%d (%d)\n", mfd->index, ret);
a31f977a0c692 (Adrian Salido-Moreno          2012-11-05 16:51:27 -0800 1671) 		return ret;
a31f977a0c692 (Adrian Salido-Moreno          2012-11-05 16:51:27 -0800 1672) 	}
a31f977a0c692 (Adrian Salido-Moreno          2012-11-05 16:51:27 -0800 1673) 
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 1674) 	/* resume state var recover */
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 1675) 	mfd->op_enable = mfd->suspend.op_enable;
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 1676) 
0c111eb0ac585 (Aravind Venkateswaran         2014-10-23 17:23:50 -0700 1677) 	/*
fbcc005c2b893 (Aravind Venkateswaran         2014-10-30 15:03:45 -0700 1678) 	 * If the fb was explicitly blanked or transitioned to ulp during
fbcc005c2b893 (Aravind Venkateswaran         2014-10-30 15:03:45 -0700 1679) 	 * suspend, then undo it during resume with the appropriate unblank
fbcc005c2b893 (Aravind Venkateswaran         2014-10-30 15:03:45 -0700 1680) 	 * flag. If fb was in ulp state when entering suspend, then nothing
fbcc005c2b893 (Aravind Venkateswaran         2014-10-30 15:03:45 -0700 1681) 	 * needs to be done.
0c111eb0ac585 (Aravind Venkateswaran         2014-10-23 17:23:50 -0700 1682) 	 */
fbcc005c2b893 (Aravind Venkateswaran         2014-10-30 15:03:45 -0700 1683) 	if (mdss_panel_is_power_on(mfd->suspend.panel_power_state) &&
fbcc005c2b893 (Aravind Venkateswaran         2014-10-30 15:03:45 -0700 1684) 		!mdss_panel_is_power_on_ulp(mfd->suspend.panel_power_state)) {
0c111eb0ac585 (Aravind Venkateswaran         2014-10-23 17:23:50 -0700 1685) 		int unblank_flag = mdss_panel_is_power_on_interactive(
0c111eb0ac585 (Aravind Venkateswaran         2014-10-23 17:23:50 -0700 1686) 			mfd->suspend.panel_power_state) ? FB_BLANK_UNBLANK :
fbcc005c2b893 (Aravind Venkateswaran         2014-10-30 15:03:45 -0700 1687) 			BLANK_FLAG_LP;
0c111eb0ac585 (Aravind Venkateswaran         2014-10-23 17:23:50 -0700 1688) 
0c111eb0ac585 (Aravind Venkateswaran         2014-10-23 17:23:50 -0700 1689) 		ret = mdss_fb_blank_sub(unblank_flag, mfd->fbi, mfd->op_enable);
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 1690) 		if (ret)
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 1691) 			pr_warn("can't turn on display!\n");
de6b1b3c15535 (Adrian Salido-Moreno          2013-02-27 21:51:50 -0800 1692) 		else
de6b1b3c15535 (Adrian Salido-Moreno          2013-02-27 21:51:50 -0800 1693) 			fb_set_suspend(mfd->fbi, FBINFO_STATE_RUNNING);
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 1694) 	}
2747a8445ca2d (Ken Zhang                     2012-12-21 23:12:05 -0500 1695) 	mfd->is_power_setting = false;
2747a8445ca2d (Ken Zhang                     2012-12-21 23:12:05 -0500 1696) 	complete_all(&mfd->power_set_comp);
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 1697) 
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 1698) 	return ret;
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 1699) }
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 1700) 
de6b1b3c15535 (Adrian Salido-Moreno          2013-02-27 21:51:50 -0800 1701) #if defined(CONFIG_PM) && !defined(CONFIG_PM_SLEEP)
de6b1b3c15535 (Adrian Salido-Moreno          2013-02-27 21:51:50 -0800 1702) static int mdss_fb_suspend(struct platform_device *pdev, pm_message_t state)
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 1703) {
de6b1b3c15535 (Adrian Salido-Moreno          2013-02-27 21:51:50 -0800 1704) 	struct msm_fb_data_type *mfd = platform_get_drvdata(pdev);
de6b1b3c15535 (Adrian Salido-Moreno          2013-02-27 21:51:50 -0800 1705) 	if (!mfd)
de6b1b3c15535 (Adrian Salido-Moreno          2013-02-27 21:51:50 -0800 1706) 		return -ENODEV;
de6b1b3c15535 (Adrian Salido-Moreno          2013-02-27 21:51:50 -0800 1707) 
de6b1b3c15535 (Adrian Salido-Moreno          2013-02-27 21:51:50 -0800 1708) 	dev_dbg(&pdev->dev, "display suspend\n");
de6b1b3c15535 (Adrian Salido-Moreno          2013-02-27 21:51:50 -0800 1709) 
de6b1b3c15535 (Adrian Salido-Moreno          2013-02-27 21:51:50 -0800 1710) 	return mdss_fb_suspend_sub(mfd);
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 1711) }
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 1712) 
de6b1b3c15535 (Adrian Salido-Moreno          2013-02-27 21:51:50 -0800 1713) static int mdss_fb_resume(struct platform_device *pdev)
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 1714) {
de6b1b3c15535 (Adrian Salido-Moreno          2013-02-27 21:51:50 -0800 1715) 	struct msm_fb_data_type *mfd = platform_get_drvdata(pdev);
de6b1b3c15535 (Adrian Salido-Moreno          2013-02-27 21:51:50 -0800 1716) 	if (!mfd)
de6b1b3c15535 (Adrian Salido-Moreno          2013-02-27 21:51:50 -0800 1717) 		return -ENODEV;
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 1718) 
de6b1b3c15535 (Adrian Salido-Moreno          2013-02-27 21:51:50 -0800 1719) 	dev_dbg(&pdev->dev, "display resume\n");
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 1720) 
de6b1b3c15535 (Adrian Salido-Moreno          2013-02-27 21:51:50 -0800 1721) 	return mdss_fb_resume_sub(mfd);
de6b1b3c15535 (Adrian Salido-Moreno          2013-02-27 21:51:50 -0800 1722) }
de6b1b3c15535 (Adrian Salido-Moreno          2013-02-27 21:51:50 -0800 1723) #else
de6b1b3c15535 (Adrian Salido-Moreno          2013-02-27 21:51:50 -0800 1724) #define mdss_fb_suspend NULL
de6b1b3c15535 (Adrian Salido-Moreno          2013-02-27 21:51:50 -0800 1725) #define mdss_fb_resume NULL
de6b1b3c15535 (Adrian Salido-Moreno          2013-02-27 21:51:50 -0800 1726) #endif
de6b1b3c15535 (Adrian Salido-Moreno          2013-02-27 21:51:50 -0800 1727) 
de6b1b3c15535 (Adrian Salido-Moreno          2013-02-27 21:51:50 -0800 1728) #ifdef CONFIG_PM_SLEEP
de6b1b3c15535 (Adrian Salido-Moreno          2013-02-27 21:51:50 -0800 1729) static int mdss_fb_pm_suspend(struct device *dev)
de6b1b3c15535 (Adrian Salido-Moreno          2013-02-27 21:51:50 -0800 1730) {
de6b1b3c15535 (Adrian Salido-Moreno          2013-02-27 21:51:50 -0800 1731) 	struct msm_fb_data_type *mfd = dev_get_drvdata(dev);
47756a03edaeb (Jayant Shekhar                2017-04-13 15:14:40 +0530 1732) 	int rc = 0;
de6b1b3c15535 (Adrian Salido-Moreno          2013-02-27 21:51:50 -0800 1733) 
de6b1b3c15535 (Adrian Salido-Moreno          2013-02-27 21:51:50 -0800 1734) 	if (!mfd)
de6b1b3c15535 (Adrian Salido-Moreno          2013-02-27 21:51:50 -0800 1735) 		return -ENODEV;
de6b1b3c15535 (Adrian Salido-Moreno          2013-02-27 21:51:50 -0800 1736) 
de6b1b3c15535 (Adrian Salido-Moreno          2013-02-27 21:51:50 -0800 1737) 	dev_dbg(dev, "display pm suspend\n");
de6b1b3c15535 (Adrian Salido-Moreno          2013-02-27 21:51:50 -0800 1738) 
47756a03edaeb (Jayant Shekhar                2017-04-13 15:14:40 +0530 1739) 	rc = mdss_fb_suspend_sub(mfd);
47756a03edaeb (Jayant Shekhar                2017-04-13 15:14:40 +0530 1740) 
47756a03edaeb (Jayant Shekhar                2017-04-13 15:14:40 +0530 1741) 	/*
47756a03edaeb (Jayant Shekhar                2017-04-13 15:14:40 +0530 1742) 	 * Call MDSS footswitch control to ensure GDSC is
47756a03edaeb (Jayant Shekhar                2017-04-13 15:14:40 +0530 1743) 	 * off after pm suspend call. There are cases when
47756a03edaeb (Jayant Shekhar                2017-04-13 15:14:40 +0530 1744) 	 * mdss runtime call doesn't trigger even when clock
47756a03edaeb (Jayant Shekhar                2017-04-13 15:14:40 +0530 1745) 	 * ref count is zero after fb pm suspend.
47756a03edaeb (Jayant Shekhar                2017-04-13 15:14:40 +0530 1746) 	 */
47756a03edaeb (Jayant Shekhar                2017-04-13 15:14:40 +0530 1747) 	if (!rc) {
47756a03edaeb (Jayant Shekhar                2017-04-13 15:14:40 +0530 1748) 		if (mfd->mdp.footswitch_ctrl)
47756a03edaeb (Jayant Shekhar                2017-04-13 15:14:40 +0530 1749) 			mfd->mdp.footswitch_ctrl(false);
47756a03edaeb (Jayant Shekhar                2017-04-13 15:14:40 +0530 1750) 	} else {
47756a03edaeb (Jayant Shekhar                2017-04-13 15:14:40 +0530 1751) 		pr_err("fb pm suspend failed, rc: %d\n", rc);
47756a03edaeb (Jayant Shekhar                2017-04-13 15:14:40 +0530 1752) 	}
47756a03edaeb (Jayant Shekhar                2017-04-13 15:14:40 +0530 1753) 
47756a03edaeb (Jayant Shekhar                2017-04-13 15:14:40 +0530 1754) 	return rc;
47756a03edaeb (Jayant Shekhar                2017-04-13 15:14:40 +0530 1755) 
de6b1b3c15535 (Adrian Salido-Moreno          2013-02-27 21:51:50 -0800 1756) }
de6b1b3c15535 (Adrian Salido-Moreno          2013-02-27 21:51:50 -0800 1757) 
de6b1b3c15535 (Adrian Salido-Moreno          2013-02-27 21:51:50 -0800 1758) static int mdss_fb_pm_resume(struct device *dev)
de6b1b3c15535 (Adrian Salido-Moreno          2013-02-27 21:51:50 -0800 1759) {
de6b1b3c15535 (Adrian Salido-Moreno          2013-02-27 21:51:50 -0800 1760) 	struct msm_fb_data_type *mfd = dev_get_drvdata(dev);
de6b1b3c15535 (Adrian Salido-Moreno          2013-02-27 21:51:50 -0800 1761) 	if (!mfd)
de6b1b3c15535 (Adrian Salido-Moreno          2013-02-27 21:51:50 -0800 1762) 		return -ENODEV;
de6b1b3c15535 (Adrian Salido-Moreno          2013-02-27 21:51:50 -0800 1763) 
de6b1b3c15535 (Adrian Salido-Moreno          2013-02-27 21:51:50 -0800 1764) 	dev_dbg(dev, "display pm resume\n");
de6b1b3c15535 (Adrian Salido-Moreno          2013-02-27 21:51:50 -0800 1765) 
9efc565f9fe13 (Aravind Venkateswaran         2014-05-25 22:09:40 -0700 1766) 	/*
9efc565f9fe13 (Aravind Venkateswaran         2014-05-25 22:09:40 -0700 1767) 	 * It is possible that the runtime status of the fb device may
9efc565f9fe13 (Aravind Venkateswaran         2014-05-25 22:09:40 -0700 1768) 	 * have been active when the system was suspended. Reset the runtime
9efc565f9fe13 (Aravind Venkateswaran         2014-05-25 22:09:40 -0700 1769) 	 * status to suspended state after a complete system resume.
9efc565f9fe13 (Aravind Venkateswaran         2014-05-25 22:09:40 -0700 1770) 	 */
9efc565f9fe13 (Aravind Venkateswaran         2014-05-25 22:09:40 -0700 1771) 	pm_runtime_disable(dev);
9efc565f9fe13 (Aravind Venkateswaran         2014-05-25 22:09:40 -0700 1772) 	pm_runtime_set_suspended(dev);
9efc565f9fe13 (Aravind Venkateswaran         2014-05-25 22:09:40 -0700 1773) 	pm_runtime_enable(dev);
9efc565f9fe13 (Aravind Venkateswaran         2014-05-25 22:09:40 -0700 1774) 
47756a03edaeb (Jayant Shekhar                2017-04-13 15:14:40 +0530 1775) 	if (mfd->mdp.footswitch_ctrl)
47756a03edaeb (Jayant Shekhar                2017-04-13 15:14:40 +0530 1776) 		mfd->mdp.footswitch_ctrl(true);
47756a03edaeb (Jayant Shekhar                2017-04-13 15:14:40 +0530 1777) 
de6b1b3c15535 (Adrian Salido-Moreno          2013-02-27 21:51:50 -0800 1778) 	return mdss_fb_resume_sub(mfd);
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 1779) }
de6b1b3c15535 (Adrian Salido-Moreno          2013-02-27 21:51:50 -0800 1780) #endif
de6b1b3c15535 (Adrian Salido-Moreno          2013-02-27 21:51:50 -0800 1781) 
de6b1b3c15535 (Adrian Salido-Moreno          2013-02-27 21:51:50 -0800 1782) static const struct dev_pm_ops mdss_fb_pm_ops = {
de6b1b3c15535 (Adrian Salido-Moreno          2013-02-27 21:51:50 -0800 1783) 	SET_SYSTEM_SLEEP_PM_OPS(mdss_fb_pm_suspend, mdss_fb_pm_resume)
de6b1b3c15535 (Adrian Salido-Moreno          2013-02-27 21:51:50 -0800 1784) };
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 1785) 
2b0b211563d29 (Adrian Salido-Moreno          2012-12-04 21:05:03 -0800 1786) static const struct of_device_id mdss_fb_dt_match[] = {
2b0b211563d29 (Adrian Salido-Moreno          2012-12-04 21:05:03 -0800 1787) 	{ .compatible = "qcom,mdss-fb",},
2b0b211563d29 (Adrian Salido-Moreno          2012-12-04 21:05:03 -0800 1788) 	{}
2b0b211563d29 (Adrian Salido-Moreno          2012-12-04 21:05:03 -0800 1789) };
2b0b211563d29 (Adrian Salido-Moreno          2012-12-04 21:05:03 -0800 1790) EXPORT_COMPAT("qcom,mdss-fb");
2b0b211563d29 (Adrian Salido-Moreno          2012-12-04 21:05:03 -0800 1791) 
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 1792) static struct platform_driver mdss_fb_driver = {
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 1793) 	.probe = mdss_fb_probe,
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 1794) 	.remove = mdss_fb_remove,
de6b1b3c15535 (Adrian Salido-Moreno          2013-02-27 21:51:50 -0800 1795) 	.suspend = mdss_fb_suspend,
de6b1b3c15535 (Adrian Salido-Moreno          2013-02-27 21:51:50 -0800 1796) 	.resume = mdss_fb_resume,
5c1f7cd906b20 (Ujwal Patel                   2013-07-25 10:09:02 -0700 1797) 	.shutdown = mdss_fb_shutdown,
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 1798) 	.driver = {
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 1799) 		.name = "mdss_fb",
2b0b211563d29 (Adrian Salido-Moreno          2012-12-04 21:05:03 -0800 1800) 		.of_match_table = mdss_fb_dt_match,
de6b1b3c15535 (Adrian Salido-Moreno          2013-02-27 21:51:50 -0800 1801) 		.pm = &mdss_fb_pm_ops,
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 1802) 	},
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 1803) };
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 1804) 
728069952b10f (Carl Vanderlip                2012-08-27 14:52:39 -0700 1805) static void mdss_fb_scale_bl(struct msm_fb_data_type *mfd, u32 *bl_lvl)
728069952b10f (Carl Vanderlip                2012-08-27 14:52:39 -0700 1806) {
728069952b10f (Carl Vanderlip                2012-08-27 14:52:39 -0700 1807) 	u32 temp = *bl_lvl;
66e2cc009aee7 (Manoj Rao                     2013-07-26 22:45:25 -0700 1808) 
5f1c60463e9eb (Dhaval Patel                  2014-07-11 15:09:12 -0700 1809) 	pr_debug("input = %d, scale = %d\n", temp, mfd->bl_scale);
83147f1a6617a (Benet Clark                   2016-08-09 18:14:27 -0700 1810) 	if (temp > mfd->panel_info->bl_max) {
83147f1a6617a (Benet Clark                   2016-08-09 18:14:27 -0700 1811) 		pr_warn("%s: invalid bl level\n",
66e2cc009aee7 (Manoj Rao                     2013-07-26 22:45:25 -0700 1812) 				__func__);
83147f1a6617a (Benet Clark                   2016-08-09 18:14:27 -0700 1813) 		temp = mfd->panel_info->bl_max;
83147f1a6617a (Benet Clark                   2016-08-09 18:14:27 -0700 1814) 	}
83147f1a6617a (Benet Clark                   2016-08-09 18:14:27 -0700 1815) 	if (mfd->bl_scale > 1024) {
83147f1a6617a (Benet Clark                   2016-08-09 18:14:27 -0700 1816) 		pr_warn("%s: invalid bl scale\n",
66e2cc009aee7 (Manoj Rao                     2013-07-26 22:45:25 -0700 1817) 				__func__);
83147f1a6617a (Benet Clark                   2016-08-09 18:14:27 -0700 1818) 		mfd->bl_scale = 1024;
0f488c13e382e (Carl Vanderlip                2013-10-16 10:02:38 -0700 1819) 	}
83147f1a6617a (Benet Clark                   2016-08-09 18:14:27 -0700 1820) 	/*
83147f1a6617a (Benet Clark                   2016-08-09 18:14:27 -0700 1821) 	 * bl_scale is the numerator of
83147f1a6617a (Benet Clark                   2016-08-09 18:14:27 -0700 1822) 	 * scaling fraction (x/1024)
83147f1a6617a (Benet Clark                   2016-08-09 18:14:27 -0700 1823) 	 */
83147f1a6617a (Benet Clark                   2016-08-09 18:14:27 -0700 1824) 	temp = (temp * mfd->bl_scale) / 1024;
83147f1a6617a (Benet Clark                   2016-08-09 18:14:27 -0700 1825) 
5f1c60463e9eb (Dhaval Patel                  2014-07-11 15:09:12 -0700 1826) 	pr_debug("output = %d\n", temp);
728069952b10f (Carl Vanderlip                2012-08-27 14:52:39 -0700 1827) 
728069952b10f (Carl Vanderlip                2012-08-27 14:52:39 -0700 1828) 	(*bl_lvl) = temp;
728069952b10f (Carl Vanderlip                2012-08-27 14:52:39 -0700 1829) }
728069952b10f (Carl Vanderlip                2012-08-27 14:52:39 -0700 1830) 
c0cf914b69b88 (Carl Vanderlip                2013-04-04 20:57:17 -0700 1831) /* must call this function from within mfd->bl_lock */
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 1832) void mdss_fb_set_backlight(struct msm_fb_data_type *mfd, u32 bkl_lvl)
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 1833) {
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 1834) 	struct mdss_panel_data *pdata;
19ee50d96ad8a (Krishna Chaitanya Parimi      2015-01-12 15:33:29 +0530 1835) 	u32 temp = bkl_lvl;
25ee56238aea5 (Ping Li                       2015-05-20 13:23:44 -0700 1836) 	bool ad_bl_notify_needed = false;
19ee50d96ad8a (Krishna Chaitanya Parimi      2015-01-12 15:33:29 +0530 1837) 	bool bl_notify_needed = false;
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 1838) 
be48303843a06 (SGCMarkus                     2019-07-09 09:54:59 +0200 1839) #if defined(CONFIG_LGE_SP_MIRRORING_CTRL_BL)
be48303843a06 (SGCMarkus                     2019-07-09 09:54:59 +0200 1840) 	if(lge_is_bl_update_blocked(bkl_lvl))
be48303843a06 (SGCMarkus                     2019-07-09 09:54:59 +0200 1841) 		return;
be48303843a06 (SGCMarkus                     2019-07-09 09:54:59 +0200 1842) #endif
be48303843a06 (SGCMarkus                     2019-07-09 09:54:59 +0200 1843) 
be48303843a06 (SGCMarkus                     2019-07-09 09:54:59 +0200 1844) 	if (((
be48303843a06 (SGCMarkus                     2019-07-09 09:54:59 +0200 1845) #if defined(CONFIG_LGE_DISPLAY_AMBIENT_SUPPORTED)
be48303843a06 (SGCMarkus                     2019-07-09 09:54:59 +0200 1846) 		(!mdss_fb_is_power_on_interactive(mfd) && mfd->dcm_state != DCM_ENTER)
be48303843a06 (SGCMarkus                     2019-07-09 09:54:59 +0200 1847) #else
be48303843a06 (SGCMarkus                     2019-07-09 09:54:59 +0200 1848) 		(mdss_fb_is_power_off(mfd) && mfd->dcm_state != DCM_ENTER)
be48303843a06 (SGCMarkus                     2019-07-09 09:54:59 +0200 1849) #endif
f97adf46f51a0 (Dhaval Patel                  2015-10-21 10:55:51 -0700 1850) 		|| !mfd->allow_bl_update) && !IS_CALIB_MODE_BL(mfd)) ||
71c3d682f9739 (Jayant Shekhar                2014-09-15 17:14:00 +0530 1851) 		mfd->panel_info->cont_splash_enabled) {
0f488c13e382e (Carl Vanderlip                2013-10-16 10:02:38 -0700 1852) 		mfd->unset_bl_level = bkl_lvl;
0f488c13e382e (Carl Vanderlip                2013-10-16 10:02:38 -0700 1853) 		return;
0fae3b24d90ed (Aravind Venkateswaran         2015-03-11 18:23:47 -0700 1854) 	} else if (mdss_fb_is_power_on(mfd) && mfd->panel_info->panel_dead) {
0fae3b24d90ed (Aravind Venkateswaran         2015-03-11 18:23:47 -0700 1855) 		mfd->unset_bl_level = mfd->bl_level;
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 1856) 	} else {
25a3708f14eb1 (Raviteja Tamatam              2016-05-25 15:48:54 +0530 1857) 		mfd->unset_bl_level = U32_MAX;
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 1858) 	}
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 1859) 
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 1860) 	pdata = dev_get_platdata(&mfd->pdev->dev);
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 1861) 
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 1862) 	if ((pdata) && (pdata->set_backlight)) {
19ee50d96ad8a (Krishna Chaitanya Parimi      2015-01-12 15:33:29 +0530 1863) 		if (mfd->mdp.ad_calc_bl)
19ee50d96ad8a (Krishna Chaitanya Parimi      2015-01-12 15:33:29 +0530 1864) 			(*mfd->mdp.ad_calc_bl)(mfd, temp, &temp,
25ee56238aea5 (Ping Li                       2015-05-20 13:23:44 -0700 1865) 							&ad_bl_notify_needed);
89d9152c0e769 (Carl Vanderlip                2013-05-17 13:52:53 -0700 1866) 		if (!IS_CALIB_MODE_BL(mfd))
89d9152c0e769 (Carl Vanderlip                2013-05-17 13:52:53 -0700 1867) 			mdss_fb_scale_bl(mfd, &temp);
728069952b10f (Carl Vanderlip                2012-08-27 14:52:39 -0700 1868) 		/*
728069952b10f (Carl Vanderlip                2012-08-27 14:52:39 -0700 1869) 		 * Even though backlight has been scaled, want to show that
728069952b10f (Carl Vanderlip                2012-08-27 14:52:39 -0700 1870) 		 * backlight has been set to bkl_lvl to those that read from
728069952b10f (Carl Vanderlip                2012-08-27 14:52:39 -0700 1871) 		 * sysfs node. Thus, need to set bl_level even if it appears
728069952b10f (Carl Vanderlip                2012-08-27 14:52:39 -0700 1872) 		 * the backlight has already been set to the level it is at,
728069952b10f (Carl Vanderlip                2012-08-27 14:52:39 -0700 1873) 		 * as well as setting bl_level to bkl_lvl even though the
728069952b10f (Carl Vanderlip                2012-08-27 14:52:39 -0700 1874) 		 * backlight has been set to the scaled value.
728069952b10f (Carl Vanderlip                2012-08-27 14:52:39 -0700 1875) 		 */
7e06fea357f74 (Chandan Uddaraju              2014-04-14 18:56:24 -0700 1876) 		if (mfd->bl_level_scaled == temp) {
728069952b10f (Carl Vanderlip                2012-08-27 14:52:39 -0700 1877) 			mfd->bl_level = bkl_lvl;
0e2fd71526fbd (Ping Li                       2014-08-29 15:12:37 -0700 1878) 		} else {
25ee56238aea5 (Ping Li                       2015-05-20 13:23:44 -0700 1879) 			if (mfd->bl_level != bkl_lvl)
25ee56238aea5 (Ping Li                       2015-05-20 13:23:44 -0700 1880) 				bl_notify_needed = true;
be48303843a06 (SGCMarkus                     2019-07-09 09:54:59 +0200 1881) #if defined(CONFIG_LGE_DISPLAY_COMMON)
be48303843a06 (SGCMarkus                     2019-07-09 09:54:59 +0200 1882) 			pr_info("[Display] backlight sent to panel :%d\n", temp);
be48303843a06 (SGCMarkus                     2019-07-09 09:54:59 +0200 1883) #else
0e2fd71526fbd (Ping Li                       2014-08-29 15:12:37 -0700 1884) 			pr_debug("backlight sent to panel :%d\n", temp);
be48303843a06 (SGCMarkus                     2019-07-09 09:54:59 +0200 1885) #endif
0e2fd71526fbd (Ping Li                       2014-08-29 15:12:37 -0700 1886) 			pdata->set_backlight(pdata, temp);
0e2fd71526fbd (Ping Li                       2014-08-29 15:12:37 -0700 1887) 			mfd->bl_level = bkl_lvl;
0e2fd71526fbd (Ping Li                       2014-08-29 15:12:37 -0700 1888) 			mfd->bl_level_scaled = temp;
bff27c93dcf33 (Carl Vanderlip                2013-05-09 18:43:45 -0700 1889) 		}
25ee56238aea5 (Ping Li                       2015-05-20 13:23:44 -0700 1890) 		if (ad_bl_notify_needed)
25ee56238aea5 (Ping Li                       2015-05-20 13:23:44 -0700 1891) 			mdss_fb_bl_update_notify(mfd,
25ee56238aea5 (Ping Li                       2015-05-20 13:23:44 -0700 1892) 				NOTIFY_TYPE_BL_AD_ATTEN_UPDATE);
6656edcc6cbc7 (Benet Clark                   2015-07-24 18:53:12 -0700 1893) 		if (bl_notify_needed)
25ee56238aea5 (Ping Li                       2015-05-20 13:23:44 -0700 1894) 			mdss_fb_bl_update_notify(mfd,
25ee56238aea5 (Ping Li                       2015-05-20 13:23:44 -0700 1895) 				NOTIFY_TYPE_BL_UPDATE);
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 1896) 	}
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 1897) }
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 1898) 
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 1899) void mdss_fb_update_backlight(struct msm_fb_data_type *mfd)
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 1900) {
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 1901) 	struct mdss_panel_data *pdata;
8ec45733aaa85 (Ping Li                       2014-06-09 21:11:34 -0700 1902) 	u32 temp;
19ee50d96ad8a (Krishna Chaitanya Parimi      2015-01-12 15:33:29 +0530 1903) 	bool bl_notify = false;
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 1904) 
25a3708f14eb1 (Raviteja Tamatam              2016-05-25 15:48:54 +0530 1905) 	if (mfd->unset_bl_level == U32_MAX)
8ec45733aaa85 (Ping Li                       2014-06-09 21:11:34 -0700 1906) 		return;
be48303843a06 (SGCMarkus                     2019-07-09 09:54:59 +0200 1907) 
8ec45733aaa85 (Ping Li                       2014-06-09 21:11:34 -0700 1908) 	mutex_lock(&mfd->bl_lock);
f97adf46f51a0 (Dhaval Patel                  2015-10-21 10:55:51 -0700 1909) 	if (!mfd->allow_bl_update) {
8ec45733aaa85 (Ping Li                       2014-06-09 21:11:34 -0700 1910) 		pdata = dev_get_platdata(&mfd->pdev->dev);
be48303843a06 (SGCMarkus                     2019-07-09 09:54:59 +0200 1911) #if defined(CONFIG_LGE_DISPLAY_COMMON)
be48303843a06 (SGCMarkus                     2019-07-09 09:54:59 +0200 1912) 		if ((pdata) && (pdata->set_backlight) && mdss_fb_is_power_on_interactive(mfd)) {
be48303843a06 (SGCMarkus                     2019-07-09 09:54:59 +0200 1913) #else
8ec45733aaa85 (Ping Li                       2014-06-09 21:11:34 -0700 1914) 		if ((pdata) && (pdata->set_backlight)) {
be48303843a06 (SGCMarkus                     2019-07-09 09:54:59 +0200 1915) #endif
8ec45733aaa85 (Ping Li                       2014-06-09 21:11:34 -0700 1916) 			mfd->bl_level = mfd->unset_bl_level;
8ec45733aaa85 (Ping Li                       2014-06-09 21:11:34 -0700 1917) 			temp = mfd->bl_level;
19ee50d96ad8a (Krishna Chaitanya Parimi      2015-01-12 15:33:29 +0530 1918) 			if (mfd->mdp.ad_calc_bl)
19ee50d96ad8a (Krishna Chaitanya Parimi      2015-01-12 15:33:29 +0530 1919) 				(*mfd->mdp.ad_calc_bl)(mfd, temp, &temp,
19ee50d96ad8a (Krishna Chaitanya Parimi      2015-01-12 15:33:29 +0530 1920) 								&bl_notify);
19ee50d96ad8a (Krishna Chaitanya Parimi      2015-01-12 15:33:29 +0530 1921) 			if (bl_notify)
25ee56238aea5 (Ping Li                       2015-05-20 13:23:44 -0700 1922) 				mdss_fb_bl_update_notify(mfd,
25ee56238aea5 (Ping Li                       2015-05-20 13:23:44 -0700 1923) 					NOTIFY_TYPE_BL_AD_ATTEN_UPDATE);
3fd9638f272f7 (Benet Clark                   2015-12-14 22:24:16 -0800 1924) 			mdss_fb_bl_update_notify(mfd, NOTIFY_TYPE_BL_UPDATE);
be48303843a06 (SGCMarkus                     2019-07-09 09:54:59 +0200 1925) #if defined(CONFIG_LGE_DISPLAY_COMMON)
be48303843a06 (SGCMarkus                     2019-07-09 09:54:59 +0200 1926) 			pr_info("[Display] backlight sent to panel :%d\n", temp);
be48303843a06 (SGCMarkus                     2019-07-09 09:54:59 +0200 1927) #endif
8ec45733aaa85 (Ping Li                       2014-06-09 21:11:34 -0700 1928) 			pdata->set_backlight(pdata, temp);
8ec45733aaa85 (Ping Li                       2014-06-09 21:11:34 -0700 1929) 			mfd->bl_level_scaled = mfd->unset_bl_level;
f97adf46f51a0 (Dhaval Patel                  2015-10-21 10:55:51 -0700 1930) 			mfd->allow_bl_update = true;
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 1931) 		}
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 1932) 	}
8ec45733aaa85 (Ping Li                       2014-06-09 21:11:34 -0700 1933) 	mutex_unlock(&mfd->bl_lock);
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 1934) }
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 1935) 
3ee962653b755 (Ingrid Gallardo               2014-07-31 19:42:10 -0700 1936) static int mdss_fb_start_disp_thread(struct msm_fb_data_type *mfd)
3ee962653b755 (Ingrid Gallardo               2014-07-31 19:42:10 -0700 1937) {
3ee962653b755 (Ingrid Gallardo               2014-07-31 19:42:10 -0700 1938) 	int ret = 0;
3ee962653b755 (Ingrid Gallardo               2014-07-31 19:42:10 -0700 1939) 
3ee962653b755 (Ingrid Gallardo               2014-07-31 19:42:10 -0700 1940) 	pr_debug("%pS: start display thread fb%d\n",
3ee962653b755 (Ingrid Gallardo               2014-07-31 19:42:10 -0700 1941) 		__builtin_return_address(0), mfd->index);
3ee962653b755 (Ingrid Gallardo               2014-07-31 19:42:10 -0700 1942) 
ffaf975ec3ace (Ujwal Patel                   2014-11-14 15:02:31 -0800 1943) 	/* this is needed for new split request from debugfs */
3ee962653b755 (Ingrid Gallardo               2014-07-31 19:42:10 -0700 1944) 	mdss_fb_get_split(mfd);
3ee962653b755 (Ingrid Gallardo               2014-07-31 19:42:10 -0700 1945) 
3ee962653b755 (Ingrid Gallardo               2014-07-31 19:42:10 -0700 1946) 	atomic_set(&mfd->commits_pending, 0);
3ee962653b755 (Ingrid Gallardo               2014-07-31 19:42:10 -0700 1947) 	mfd->disp_thread = kthread_run(__mdss_fb_display_thread,
3ee962653b755 (Ingrid Gallardo               2014-07-31 19:42:10 -0700 1948) 				mfd, "mdss_fb%d", mfd->index);
3ee962653b755 (Ingrid Gallardo               2014-07-31 19:42:10 -0700 1949) 
3ee962653b755 (Ingrid Gallardo               2014-07-31 19:42:10 -0700 1950) 	if (IS_ERR(mfd->disp_thread)) {
3ee962653b755 (Ingrid Gallardo               2014-07-31 19:42:10 -0700 1951) 		pr_err("ERROR: unable to start display thread %d\n",
3ee962653b755 (Ingrid Gallardo               2014-07-31 19:42:10 -0700 1952) 				mfd->index);
3ee962653b755 (Ingrid Gallardo               2014-07-31 19:42:10 -0700 1953) 		ret = PTR_ERR(mfd->disp_thread);
3ee962653b755 (Ingrid Gallardo               2014-07-31 19:42:10 -0700 1954) 		mfd->disp_thread = NULL;
3ee962653b755 (Ingrid Gallardo               2014-07-31 19:42:10 -0700 1955) 	}
3ee962653b755 (Ingrid Gallardo               2014-07-31 19:42:10 -0700 1956) 
3ee962653b755 (Ingrid Gallardo               2014-07-31 19:42:10 -0700 1957) 	return ret;
3ee962653b755 (Ingrid Gallardo               2014-07-31 19:42:10 -0700 1958) }
3ee962653b755 (Ingrid Gallardo               2014-07-31 19:42:10 -0700 1959) 
3ee962653b755 (Ingrid Gallardo               2014-07-31 19:42:10 -0700 1960) static void mdss_fb_stop_disp_thread(struct msm_fb_data_type *mfd)
3ee962653b755 (Ingrid Gallardo               2014-07-31 19:42:10 -0700 1961) {
3ee962653b755 (Ingrid Gallardo               2014-07-31 19:42:10 -0700 1962) 	pr_debug("%pS: stop display thread fb%d\n",
3ee962653b755 (Ingrid Gallardo               2014-07-31 19:42:10 -0700 1963) 		__builtin_return_address(0), mfd->index);
3ee962653b755 (Ingrid Gallardo               2014-07-31 19:42:10 -0700 1964) 
3ee962653b755 (Ingrid Gallardo               2014-07-31 19:42:10 -0700 1965) 	kthread_stop(mfd->disp_thread);
3ee962653b755 (Ingrid Gallardo               2014-07-31 19:42:10 -0700 1966) 	mfd->disp_thread = NULL;
3ee962653b755 (Ingrid Gallardo               2014-07-31 19:42:10 -0700 1967) }
3ee962653b755 (Ingrid Gallardo               2014-07-31 19:42:10 -0700 1968) 
0507b2f2e28d0 (Veera Sundaram Sankaran       2014-08-29 14:03:48 -0700 1969) static void mdss_panel_validate_debugfs_info(struct msm_fb_data_type *mfd)
0507b2f2e28d0 (Veera Sundaram Sankaran       2014-08-29 14:03:48 -0700 1970) {
0507b2f2e28d0 (Veera Sundaram Sankaran       2014-08-29 14:03:48 -0700 1971) 	struct mdss_panel_info *panel_info = mfd->panel_info;
0507b2f2e28d0 (Veera Sundaram Sankaran       2014-08-29 14:03:48 -0700 1972) 	struct fb_info *fbi = mfd->fbi;
0507b2f2e28d0 (Veera Sundaram Sankaran       2014-08-29 14:03:48 -0700 1973) 	struct fb_var_screeninfo *var = &fbi->var;
0507b2f2e28d0 (Veera Sundaram Sankaran       2014-08-29 14:03:48 -0700 1974) 	struct mdss_panel_data *pdata = container_of(panel_info,
0507b2f2e28d0 (Veera Sundaram Sankaran       2014-08-29 14:03:48 -0700 1975) 				struct mdss_panel_data, panel_info);
0507b2f2e28d0 (Veera Sundaram Sankaran       2014-08-29 14:03:48 -0700 1976) 
0507b2f2e28d0 (Veera Sundaram Sankaran       2014-08-29 14:03:48 -0700 1977) 	if (panel_info->debugfs_info->override_flag) {
0507b2f2e28d0 (Veera Sundaram Sankaran       2014-08-29 14:03:48 -0700 1978) 		if (mfd->mdp.off_fnc) {
0507b2f2e28d0 (Veera Sundaram Sankaran       2014-08-29 14:03:48 -0700 1979) 			mfd->panel_reconfig = true;
0507b2f2e28d0 (Veera Sundaram Sankaran       2014-08-29 14:03:48 -0700 1980) 			mfd->mdp.off_fnc(mfd);
0507b2f2e28d0 (Veera Sundaram Sankaran       2014-08-29 14:03:48 -0700 1981) 			mfd->panel_reconfig = false;
0507b2f2e28d0 (Veera Sundaram Sankaran       2014-08-29 14:03:48 -0700 1982) 		}
0507b2f2e28d0 (Veera Sundaram Sankaran       2014-08-29 14:03:48 -0700 1983) 
0507b2f2e28d0 (Veera Sundaram Sankaran       2014-08-29 14:03:48 -0700 1984) 		pr_debug("Overriding panel_info with debugfs_info\n");
0507b2f2e28d0 (Veera Sundaram Sankaran       2014-08-29 14:03:48 -0700 1985) 		panel_info->debugfs_info->override_flag = 0;
0507b2f2e28d0 (Veera Sundaram Sankaran       2014-08-29 14:03:48 -0700 1986) 		mdss_panel_debugfsinfo_to_panelinfo(panel_info);
0507b2f2e28d0 (Veera Sundaram Sankaran       2014-08-29 14:03:48 -0700 1987) 		if (is_panel_split(mfd) && pdata->next)
0507b2f2e28d0 (Veera Sundaram Sankaran       2014-08-29 14:03:48 -0700 1988) 			mdss_fb_validate_split(pdata->panel_info.xres,
0507b2f2e28d0 (Veera Sundaram Sankaran       2014-08-29 14:03:48 -0700 1989) 					pdata->next->panel_info.xres, mfd);
0507b2f2e28d0 (Veera Sundaram Sankaran       2014-08-29 14:03:48 -0700 1990) 		mdss_panelinfo_to_fb_var(panel_info, var);
0507b2f2e28d0 (Veera Sundaram Sankaran       2014-08-29 14:03:48 -0700 1991) 		if (mdss_fb_send_panel_event(mfd, MDSS_EVENT_CHECK_PARAMS,
0507b2f2e28d0 (Veera Sundaram Sankaran       2014-08-29 14:03:48 -0700 1992) 							panel_info))
0507b2f2e28d0 (Veera Sundaram Sankaran       2014-08-29 14:03:48 -0700 1993) 			pr_err("Failed to send panel event CHECK_PARAMS\n");
0507b2f2e28d0 (Veera Sundaram Sankaran       2014-08-29 14:03:48 -0700 1994) 	}
0507b2f2e28d0 (Veera Sundaram Sankaran       2014-08-29 14:03:48 -0700 1995) }
0507b2f2e28d0 (Veera Sundaram Sankaran       2014-08-29 14:03:48 -0700 1996) 
fbcc005c2b893 (Aravind Venkateswaran         2014-10-30 15:03:45 -0700 1997) static int mdss_fb_blank_blank(struct msm_fb_data_type *mfd,
fbcc005c2b893 (Aravind Venkateswaran         2014-10-30 15:03:45 -0700 1998) 	int req_power_state)
fbcc005c2b893 (Aravind Venkateswaran         2014-10-30 15:03:45 -0700 1999) {
fbcc005c2b893 (Aravind Venkateswaran         2014-10-30 15:03:45 -0700 2000) 	int ret = 0;
db74d3e4abfd7 (Shivaraj Shetty               2015-06-05 12:04:56 +0530 2001) 	int cur_power_state, current_bl;
fbcc005c2b893 (Aravind Venkateswaran         2014-10-30 15:03:45 -0700 2002) 
be48303843a06 (SGCMarkus                     2019-07-09 09:54:59 +0200 2003) #if defined(CONFIG_LGE_DISPLAY_VIDEO_ENHANCEMENT)
be48303843a06 (SGCMarkus                     2019-07-09 09:54:59 +0200 2004) 	struct mdss_dsi_ctrl_pdata *ctrl_pdata = NULL;
be48303843a06 (SGCMarkus                     2019-07-09 09:54:59 +0200 2005) 	struct lge_mdss_dsi_ctrl_pdata *lge_ctrl_pdata = NULL;
be48303843a06 (SGCMarkus                     2019-07-09 09:54:59 +0200 2006) #endif
be48303843a06 (SGCMarkus                     2019-07-09 09:54:59 +0200 2007) 
fbcc005c2b893 (Aravind Venkateswaran         2014-10-30 15:03:45 -0700 2008) 	if (!mfd)
fbcc005c2b893 (Aravind Venkateswaran         2014-10-30 15:03:45 -0700 2009) 		return -EINVAL;
fbcc005c2b893 (Aravind Venkateswaran         2014-10-30 15:03:45 -0700 2010) 
fbcc005c2b893 (Aravind Venkateswaran         2014-10-30 15:03:45 -0700 2011) 	if (!mdss_fb_is_power_on(mfd) || !mfd->mdp.off_fnc)
fbcc005c2b893 (Aravind Venkateswaran         2014-10-30 15:03:45 -0700 2012) 		return 0;
fbcc005c2b893 (Aravind Venkateswaran         2014-10-30 15:03:45 -0700 2013) 
be48303843a06 (SGCMarkus                     2019-07-09 09:54:59 +0200 2014) #if defined(CONFIG_LGE_DISPLAY_COMMON)
be48303843a06 (SGCMarkus                     2019-07-09 09:54:59 +0200 2015) 	if(mfd->index == 0) {
be48303843a06 (SGCMarkus                     2019-07-09 09:54:59 +0200 2016) #if defined(CONFIG_LGE_DISPLAY_VIDEO_ENHANCEMENT)
be48303843a06 (SGCMarkus                     2019-07-09 09:54:59 +0200 2017) 		ctrl_pdata = container_of(dev_get_platdata(&mfd->pdev->dev),
be48303843a06 (SGCMarkus                     2019-07-09 09:54:59 +0200 2018) 				struct mdss_dsi_ctrl_pdata, panel_data);
be48303843a06 (SGCMarkus                     2019-07-09 09:54:59 +0200 2019) 		if (ctrl_pdata == NULL) {
be48303843a06 (SGCMarkus                     2019-07-09 09:54:59 +0200 2020) 			pr_err("Invalid ctrl_pdata\n");
be48303843a06 (SGCMarkus                     2019-07-09 09:54:59 +0200 2021) 			return -EINVAL;
be48303843a06 (SGCMarkus                     2019-07-09 09:54:59 +0200 2022) 		}
be48303843a06 (SGCMarkus                     2019-07-09 09:54:59 +0200 2023) 
be48303843a06 (SGCMarkus                     2019-07-09 09:54:59 +0200 2024) 		lge_ctrl_pdata = ctrl_pdata->lge_ctrl_pdata;
be48303843a06 (SGCMarkus                     2019-07-09 09:54:59 +0200 2025) 		if (lge_ctrl_pdata == NULL) {
be48303843a06 (SGCMarkus                     2019-07-09 09:54:59 +0200 2026) 			pr_err("Invalid lge_ctrl_pdata\n");
be48303843a06 (SGCMarkus                     2019-07-09 09:54:59 +0200 2027) 			return -EINVAL;
be48303843a06 (SGCMarkus                     2019-07-09 09:54:59 +0200 2028) 		}
be48303843a06 (SGCMarkus                     2019-07-09 09:54:59 +0200 2029) 
be48303843a06 (SGCMarkus                     2019-07-09 09:54:59 +0200 2030) 		cancel_delayed_work_sync(&lge_ctrl_pdata->bc_dim_work);
be48303843a06 (SGCMarkus                     2019-07-09 09:54:59 +0200 2031) #endif
be48303843a06 (SGCMarkus                     2019-07-09 09:54:59 +0200 2032) #if defined(CONFIG_LGE_DISPLAY_DYNAMIC_RESOLUTION_SWITCH)
be48303843a06 (SGCMarkus                     2019-07-09 09:54:59 +0200 2033) 		mutex_lock(&ctrl_pdata->drs_lock);
be48303843a06 (SGCMarkus                     2019-07-09 09:54:59 +0200 2034) 		if (ctrl_pdata->drs_state > DYNAMIC_RESOLUTION_SWITCH_IDLE) {
be48303843a06 (SGCMarkus                     2019-07-09 09:54:59 +0200 2035) 			mutex_unlock(&ctrl_pdata->drs_lock);
be48303843a06 (SGCMarkus                     2019-07-09 09:54:59 +0200 2036) 			pr_info("%s: DRS is running....wait drs_work_done complete\n", __func__);
be48303843a06 (SGCMarkus                     2019-07-09 09:54:59 +0200 2037) 			wait_for_completion_interruptible(&ctrl_pdata->drs_work_done);
be48303843a06 (SGCMarkus                     2019-07-09 09:54:59 +0200 2038) 		} else {
be48303843a06 (SGCMarkus                     2019-07-09 09:54:59 +0200 2039) 			mutex_unlock(&ctrl_pdata->drs_lock);
be48303843a06 (SGCMarkus                     2019-07-09 09:54:59 +0200 2040) 		}
be48303843a06 (SGCMarkus                     2019-07-09 09:54:59 +0200 2041) #endif
be48303843a06 (SGCMarkus                     2019-07-09 09:54:59 +0200 2042) #if defined(CONFIG_LGE_DISPLAY_AMBIENT_SUPPORTED)
be48303843a06 (SGCMarkus                     2019-07-09 09:54:59 +0200 2043) #if defined(CONFIG_LGE_DISPLAY_CHANGE_PARTIAL_AREA_IN_KICKOFF)
be48303843a06 (SGCMarkus                     2019-07-09 09:54:59 +0200 2044) #if defined(CONFIG_LGE_DISPLAY_BIST_MODE)
be48303843a06 (SGCMarkus                     2019-07-09 09:54:59 +0200 2045) #if defined(CONFIG_LGE_DISPLAY_DYNAMIC_RESOLUTION_SWITCH)
be48303843a06 (SGCMarkus                     2019-07-09 09:54:59 +0200 2046) 		mfd->allow_bist_verify = false;
be48303843a06 (SGCMarkus                     2019-07-09 09:54:59 +0200 2047) #endif
be48303843a06 (SGCMarkus                     2019-07-09 09:54:59 +0200 2048) #endif
be48303843a06 (SGCMarkus                     2019-07-09 09:54:59 +0200 2049) #endif
be48303843a06 (SGCMarkus                     2019-07-09 09:54:59 +0200 2050) #endif
be48303843a06 (SGCMarkus                     2019-07-09 09:54:59 +0200 2051) 	}
be48303843a06 (SGCMarkus                     2019-07-09 09:54:59 +0200 2052) #endif
be48303843a06 (SGCMarkus                     2019-07-09 09:54:59 +0200 2053) 
fbcc005c2b893 (Aravind Venkateswaran         2014-10-30 15:03:45 -0700 2054) 	cur_power_state = mfd->panel_power_state;
fbcc005c2b893 (Aravind Venkateswaran         2014-10-30 15:03:45 -0700 2055) 
be48303843a06 (SGCMarkus                     2019-07-09 09:54:59 +0200 2056) #ifdef CONFIG_LGE_LCD_OFF_DIMMING
be48303843a06 (SGCMarkus                     2019-07-09 09:54:59 +0200 2057) 	lge_set_blank_called();
be48303843a06 (SGCMarkus                     2019-07-09 09:54:59 +0200 2058) #endif
fbcc005c2b893 (Aravind Venkateswaran         2014-10-30 15:03:45 -0700 2059) 	pr_debug("Transitioning from %d --> %d\n", cur_power_state,
fbcc005c2b893 (Aravind Venkateswaran         2014-10-30 15:03:45 -0700 2060) 		req_power_state);
fbcc005c2b893 (Aravind Venkateswaran         2014-10-30 15:03:45 -0700 2061) 
fbcc005c2b893 (Aravind Venkateswaran         2014-10-30 15:03:45 -0700 2062) 	if (cur_power_state == req_power_state) {
fbcc005c2b893 (Aravind Venkateswaran         2014-10-30 15:03:45 -0700 2063) 		pr_debug("No change in power state\n");
fbcc005c2b893 (Aravind Venkateswaran         2014-10-30 15:03:45 -0700 2064) 		return 0;
fbcc005c2b893 (Aravind Venkateswaran         2014-10-30 15:03:45 -0700 2065) 	}
fbcc005c2b893 (Aravind Venkateswaran         2014-10-30 15:03:45 -0700 2066) 
fbcc005c2b893 (Aravind Venkateswaran         2014-10-30 15:03:45 -0700 2067) 	mutex_lock(&mfd->update.lock);
fbcc005c2b893 (Aravind Venkateswaran         2014-10-30 15:03:45 -0700 2068) 	mfd->update.type = NOTIFY_TYPE_SUSPEND;
fbcc005c2b893 (Aravind Venkateswaran         2014-10-30 15:03:45 -0700 2069) 	mfd->update.is_suspend = 1;
fbcc005c2b893 (Aravind Venkateswaran         2014-10-30 15:03:45 -0700 2070) 	mutex_unlock(&mfd->update.lock);
fbcc005c2b893 (Aravind Venkateswaran         2014-10-30 15:03:45 -0700 2071) 	complete(&mfd->update.comp);
fbcc005c2b893 (Aravind Venkateswaran         2014-10-30 15:03:45 -0700 2072) 	del_timer(&mfd->no_update.timer);
fbcc005c2b893 (Aravind Venkateswaran         2014-10-30 15:03:45 -0700 2073) 	mfd->no_update.value = NOTIFY_TYPE_SUSPEND;
fbcc005c2b893 (Aravind Venkateswaran         2014-10-30 15:03:45 -0700 2074) 	complete(&mfd->no_update.comp);
fbcc005c2b893 (Aravind Venkateswaran         2014-10-30 15:03:45 -0700 2075) 
fbcc005c2b893 (Aravind Venkateswaran         2014-10-30 15:03:45 -0700 2076) 	mfd->op_enable = false;
fbcc005c2b893 (Aravind Venkateswaran         2014-10-30 15:03:45 -0700 2077) 	if (mdss_panel_is_power_off(req_power_state)) {
fbcc005c2b893 (Aravind Venkateswaran         2014-10-30 15:03:45 -0700 2078) 		/* Stop Display thread */
fbcc005c2b893 (Aravind Venkateswaran         2014-10-30 15:03:45 -0700 2079) 		if (mfd->disp_thread)
fbcc005c2b893 (Aravind Venkateswaran         2014-10-30 15:03:45 -0700 2080) 			mdss_fb_stop_disp_thread(mfd);
ad245195a0fdb (Adrian Salido-Moreno          2014-11-24 21:21:50 -0800 2081) 		mutex_lock(&mfd->bl_lock);
db74d3e4abfd7 (Shivaraj Shetty               2015-06-05 12:04:56 +0530 2082) 		current_bl = mfd->bl_level;
5b6725448a58e (Padmanabhan Komanduru         2015-12-30 17:15:53 +0530 2083) 		mfd->allow_bl_update = true;
fbcc005c2b893 (Aravind Venkateswaran         2014-10-30 15:03:45 -0700 2084) 		mdss_fb_set_backlight(mfd, 0);
f97adf46f51a0 (Dhaval Patel                  2015-10-21 10:55:51 -0700 2085) 		mfd->allow_bl_update = false;
db74d3e4abfd7 (Shivaraj Shetty               2015-06-05 12:04:56 +0530 2086) 		mfd->unset_bl_level = current_bl;
be48303843a06 (SGCMarkus                     2019-07-09 09:54:59 +0200 2087) #if defined(CONFIG_LGE_DISPLAY_AMBIENT_SUPPORTED)
be48303843a06 (SGCMarkus                     2019-07-09 09:54:59 +0200 2088) 		mfd->allow_bl_update_ex = false;
be48303843a06 (SGCMarkus                     2019-07-09 09:54:59 +0200 2089) 		mfd->unset_bl_level_ex = current_bl;
be48303843a06 (SGCMarkus                     2019-07-09 09:54:59 +0200 2090) #endif
be48303843a06 (SGCMarkus                     2019-07-09 09:54:59 +0200 2091) 		mutex_unlock(&mfd->bl_lock);
be48303843a06 (SGCMarkus                     2019-07-09 09:54:59 +0200 2092) 	}
be48303843a06 (SGCMarkus                     2019-07-09 09:54:59 +0200 2093) 
be48303843a06 (SGCMarkus                     2019-07-09 09:54:59 +0200 2094) #if defined(CONFIG_LGE_DISPLAY_AMBIENT_SUPPORTED)
be48303843a06 (SGCMarkus                     2019-07-09 09:54:59 +0200 2095) 	if (mdss_panel_is_power_on_lp(req_power_state)) {
be48303843a06 (SGCMarkus                     2019-07-09 09:54:59 +0200 2096) 		mutex_lock(&mfd->bl_lock);
be48303843a06 (SGCMarkus                     2019-07-09 09:54:59 +0200 2097) 		mfd->unset_bl_level = U32_MAX;
be48303843a06 (SGCMarkus                     2019-07-09 09:54:59 +0200 2098) 		mfd->allow_bl_update = false;
ad245195a0fdb (Adrian Salido-Moreno          2014-11-24 21:21:50 -0800 2099) 		mutex_unlock(&mfd->bl_lock);
fbcc005c2b893 (Aravind Venkateswaran         2014-10-30 15:03:45 -0700 2100) 	}
be48303843a06 (SGCMarkus                     2019-07-09 09:54:59 +0200 2101) #endif
be48303843a06 (SGCMarkus                     2019-07-09 09:54:59 +0200 2102) 
fbcc005c2b893 (Aravind Venkateswaran         2014-10-30 15:03:45 -0700 2103) 	mfd->panel_power_state = req_power_state;
fbcc005c2b893 (Aravind Venkateswaran         2014-10-30 15:03:45 -0700 2104) 
fbcc005c2b893 (Aravind Venkateswaran         2014-10-30 15:03:45 -0700 2105) 	ret = mfd->mdp.off_fnc(mfd);
fbcc005c2b893 (Aravind Venkateswaran         2014-10-30 15:03:45 -0700 2106) 	if (ret)
fbcc005c2b893 (Aravind Venkateswaran         2014-10-30 15:03:45 -0700 2107) 		mfd->panel_power_state = cur_power_state;
fbcc005c2b893 (Aravind Venkateswaran         2014-10-30 15:03:45 -0700 2108) 	else if (mdss_panel_is_power_off(req_power_state))
fbcc005c2b893 (Aravind Venkateswaran         2014-10-30 15:03:45 -0700 2109) 		mdss_fb_release_fences(mfd);
fbcc005c2b893 (Aravind Venkateswaran         2014-10-30 15:03:45 -0700 2110) 	mfd->op_enable = true;
fbcc005c2b893 (Aravind Venkateswaran         2014-10-30 15:03:45 -0700 2111) 	complete(&mfd->power_off_comp);
fbcc005c2b893 (Aravind Venkateswaran         2014-10-30 15:03:45 -0700 2112) 
fbcc005c2b893 (Aravind Venkateswaran         2014-10-30 15:03:45 -0700 2113) 	return ret;
fbcc005c2b893 (Aravind Venkateswaran         2014-10-30 15:03:45 -0700 2114) }
fbcc005c2b893 (Aravind Venkateswaran         2014-10-30 15:03:45 -0700 2115) 
fbcc005c2b893 (Aravind Venkateswaran         2014-10-30 15:03:45 -0700 2116) static int mdss_fb_blank_unblank(struct msm_fb_data_type *mfd)
605c69f9b49c3 (Aravind Venkateswaran         2014-10-21 16:34:39 -0700 2117) {
605c69f9b49c3 (Aravind Venkateswaran         2014-10-21 16:34:39 -0700 2118) 	int ret = 0;
605c69f9b49c3 (Aravind Venkateswaran         2014-10-21 16:34:39 -0700 2119) 	int cur_power_state;
605c69f9b49c3 (Aravind Venkateswaran         2014-10-21 16:34:39 -0700 2120) 
605c69f9b49c3 (Aravind Venkateswaran         2014-10-21 16:34:39 -0700 2121) 	if (!mfd)
605c69f9b49c3 (Aravind Venkateswaran         2014-10-21 16:34:39 -0700 2122) 		return -EINVAL;
605c69f9b49c3 (Aravind Venkateswaran         2014-10-21 16:34:39 -0700 2123) 
0507b2f2e28d0 (Veera Sundaram Sankaran       2014-08-29 14:03:48 -0700 2124) 	if (mfd->panel_info->debugfs_info)
0507b2f2e28d0 (Veera Sundaram Sankaran       2014-08-29 14:03:48 -0700 2125) 		mdss_panel_validate_debugfs_info(mfd);
0507b2f2e28d0 (Veera Sundaram Sankaran       2014-08-29 14:03:48 -0700 2126) 
605c69f9b49c3 (Aravind Venkateswaran         2014-10-21 16:34:39 -0700 2127) 	/* Start Display thread */
605c69f9b49c3 (Aravind Venkateswaran         2014-10-21 16:34:39 -0700 2128) 	if (mfd->disp_thread == NULL) {
605c69f9b49c3 (Aravind Venkateswaran         2014-10-21 16:34:39 -0700 2129) 		ret = mdss_fb_start_disp_thread(mfd);
605c69f9b49c3 (Aravind Venkateswaran         2014-10-21 16:34:39 -0700 2130) 		if (IS_ERR_VALUE(ret))
605c69f9b49c3 (Aravind Venkateswaran         2014-10-21 16:34:39 -0700 2131) 			return ret;
605c69f9b49c3 (Aravind Venkateswaran         2014-10-21 16:34:39 -0700 2132) 	}
605c69f9b49c3 (Aravind Venkateswaran         2014-10-21 16:34:39 -0700 2133) 
605c69f9b49c3 (Aravind Venkateswaran         2014-10-21 16:34:39 -0700 2134) 	cur_power_state = mfd->panel_power_state;
fbcc005c2b893 (Aravind Venkateswaran         2014-10-30 15:03:45 -0700 2135) 	pr_debug("Transitioning from %d --> %d\n", cur_power_state,
fbcc005c2b893 (Aravind Venkateswaran         2014-10-30 15:03:45 -0700 2136) 		MDSS_PANEL_POWER_ON);
fbcc005c2b893 (Aravind Venkateswaran         2014-10-30 15:03:45 -0700 2137) 
fbcc005c2b893 (Aravind Venkateswaran         2014-10-30 15:03:45 -0700 2138) 	if (mdss_panel_is_power_on_interactive(cur_power_state)) {
fbcc005c2b893 (Aravind Venkateswaran         2014-10-30 15:03:45 -0700 2139) 		pr_debug("No change in power state\n");
fbcc005c2b893 (Aravind Venkateswaran         2014-10-30 15:03:45 -0700 2140) 		return 0;
fbcc005c2b893 (Aravind Venkateswaran         2014-10-30 15:03:45 -0700 2141) 	}
fbcc005c2b893 (Aravind Venkateswaran         2014-10-30 15:03:45 -0700 2142) 
fbcc005c2b893 (Aravind Venkateswaran         2014-10-30 15:03:45 -0700 2143) 	if (mfd->mdp.on_fnc) {
2707818973b22 (Ingrid Gallardo               2015-05-12 22:25:41 -0700 2144) 		struct mdss_panel_info *panel_info = mfd->panel_info;
2707818973b22 (Ingrid Gallardo               2015-05-12 22:25:41 -0700 2145) 		struct fb_var_screeninfo *var = &mfd->fbi->var;
2707818973b22 (Ingrid Gallardo               2015-05-12 22:25:41 -0700 2146) 
605c69f9b49c3 (Aravind Venkateswaran         2014-10-21 16:34:39 -0700 2147) 		ret = mfd->mdp.on_fnc(mfd);
fbcc005c2b893 (Aravind Venkateswaran         2014-10-30 15:03:45 -0700 2148) 		if (ret) {
605c69f9b49c3 (Aravind Venkateswaran         2014-10-21 16:34:39 -0700 2149) 			mdss_fb_stop_disp_thread(mfd);
605c69f9b49c3 (Aravind Venkateswaran         2014-10-21 16:34:39 -0700 2150) 			goto error;
605c69f9b49c3 (Aravind Venkateswaran         2014-10-21 16:34:39 -0700 2151) 		}
fbcc005c2b893 (Aravind Venkateswaran         2014-10-30 15:03:45 -0700 2152) 
fbcc005c2b893 (Aravind Venkateswaran         2014-10-30 15:03:45 -0700 2153) 		mfd->panel_power_state = MDSS_PANEL_POWER_ON;
fbcc005c2b893 (Aravind Venkateswaran         2014-10-30 15:03:45 -0700 2154) 		mfd->panel_info->panel_dead = false;
605c69f9b49c3 (Aravind Venkateswaran         2014-10-21 16:34:39 -0700 2155) 		mutex_lock(&mfd->update.lock);
605c69f9b49c3 (Aravind Venkateswaran         2014-10-21 16:34:39 -0700 2156) 		mfd->update.type = NOTIFY_TYPE_UPDATE;
605c69f9b49c3 (Aravind Venkateswaran         2014-10-21 16:34:39 -0700 2157) 		mfd->update.is_suspend = 0;
605c69f9b49c3 (Aravind Venkateswaran         2014-10-21 16:34:39 -0700 2158) 		mutex_unlock(&mfd->update.lock);
605c69f9b49c3 (Aravind Venkateswaran         2014-10-21 16:34:39 -0700 2159) 
2707818973b22 (Ingrid Gallardo               2015-05-12 22:25:41 -0700 2160) 		/*
2707818973b22 (Ingrid Gallardo               2015-05-12 22:25:41 -0700 2161) 		 * Panel info can change depending in the information
2707818973b22 (Ingrid Gallardo               2015-05-12 22:25:41 -0700 2162) 		 * programmed in the controller.
2707818973b22 (Ingrid Gallardo               2015-05-12 22:25:41 -0700 2163) 		 * Update this info in the upstream structs.
2707818973b22 (Ingrid Gallardo               2015-05-12 22:25:41 -0700 2164) 		 */
2707818973b22 (Ingrid Gallardo               2015-05-12 22:25:41 -0700 2165) 		mdss_panelinfo_to_fb_var(panel_info, var);
2707818973b22 (Ingrid Gallardo               2015-05-12 22:25:41 -0700 2166) 
605c69f9b49c3 (Aravind Venkateswaran         2014-10-21 16:34:39 -0700 2167) 		/* Start the work thread to signal idle time */
605c69f9b49c3 (Aravind Venkateswaran         2014-10-21 16:34:39 -0700 2168) 		if (mfd->idle_time)
605c69f9b49c3 (Aravind Venkateswaran         2014-10-21 16:34:39 -0700 2169) 			schedule_delayed_work(&mfd->idle_notify_work,
be48303843a06 (SGCMarkus                     2019-07-09 09:54:59 +0200 2170) 					msecs_to_jiffies(mfd->idle_time));
be48303843a06 (SGCMarkus                     2019-07-09 09:54:59 +0200 2171) #if defined(CONFIG_LGE_DISPLAY_AMBIENT_SUPPORTED)
be48303843a06 (SGCMarkus                     2019-07-09 09:54:59 +0200 2172) #if defined(CONFIG_LGE_DISPLAY_CHANGE_PARTIAL_AREA_IN_KICKOFF)
be48303843a06 (SGCMarkus                     2019-07-09 09:54:59 +0200 2173) #if defined(CONFIG_LGE_DISPLAY_BIST_MODE)
be48303843a06 (SGCMarkus                     2019-07-09 09:54:59 +0200 2174) #if defined(CONFIG_LGE_DISPLAY_DYNAMIC_RESOLUTION_SWITCH)
be48303843a06 (SGCMarkus                     2019-07-09 09:54:59 +0200 2175) 		if(mfd->index == 0) {
be48303843a06 (SGCMarkus                     2019-07-09 09:54:59 +0200 2176) 			mfd->allow_bist_verify = true;
be48303843a06 (SGCMarkus                     2019-07-09 09:54:59 +0200 2177) 		}
be48303843a06 (SGCMarkus                     2019-07-09 09:54:59 +0200 2178) #endif
be48303843a06 (SGCMarkus                     2019-07-09 09:54:59 +0200 2179) #endif
be48303843a06 (SGCMarkus                     2019-07-09 09:54:59 +0200 2180) #endif
be48303843a06 (SGCMarkus                     2019-07-09 09:54:59 +0200 2181) #endif
605c69f9b49c3 (Aravind Venkateswaran         2014-10-21 16:34:39 -0700 2182) 	}
605c69f9b49c3 (Aravind Venkateswaran         2014-10-21 16:34:39 -0700 2183) 
be48303843a06 (SGCMarkus                     2019-07-09 09:54:59 +0200 2184) #if !defined(CONFIG_LGE_DISPLAY_COMMON)
605c69f9b49c3 (Aravind Venkateswaran         2014-10-21 16:34:39 -0700 2185) 	/* Reset the backlight only if the panel was off */
605c69f9b49c3 (Aravind Venkateswaran         2014-10-21 16:34:39 -0700 2186) 	if (mdss_panel_is_power_off(cur_power_state)) {
605c69f9b49c3 (Aravind Venkateswaran         2014-10-21 16:34:39 -0700 2187) 		mutex_lock(&mfd->bl_lock);
f97adf46f51a0 (Dhaval Patel                  2015-10-21 10:55:51 -0700 2188) 		if (!mfd->allow_bl_update) {
f97adf46f51a0 (Dhaval Patel                  2015-10-21 10:55:51 -0700 2189) 			mfd->allow_bl_update = true;
f954efe13095b (Krishna Chaitanya Parimi      2015-01-09 15:09:59 +0530 2190) 			/*
f954efe13095b (Krishna Chaitanya Parimi      2015-01-09 15:09:59 +0530 2191) 			 * If in AD calibration mode then frameworks would not
f954efe13095b (Krishna Chaitanya Parimi      2015-01-09 15:09:59 +0530 2192) 			 * be allowed to update backlight hence post unblank
f954efe13095b (Krishna Chaitanya Parimi      2015-01-09 15:09:59 +0530 2193) 			 * the backlight would remain 0 (0 is set in blank).
f954efe13095b (Krishna Chaitanya Parimi      2015-01-09 15:09:59 +0530 2194) 			 * Hence resetting back to calibration mode value
f954efe13095b (Krishna Chaitanya Parimi      2015-01-09 15:09:59 +0530 2195) 			 */
b9c131d741438 (Jayant Shekhar                2015-07-16 17:58:41 +0530 2196) 			if (IS_CALIB_MODE_BL(mfd))
f954efe13095b (Krishna Chaitanya Parimi      2015-01-09 15:09:59 +0530 2197) 				mdss_fb_set_backlight(mfd, mfd->calib_mode_bl);
25a3708f14eb1 (Raviteja Tamatam              2016-05-25 15:48:54 +0530 2198) 			else if ((!mfd->panel_info->mipi.post_init_delay) &&
25a3708f14eb1 (Raviteja Tamatam              2016-05-25 15:48:54 +0530 2199) 				(mfd->unset_bl_level != U32_MAX))
b9c131d741438 (Jayant Shekhar                2015-07-16 17:58:41 +0530 2200) 				mdss_fb_set_backlight(mfd, mfd->unset_bl_level);
f97adf46f51a0 (Dhaval Patel                  2015-10-21 10:55:51 -0700 2201) 
f97adf46f51a0 (Dhaval Patel                  2015-10-21 10:55:51 -0700 2202) 			/*
f97adf46f51a0 (Dhaval Patel                  2015-10-21 10:55:51 -0700 2203) 			 * it blocks the backlight update between unblank and
f97adf46f51a0 (Dhaval Patel                  2015-10-21 10:55:51 -0700 2204) 			 * first kickoff to avoid backlight turn on before black
f97adf46f51a0 (Dhaval Patel                  2015-10-21 10:55:51 -0700 2205) 			 * frame is transferred to panel through unblank call.
f97adf46f51a0 (Dhaval Patel                  2015-10-21 10:55:51 -0700 2206) 			 */
f97adf46f51a0 (Dhaval Patel                  2015-10-21 10:55:51 -0700 2207) 			mfd->allow_bl_update = false;
605c69f9b49c3 (Aravind Venkateswaran         2014-10-21 16:34:39 -0700 2208) 		}
605c69f9b49c3 (Aravind Venkateswaran         2014-10-21 16:34:39 -0700 2209) 		mutex_unlock(&mfd->bl_lock);
605c69f9b49c3 (Aravind Venkateswaran         2014-10-21 16:34:39 -0700 2210) 	}
be48303843a06 (SGCMarkus                     2019-07-09 09:54:59 +0200 2211) #endif
605c69f9b49c3 (Aravind Venkateswaran         2014-10-21 16:34:39 -0700 2212) error:
605c69f9b49c3 (Aravind Venkateswaran         2014-10-21 16:34:39 -0700 2213) 	return ret;
605c69f9b49c3 (Aravind Venkateswaran         2014-10-21 16:34:39 -0700 2214) }
605c69f9b49c3 (Aravind Venkateswaran         2014-10-21 16:34:39 -0700 2215) 
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 2216) static int mdss_fb_blank_sub(int blank_mode, struct fb_info *info,
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 2217) 			     int op_enable)
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 2218) {
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 2219) 	struct msm_fb_data_type *mfd = (struct msm_fb_data_type *)info->par;
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 2220) 	int ret = 0;
b9095befda98a (Aravind Venkateswaran         2014-07-28 23:24:46 -0700 2221) 	int cur_power_state, req_power_state = MDSS_PANEL_POWER_OFF;
64d037028cb92 (Ingrid Gallardo               2014-11-25 14:14:02 -0800 2222) 	char trace_buffer[32];
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 2223) 
b9095befda98a (Aravind Venkateswaran         2014-07-28 23:24:46 -0700 2224) 	if (!mfd || !op_enable)
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 2225) 		return -EPERM;
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 2226) 
d00b8490439fd (Arpita Banerjee               2013-06-11 19:24:20 -0700 2227) 	if (mfd->dcm_state == DCM_ENTER)
d00b8490439fd (Arpita Banerjee               2013-06-11 19:24:20 -0700 2228) 		return -EPERM;
d00b8490439fd (Arpita Banerjee               2013-06-11 19:24:20 -0700 2229) 
be48303843a06 (SGCMarkus                     2019-07-09 09:54:59 +0200 2230) 	pr_info("[Display] %pS mode:%d\n", __builtin_return_address(0),
3ee962653b755 (Ingrid Gallardo               2014-07-31 19:42:10 -0700 2231) 		blank_mode);
3ee962653b755 (Ingrid Gallardo               2014-07-31 19:42:10 -0700 2232) 
64d037028cb92 (Ingrid Gallardo               2014-11-25 14:14:02 -0800 2233) 	snprintf(trace_buffer, sizeof(trace_buffer), "fb%d blank %d",
64d037028cb92 (Ingrid Gallardo               2014-11-25 14:14:02 -0800 2234) 		mfd->index, blank_mode);
64d037028cb92 (Ingrid Gallardo               2014-11-25 14:14:02 -0800 2235) 	ATRACE_BEGIN(trace_buffer);
64d037028cb92 (Ingrid Gallardo               2014-11-25 14:14:02 -0800 2236) 
b9095befda98a (Aravind Venkateswaran         2014-07-28 23:24:46 -0700 2237) 	cur_power_state = mfd->panel_power_state;
ef6fec42a89ba (Aravind Venkateswaran         2014-10-17 12:02:05 -0700 2238) 
ef6fec42a89ba (Aravind Venkateswaran         2014-10-17 12:02:05 -0700 2239) 	/*
fbcc005c2b893 (Aravind Venkateswaran         2014-10-30 15:03:45 -0700 2240) 	 * Low power (lp) and ultra low pwoer (ulp) modes are currently only
fbcc005c2b893 (Aravind Venkateswaran         2014-10-30 15:03:45 -0700 2241) 	 * supported for command mode panels. For all other panel, treat lp
fbcc005c2b893 (Aravind Venkateswaran         2014-10-30 15:03:45 -0700 2242) 	 * mode as full unblank and ulp mode as full blank.
ef6fec42a89ba (Aravind Venkateswaran         2014-10-17 12:02:05 -0700 2243) 	 */
fbcc005c2b893 (Aravind Venkateswaran         2014-10-30 15:03:45 -0700 2244) 	if (mfd->panel_info->type != MIPI_CMD_PANEL) {
fbcc005c2b893 (Aravind Venkateswaran         2014-10-30 15:03:45 -0700 2245) 		if (BLANK_FLAG_LP == blank_mode) {
fbcc005c2b893 (Aravind Venkateswaran         2014-10-30 15:03:45 -0700 2246) 			pr_debug("lp mode only valid for cmd mode panels\n");
fbcc005c2b893 (Aravind Venkateswaran         2014-10-30 15:03:45 -0700 2247) 			if (mdss_fb_is_power_on_interactive(mfd))
fbcc005c2b893 (Aravind Venkateswaran         2014-10-30 15:03:45 -0700 2248) 				return 0;
fbcc005c2b893 (Aravind Venkateswaran         2014-10-30 15:03:45 -0700 2249) 			else
fbcc005c2b893 (Aravind Venkateswaran         2014-10-30 15:03:45 -0700 2250) 				blank_mode = FB_BLANK_UNBLANK;
fbcc005c2b893 (Aravind Venkateswaran         2014-10-30 15:03:45 -0700 2251) 		} else if (BLANK_FLAG_ULP == blank_mode) {
fbcc005c2b893 (Aravind Venkateswaran         2014-10-30 15:03:45 -0700 2252) 			pr_debug("ulp mode valid for cmd mode panels\n");
fbcc005c2b893 (Aravind Venkateswaran         2014-10-30 15:03:45 -0700 2253) 			if (mdss_fb_is_power_off(mfd))
fbcc005c2b893 (Aravind Venkateswaran         2014-10-30 15:03:45 -0700 2254) 				return 0;
fbcc005c2b893 (Aravind Venkateswaran         2014-10-30 15:03:45 -0700 2255) 			else
fbcc005c2b893 (Aravind Venkateswaran         2014-10-30 15:03:45 -0700 2256) 				blank_mode = FB_BLANK_POWERDOWN;
fbcc005c2b893 (Aravind Venkateswaran         2014-10-30 15:03:45 -0700 2257) 		}
ef6fec42a89ba (Aravind Venkateswaran         2014-10-17 12:02:05 -0700 2258) 	}
ef6fec42a89ba (Aravind Venkateswaran         2014-10-17 12:02:05 -0700 2259) 
be48303843a06 (SGCMarkus                     2019-07-09 09:54:59 +0200 2260) #if defined(CONFIG_LGE_INTERVAL_MONITOR)
be48303843a06 (SGCMarkus                     2019-07-09 09:54:59 +0200 2261) 	if (FB_BLANK_UNBLANK == blank_mode)
be48303843a06 (SGCMarkus                     2019-07-09 09:54:59 +0200 2262) 		lge_interval_panel_power_notify(1);
be48303843a06 (SGCMarkus                     2019-07-09 09:54:59 +0200 2263) 	else
be48303843a06 (SGCMarkus                     2019-07-09 09:54:59 +0200 2264) 		lge_interval_panel_power_notify(0);
be48303843a06 (SGCMarkus                     2019-07-09 09:54:59 +0200 2265) #endif
be48303843a06 (SGCMarkus                     2019-07-09 09:54:59 +0200 2266) 
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 2267) 	switch (blank_mode) {
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 2268) 	case FB_BLANK_UNBLANK:
b9095befda98a (Aravind Venkateswaran         2014-07-28 23:24:46 -0700 2269) 		pr_debug("unblank called. cur pwr state=%d\n", cur_power_state);
be48303843a06 (SGCMarkus                     2019-07-09 09:54:59 +0200 2270) #if defined(CONFIG_LGE_DISPLAY_AMBIENT_SUPPORTED)
be48303843a06 (SGCMarkus                     2019-07-09 09:54:59 +0200 2271) 		mutex_lock(&mfd->bl_lock);
be48303843a06 (SGCMarkus                     2019-07-09 09:54:59 +0200 2272) 		mfd->unset_bl_level_ex = U32_MAX;
be48303843a06 (SGCMarkus                     2019-07-09 09:54:59 +0200 2273) 		mfd->allow_bl_update_ex = false;
be48303843a06 (SGCMarkus                     2019-07-09 09:54:59 +0200 2274) 		mutex_unlock(&mfd->bl_lock);
be48303843a06 (SGCMarkus                     2019-07-09 09:54:59 +0200 2275) #endif
fbcc005c2b893 (Aravind Venkateswaran         2014-10-30 15:03:45 -0700 2276) 		ret = mdss_fb_blank_unblank(mfd);
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 2277) 		break;
fbcc005c2b893 (Aravind Venkateswaran         2014-10-30 15:03:45 -0700 2278) 	case BLANK_FLAG_ULP:
fbcc005c2b893 (Aravind Venkateswaran         2014-10-30 15:03:45 -0700 2279) 		req_power_state = MDSS_PANEL_POWER_LP2;
fbcc005c2b893 (Aravind Venkateswaran         2014-10-30 15:03:45 -0700 2280) 		pr_debug("ultra low power mode requested\n");
fbcc005c2b893 (Aravind Venkateswaran         2014-10-30 15:03:45 -0700 2281) 		if (mdss_fb_is_power_off(mfd)) {
fbcc005c2b893 (Aravind Venkateswaran         2014-10-30 15:03:45 -0700 2282) 			pr_debug("Unsupp transition: off --> ulp\n");
fbcc005c2b893 (Aravind Venkateswaran         2014-10-30 15:03:45 -0700 2283) 			return 0;
fbcc005c2b893 (Aravind Venkateswaran         2014-10-30 15:03:45 -0700 2284) 		}
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 2285) 
fbcc005c2b893 (Aravind Venkateswaran         2014-10-30 15:03:45 -0700 2286) 		ret = mdss_fb_blank_blank(mfd, req_power_state);
fbcc005c2b893 (Aravind Venkateswaran         2014-10-30 15:03:45 -0700 2287) 		break;
fbcc005c2b893 (Aravind Venkateswaran         2014-10-30 15:03:45 -0700 2288) 	case BLANK_FLAG_LP:
fbcc005c2b893 (Aravind Venkateswaran         2014-10-30 15:03:45 -0700 2289) 		req_power_state = MDSS_PANEL_POWER_LP1;
fbcc005c2b893 (Aravind Venkateswaran         2014-10-30 15:03:45 -0700 2290) 		pr_debug(" power mode requested\n");
605c69f9b49c3 (Aravind Venkateswaran         2014-10-21 16:34:39 -0700 2291) 
43f7af5ebb193 (Aravind Venkateswaran         2014-08-15 17:04:35 -0700 2292) 		/*
fbcc005c2b893 (Aravind Venkateswaran         2014-10-30 15:03:45 -0700 2293) 		 * If low power mode is requested when panel is already off,
fbcc005c2b893 (Aravind Venkateswaran         2014-10-30 15:03:45 -0700 2294) 		 * then first unblank the panel before entering low power mode
43f7af5ebb193 (Aravind Venkateswaran         2014-08-15 17:04:35 -0700 2295) 		 */
be48303843a06 (SGCMarkus                     2019-07-09 09:54:59 +0200 2296) #if defined(CONFIG_LGE_DISPLAY_AMBIENT_SUPPORTED)
be48303843a06 (SGCMarkus                     2019-07-09 09:54:59 +0200 2297) 		mfd->unset_bl_level = U32_MAX;
be48303843a06 (SGCMarkus                     2019-07-09 09:54:59 +0200 2298) #endif
605c69f9b49c3 (Aravind Venkateswaran         2014-10-21 16:34:39 -0700 2299) 		if (mdss_fb_is_power_off(mfd) && mfd->mdp.on_fnc) {
fbcc005c2b893 (Aravind Venkateswaran         2014-10-30 15:03:45 -0700 2300) 			pr_debug("off --> lp. switch to on first\n");
fbcc005c2b893 (Aravind Venkateswaran         2014-10-30 15:03:45 -0700 2301) 			ret = mdss_fb_blank_unblank(mfd);
fbcc005c2b893 (Aravind Venkateswaran         2014-10-30 15:03:45 -0700 2302) 			if (ret)
fbcc005c2b893 (Aravind Venkateswaran         2014-10-30 15:03:45 -0700 2303) 				break;
43f7af5ebb193 (Aravind Venkateswaran         2014-08-15 17:04:35 -0700 2304) 		}
605c69f9b49c3 (Aravind Venkateswaran         2014-10-21 16:34:39 -0700 2305) 
fbcc005c2b893 (Aravind Venkateswaran         2014-10-30 15:03:45 -0700 2306) 		ret = mdss_fb_blank_blank(mfd, req_power_state);
fbcc005c2b893 (Aravind Venkateswaran         2014-10-30 15:03:45 -0700 2307) 		break;
605c69f9b49c3 (Aravind Venkateswaran         2014-10-21 16:34:39 -0700 2308) 	case FB_BLANK_HSYNC_SUSPEND:
605c69f9b49c3 (Aravind Venkateswaran         2014-10-21 16:34:39 -0700 2309) 	case FB_BLANK_POWERDOWN:
605c69f9b49c3 (Aravind Venkateswaran         2014-10-21 16:34:39 -0700 2310) 	default:
fbcc005c2b893 (Aravind Venkateswaran         2014-10-30 15:03:45 -0700 2311) 		req_power_state = MDSS_PANEL_POWER_OFF;
fbcc005c2b893 (Aravind Venkateswaran         2014-10-30 15:03:45 -0700 2312) 		pr_debug("blank powerdown called\n");
fbcc005c2b893 (Aravind Venkateswaran         2014-10-30 15:03:45 -0700 2313) 		ret = mdss_fb_blank_blank(mfd, req_power_state);
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 2314) 		break;
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 2315) 	}
fbcc005c2b893 (Aravind Venkateswaran         2014-10-30 15:03:45 -0700 2316) 
79a3229066a20 (Naseer Ahmed                  2014-03-10 14:11:41 -0400 2317) 	/* Notify listeners */
79a3229066a20 (Naseer Ahmed                  2014-03-10 14:11:41 -0400 2318) 	sysfs_notify(&mfd->fbi->dev->kobj, NULL, "show_blank_event");
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 2319) 
64d037028cb92 (Ingrid Gallardo               2014-11-25 14:14:02 -0800 2320) 	ATRACE_END(trace_buffer);
be48303843a06 (SGCMarkus                     2019-07-09 09:54:59 +0200 2321) #if defined(CONFIG_LGE_DISPLAY_COMMON)
be48303843a06 (SGCMarkus                     2019-07-09 09:54:59 +0200 2322) 	if (mfd->recovery && blank_mode == FB_BLANK_UNBLANK) {
be48303843a06 (SGCMarkus                     2019-07-09 09:54:59 +0200 2323) 		mfd->recovery= false;
be48303843a06 (SGCMarkus                     2019-07-09 09:54:59 +0200 2324) 	}
be48303843a06 (SGCMarkus                     2019-07-09 09:54:59 +0200 2325) #endif
be48303843a06 (SGCMarkus                     2019-07-09 09:54:59 +0200 2326) 	pr_err("%s: -\n",__func__);
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 2327) 	return ret;
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 2328) }
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 2329) 
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 2330) static int mdss_fb_blank(int blank_mode, struct fb_info *info)
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 2331) {
26bebe99120eb (Ujwal Patel                   2015-04-22 14:51:12 -0700 2332) 	int ret;
41211cdb1fff1 (Sandeep Panda                 2014-04-09 17:15:37 +0530 2333) 	struct mdss_panel_data *pdata;
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 2334) 	struct msm_fb_data_type *mfd = (struct msm_fb_data_type *)info->par;
4143d685fd243 (Shalabh Jain                  2013-05-01 11:46:51 -0700 2335) 
26bebe99120eb (Ujwal Patel                   2015-04-22 14:51:12 -0700 2336) 	ret = mdss_fb_pan_idle(mfd);
26bebe99120eb (Ujwal Patel                   2015-04-22 14:51:12 -0700 2337) 	if (ret) {
26bebe99120eb (Ujwal Patel                   2015-04-22 14:51:12 -0700 2338) 		pr_warn("mdss_fb_pan_idle for fb%d failed. ret=%d\n",
26bebe99120eb (Ujwal Patel                   2015-04-22 14:51:12 -0700 2339) 			mfd->index, ret);
26bebe99120eb (Ujwal Patel                   2015-04-22 14:51:12 -0700 2340) 		return ret;
26bebe99120eb (Ujwal Patel                   2015-04-22 14:51:12 -0700 2341) 	}
26bebe99120eb (Ujwal Patel                   2015-04-22 14:51:12 -0700 2342) 
e6819350df123 (Yahui Wang                    2016-12-12 15:50:38 +0800 2343) 	mutex_lock(&mfd->mdss_sysfs_lock);
e6819350df123 (Yahui Wang                    2016-12-12 15:50:38 +0800 2344) 
44c43360e7e08 (Ken Zhang                     2012-12-12 17:49:04 -0500 2345) 	if (mfd->op_enable == 0) {
44c43360e7e08 (Ken Zhang                     2012-12-12 17:49:04 -0500 2346) 		if (blank_mode == FB_BLANK_UNBLANK)
b9095befda98a (Aravind Venkateswaran         2014-07-28 23:24:46 -0700 2347) 			mfd->suspend.panel_power_state = MDSS_PANEL_POWER_ON;
fbcc005c2b893 (Aravind Venkateswaran         2014-10-30 15:03:45 -0700 2348) 		else if (blank_mode == BLANK_FLAG_ULP)
fbcc005c2b893 (Aravind Venkateswaran         2014-10-30 15:03:45 -0700 2349) 			mfd->suspend.panel_power_state = MDSS_PANEL_POWER_LP2;
fbcc005c2b893 (Aravind Venkateswaran         2014-10-30 15:03:45 -0700 2350) 		else if (blank_mode == BLANK_FLAG_LP)
fbcc005c2b893 (Aravind Venkateswaran         2014-10-30 15:03:45 -0700 2351) 			mfd->suspend.panel_power_state = MDSS_PANEL_POWER_LP1;
44c43360e7e08 (Ken Zhang                     2012-12-12 17:49:04 -0500 2352) 		else
b9095befda98a (Aravind Venkateswaran         2014-07-28 23:24:46 -0700 2353) 			mfd->suspend.panel_power_state = MDSS_PANEL_POWER_OFF;
e6819350df123 (Yahui Wang                    2016-12-12 15:50:38 +0800 2354) 
e6819350df123 (Yahui Wang                    2016-12-12 15:50:38 +0800 2355) 		ret = 0;
e6819350df123 (Yahui Wang                    2016-12-12 15:50:38 +0800 2356) 		goto end;
44c43360e7e08 (Ken Zhang                     2012-12-12 17:49:04 -0500 2357) 	}
41211cdb1fff1 (Sandeep Panda                 2014-04-09 17:15:37 +0530 2358) 	pr_debug("mode: %d\n", blank_mode);
41211cdb1fff1 (Sandeep Panda                 2014-04-09 17:15:37 +0530 2359) 
41211cdb1fff1 (Sandeep Panda                 2014-04-09 17:15:37 +0530 2360) 	pdata = dev_get_platdata(&mfd->pdev->dev);
41211cdb1fff1 (Sandeep Panda                 2014-04-09 17:15:37 +0530 2361) 
41211cdb1fff1 (Sandeep Panda                 2014-04-09 17:15:37 +0530 2362) 	if (pdata->panel_info.is_lpm_mode &&
41211cdb1fff1 (Sandeep Panda                 2014-04-09 17:15:37 +0530 2363) 			blank_mode == FB_BLANK_UNBLANK) {
41211cdb1fff1 (Sandeep Panda                 2014-04-09 17:15:37 +0530 2364) 		pr_debug("panel is in lpm mode\n");
07930a15004de (Terence Hampson               2015-01-21 13:36:24 -0500 2365) 		mfd->mdp.configure_panel(mfd, 0, 1);
07930a15004de (Terence Hampson               2015-01-21 13:36:24 -0500 2366) 		mdss_fb_set_mdp_sync_pt_threshold(mfd, mfd->panel.type);
41211cdb1fff1 (Sandeep Panda                 2014-04-09 17:15:37 +0530 2367) 		pdata->panel_info.is_lpm_mode = false;
41211cdb1fff1 (Sandeep Panda                 2014-04-09 17:15:37 +0530 2368) 	}
41211cdb1fff1 (Sandeep Panda                 2014-04-09 17:15:37 +0530 2369) 
3829ba593ddc0 (Ingrid Gallardo               2016-07-27 16:53:08 -0700 2370) 	if (pdata->panel_disable_mode)
3829ba593ddc0 (Ingrid Gallardo               2016-07-27 16:53:08 -0700 2371) 		mdss_mdp_enable_panel_disable_mode(mfd, false);
3829ba593ddc0 (Ingrid Gallardo               2016-07-27 16:53:08 -0700 2372) 
e6819350df123 (Yahui Wang                    2016-12-12 15:50:38 +0800 2373) 	ret = mdss_fb_blank_sub(blank_mode, info, mfd->op_enable);
dc897f9c11d35 (Raviteja Tamatam              2017-03-21 14:33:01 +0530 2374) 	MDSS_XLOG(blank_mode);
e6819350df123 (Yahui Wang                    2016-12-12 15:50:38 +0800 2375) 
e6819350df123 (Yahui Wang                    2016-12-12 15:50:38 +0800 2376) end:
e6819350df123 (Yahui Wang                    2016-12-12 15:50:38 +0800 2377) 	mutex_unlock(&mfd->mdss_sysfs_lock);
e6819350df123 (Yahui Wang                    2016-12-12 15:50:38 +0800 2378) 
e6819350df123 (Yahui Wang                    2016-12-12 15:50:38 +0800 2379) 	return ret;
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 2380) }
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 2381) 
01ea04c62e5cf (Jeevan Shriram                2014-03-26 19:47:49 -0700 2382) static inline int mdss_fb_create_ion_client(struct msm_fb_data_type *mfd)
01ea04c62e5cf (Jeevan Shriram                2014-03-26 19:47:49 -0700 2383) {
be0764f9509ef (Mitchel Humpherys             2014-04-29 11:02:14 -0700 2384) 	mfd->fb_ion_client  = msm_ion_client_create("mdss_fb_iclient");
01ea04c62e5cf (Jeevan Shriram                2014-03-26 19:47:49 -0700 2385) 	if (IS_ERR_OR_NULL(mfd->fb_ion_client)) {
01ea04c62e5cf (Jeevan Shriram                2014-03-26 19:47:49 -0700 2386) 		pr_err("Err:client not created, val %d\n",
01ea04c62e5cf (Jeevan Shriram                2014-03-26 19:47:49 -0700 2387) 				PTR_RET(mfd->fb_ion_client));
01ea04c62e5cf (Jeevan Shriram                2014-03-26 19:47:49 -0700 2388) 		mfd->fb_ion_client = NULL;
01ea04c62e5cf (Jeevan Shriram                2014-03-26 19:47:49 -0700 2389) 		return PTR_RET(mfd->fb_ion_client);
01ea04c62e5cf (Jeevan Shriram                2014-03-26 19:47:49 -0700 2390) 	}
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 2391) 	return 0;
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 2392) }
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 2393) 
01ea04c62e5cf (Jeevan Shriram                2014-03-26 19:47:49 -0700 2394) void mdss_fb_free_fb_ion_memory(struct msm_fb_data_type *mfd)
01ea04c62e5cf (Jeevan Shriram                2014-03-26 19:47:49 -0700 2395) {
01ea04c62e5cf (Jeevan Shriram                2014-03-26 19:47:49 -0700 2396) 	if (!mfd) {
01ea04c62e5cf (Jeevan Shriram                2014-03-26 19:47:49 -0700 2397) 		pr_err("no mfd\n");
01ea04c62e5cf (Jeevan Shriram                2014-03-26 19:47:49 -0700 2398) 		return;
01ea04c62e5cf (Jeevan Shriram                2014-03-26 19:47:49 -0700 2399) 	}
01ea04c62e5cf (Jeevan Shriram                2014-03-26 19:47:49 -0700 2400) 
01ea04c62e5cf (Jeevan Shriram                2014-03-26 19:47:49 -0700 2401) 	if (!mfd->fbi->screen_base)
01ea04c62e5cf (Jeevan Shriram                2014-03-26 19:47:49 -0700 2402) 		return;
01ea04c62e5cf (Jeevan Shriram                2014-03-26 19:47:49 -0700 2403) 
01ea04c62e5cf (Jeevan Shriram                2014-03-26 19:47:49 -0700 2404) 	if (!mfd->fb_ion_client || !mfd->fb_ion_handle) {
01ea04c62e5cf (Jeevan Shriram                2014-03-26 19:47:49 -0700 2405) 		pr_err("invalid input parameters for fb%d\n", mfd->index);
01ea04c62e5cf (Jeevan Shriram                2014-03-26 19:47:49 -0700 2406) 		return;
01ea04c62e5cf (Jeevan Shriram                2014-03-26 19:47:49 -0700 2407) 	}
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 2408) 
01ea04c62e5cf (Jeevan Shriram                2014-03-26 19:47:49 -0700 2409) 	mfd->fbi->screen_base = NULL;
bb508cc57e30b (Jeevan Shriram                2014-06-04 06:32:08 -0700 2410) 	mfd->fbi->fix.smem_start = 0;
01ea04c62e5cf (Jeevan Shriram                2014-03-26 19:47:49 -0700 2411) 
01ea04c62e5cf (Jeevan Shriram                2014-03-26 19:47:49 -0700 2412) 	ion_unmap_kernel(mfd->fb_ion_client, mfd->fb_ion_handle);
01ea04c62e5cf (Jeevan Shriram                2014-03-26 19:47:49 -0700 2413) 
aa9bc41df39a1 (Ping Li                       2016-04-15 16:54:21 -0700 2414) 	if (mfd->mdp.fb_mem_get_iommu_domain && !(!mfd->fb_attachment ||
aa9bc41df39a1 (Ping Li                       2016-04-15 16:54:21 -0700 2415) 		!mfd->fb_attachment->dmabuf ||
aa9bc41df39a1 (Ping Li                       2016-04-15 16:54:21 -0700 2416) 		!mfd->fb_attachment->dmabuf->ops)) {
2b0ce3331c94c (Terence Hampson               2014-09-05 10:34:11 -0400 2417) 		dma_buf_unmap_attachment(mfd->fb_attachment, mfd->fb_table,
ce2af4cff4d90 (Veera Sundaram Sankaran       2014-10-22 10:28:34 -0700 2418) 				DMA_BIDIRECTIONAL);
2b0ce3331c94c (Terence Hampson               2014-09-05 10:34:11 -0400 2419) 		dma_buf_detach(mfd->fbmem_buf, mfd->fb_attachment);
2b0ce3331c94c (Terence Hampson               2014-09-05 10:34:11 -0400 2420) 		dma_buf_put(mfd->fbmem_buf);
01ea04c62e5cf (Jeevan Shriram                2014-03-26 19:47:49 -0700 2421) 	}
01ea04c62e5cf (Jeevan Shriram                2014-03-26 19:47:49 -0700 2422) 
01ea04c62e5cf (Jeevan Shriram                2014-03-26 19:47:49 -0700 2423) 	ion_free(mfd->fb_ion_client, mfd->fb_ion_handle);
915c2f85a0db0 (Jeevan Shriram                2014-04-28 18:04:07 -0700 2424) 	mfd->fb_ion_handle = NULL;
ca7626f43c834 (Veera Sundaram Sankaran       2015-09-24 18:09:23 -0700 2425) 	mfd->fbmem_buf = NULL;
01ea04c62e5cf (Jeevan Shriram                2014-03-26 19:47:49 -0700 2426) }
01ea04c62e5cf (Jeevan Shriram                2014-03-26 19:47:49 -0700 2427) 
915c2f85a0db0 (Jeevan Shriram                2014-04-28 18:04:07 -0700 2428) int mdss_fb_alloc_fb_ion_memory(struct msm_fb_data_type *mfd, size_t fb_size)
7be668f2c0131 (Huaibin Yang                  2013-04-29 16:56:24 -0700 2429) {
be23185307077 (Adrian Salido-Moreno          2016-04-06 09:29:37 -0700 2430) 	int rc = 0;
01ea04c62e5cf (Jeevan Shriram                2014-03-26 19:47:49 -0700 2431) 	void *vaddr;
ce2af4cff4d90 (Veera Sundaram Sankaran       2014-10-22 10:28:34 -0700 2432) 	int domain;
7be668f2c0131 (Huaibin Yang                  2013-04-29 16:56:24 -0700 2433) 
01ea04c62e5cf (Jeevan Shriram                2014-03-26 19:47:49 -0700 2434) 	if (!mfd) {
5f1c60463e9eb (Dhaval Patel                  2014-07-11 15:09:12 -0700 2435) 		pr_err("Invalid input param - no mfd\n");
01ea04c62e5cf (Jeevan Shriram                2014-03-26 19:47:49 -0700 2436) 		return -EINVAL;
7be668f2c0131 (Huaibin Yang                  2013-04-29 16:56:24 -0700 2437) 	}
7be668f2c0131 (Huaibin Yang                  2013-04-29 16:56:24 -0700 2438) 
01ea04c62e5cf (Jeevan Shriram                2014-03-26 19:47:49 -0700 2439) 	if (!mfd->fb_ion_client) {
01ea04c62e5cf (Jeevan Shriram                2014-03-26 19:47:49 -0700 2440) 		rc = mdss_fb_create_ion_client(mfd);
01ea04c62e5cf (Jeevan Shriram                2014-03-26 19:47:49 -0700 2441) 		if (rc < 0) {
01ea04c62e5cf (Jeevan Shriram                2014-03-26 19:47:49 -0700 2442) 			pr_err("fb ion client couldn't be created - %d\n", rc);
01ea04c62e5cf (Jeevan Shriram                2014-03-26 19:47:49 -0700 2443) 			return rc;
01ea04c62e5cf (Jeevan Shriram                2014-03-26 19:47:49 -0700 2444) 		}
01ea04c62e5cf (Jeevan Shriram                2014-03-26 19:47:49 -0700 2445) 	}
01ea04c62e5cf (Jeevan Shriram                2014-03-26 19:47:49 -0700 2446) 
5f1c60463e9eb (Dhaval Patel                  2014-07-11 15:09:12 -0700 2447) 	pr_debug("size for mmap = %zu\n", fb_size);
915c2f85a0db0 (Jeevan Shriram                2014-04-28 18:04:07 -0700 2448) 	mfd->fb_ion_handle = ion_alloc(mfd->fb_ion_client, fb_size, SZ_4K,
01ea04c62e5cf (Jeevan Shriram                2014-03-26 19:47:49 -0700 2449) 			ION_HEAP(ION_SYSTEM_HEAP_ID), 0);
01ea04c62e5cf (Jeevan Shriram                2014-03-26 19:47:49 -0700 2450) 	if (IS_ERR_OR_NULL(mfd->fb_ion_handle)) {
01ea04c62e5cf (Jeevan Shriram                2014-03-26 19:47:49 -0700 2451) 		pr_err("unable to alloc fbmem from ion - %ld\n",
01ea04c62e5cf (Jeevan Shriram                2014-03-26 19:47:49 -0700 2452) 				PTR_ERR(mfd->fb_ion_handle));
01ea04c62e5cf (Jeevan Shriram                2014-03-26 19:47:49 -0700 2453) 		return PTR_ERR(mfd->fb_ion_handle);
01ea04c62e5cf (Jeevan Shriram                2014-03-26 19:47:49 -0700 2454) 	}
01ea04c62e5cf (Jeevan Shriram                2014-03-26 19:47:49 -0700 2455) 
01ea04c62e5cf (Jeevan Shriram                2014-03-26 19:47:49 -0700 2456) 	if (mfd->mdp.fb_mem_get_iommu_domain) {
2b0ce3331c94c (Terence Hampson               2014-09-05 10:34:11 -0400 2457) 		mfd->fbmem_buf = ion_share_dma_buf(mfd->fb_ion_client,
2b0ce3331c94c (Terence Hampson               2014-09-05 10:34:11 -0400 2458) 							mfd->fb_ion_handle);
2b0ce3331c94c (Terence Hampson               2014-09-05 10:34:11 -0400 2459) 		if (IS_ERR(mfd->fbmem_buf)) {
2b0ce3331c94c (Terence Hampson               2014-09-05 10:34:11 -0400 2460) 			rc = PTR_ERR(mfd->fbmem_buf);
2b0ce3331c94c (Terence Hampson               2014-09-05 10:34:11 -0400 2461) 			goto fb_mmap_failed;
2b0ce3331c94c (Terence Hampson               2014-09-05 10:34:11 -0400 2462) 		}
2b0ce3331c94c (Terence Hampson               2014-09-05 10:34:11 -0400 2463) 
ce2af4cff4d90 (Veera Sundaram Sankaran       2014-10-22 10:28:34 -0700 2464) 		domain = mfd->mdp.fb_mem_get_iommu_domain();
ce2af4cff4d90 (Veera Sundaram Sankaran       2014-10-22 10:28:34 -0700 2465) 
ce2af4cff4d90 (Veera Sundaram Sankaran       2014-10-22 10:28:34 -0700 2466) 		mfd->fb_attachment = mdss_smmu_dma_buf_attach(mfd->fbmem_buf,
ce2af4cff4d90 (Veera Sundaram Sankaran       2014-10-22 10:28:34 -0700 2467) 				&mfd->pdev->dev, domain);
2b0ce3331c94c (Terence Hampson               2014-09-05 10:34:11 -0400 2468) 		if (IS_ERR(mfd->fb_attachment)) {
2b0ce3331c94c (Terence Hampson               2014-09-05 10:34:11 -0400 2469) 			rc = PTR_ERR(mfd->fb_attachment);
2b0ce3331c94c (Terence Hampson               2014-09-05 10:34:11 -0400 2470) 			goto err_put;
2b0ce3331c94c (Terence Hampson               2014-09-05 10:34:11 -0400 2471) 		}
2b0ce3331c94c (Terence Hampson               2014-09-05 10:34:11 -0400 2472) 
2b0ce3331c94c (Terence Hampson               2014-09-05 10:34:11 -0400 2473) 		mfd->fb_table = dma_buf_map_attachment(mfd->fb_attachment,
ce2af4cff4d90 (Veera Sundaram Sankaran       2014-10-22 10:28:34 -0700 2474) 				DMA_BIDIRECTIONAL);
2b0ce3331c94c (Terence Hampson               2014-09-05 10:34:11 -0400 2475) 		if (IS_ERR(mfd->fb_table)) {
2b0ce3331c94c (Terence Hampson               2014-09-05 10:34:11 -0400 2476) 			rc = PTR_ERR(mfd->fb_table);
2b0ce3331c94c (Terence Hampson               2014-09-05 10:34:11 -0400 2477) 			goto err_detach;
2b0ce3331c94c (Terence Hampson               2014-09-05 10:34:11 -0400 2478) 		}
d8998364c926c (Ujwal Patel                   2013-08-12 10:58:47 -0700 2479) 	} else {
5f1c60463e9eb (Dhaval Patel                  2014-07-11 15:09:12 -0700 2480) 		pr_err("No IOMMU Domain\n");
ecfab603f9dce (Dhaval Patel                  2015-03-23 22:29:02 -0700 2481) 		rc = -EINVAL;
01ea04c62e5cf (Jeevan Shriram                2014-03-26 19:47:49 -0700 2482) 		goto fb_mmap_failed;
01ea04c62e5cf (Jeevan Shriram                2014-03-26 19:47:49 -0700 2483) 	}
01ea04c62e5cf (Jeevan Shriram                2014-03-26 19:47:49 -0700 2484) 
01ea04c62e5cf (Jeevan Shriram                2014-03-26 19:47:49 -0700 2485) 	vaddr  = ion_map_kernel(mfd->fb_ion_client, mfd->fb_ion_handle);
01ea04c62e5cf (Jeevan Shriram                2014-03-26 19:47:49 -0700 2486) 	if (IS_ERR_OR_NULL(vaddr)) {
01ea04c62e5cf (Jeevan Shriram                2014-03-26 19:47:49 -0700 2487) 		pr_err("ION memory mapping failed - %ld\n", PTR_ERR(vaddr));
01ea04c62e5cf (Jeevan Shriram                2014-03-26 19:47:49 -0700 2488) 		rc = PTR_ERR(vaddr);
ce2af4cff4d90 (Veera Sundaram Sankaran       2014-10-22 10:28:34 -0700 2489) 		goto err_unmap;
7be668f2c0131 (Huaibin Yang                  2013-04-29 16:56:24 -0700 2490) 	}
668252dbaee73 (Abhijit Kulkarni              2016-06-15 10:30:50 -0700 2491) 	pr_debug("alloc %zuB vaddr = %pK for fb%d\n", fb_size,
56f473ee353d0 (Veera Sundaram Sankaran       2015-06-19 16:35:58 -0700 2492) 			vaddr, mfd->index);
7be668f2c0131 (Huaibin Yang                  2013-04-29 16:56:24 -0700 2493) 
01ea04c62e5cf (Jeevan Shriram                2014-03-26 19:47:49 -0700 2494) 	mfd->fbi->screen_base = (char *) vaddr;
915c2f85a0db0 (Jeevan Shriram                2014-04-28 18:04:07 -0700 2495) 	mfd->fbi->fix.smem_len = fb_size;
7be668f2c0131 (Huaibin Yang                  2013-04-29 16:56:24 -0700 2496) 
01ea04c62e5cf (Jeevan Shriram                2014-03-26 19:47:49 -0700 2497) 	return rc;
01ea04c62e5cf (Jeevan Shriram                2014-03-26 19:47:49 -0700 2498) 
2b0ce3331c94c (Terence Hampson               2014-09-05 10:34:11 -0400 2499) err_unmap:
2b0ce3331c94c (Terence Hampson               2014-09-05 10:34:11 -0400 2500) 	dma_buf_unmap_attachment(mfd->fb_attachment, mfd->fb_table,
2b0ce3331c94c (Terence Hampson               2014-09-05 10:34:11 -0400 2501) 					DMA_BIDIRECTIONAL);
2b0ce3331c94c (Terence Hampson               2014-09-05 10:34:11 -0400 2502) err_detach:
2b0ce3331c94c (Terence Hampson               2014-09-05 10:34:11 -0400 2503) 	dma_buf_detach(mfd->fbmem_buf, mfd->fb_attachment);
2b0ce3331c94c (Terence Hampson               2014-09-05 10:34:11 -0400 2504) err_put:
2b0ce3331c94c (Terence Hampson               2014-09-05 10:34:11 -0400 2505) 	dma_buf_put(mfd->fbmem_buf);
01ea04c62e5cf (Jeevan Shriram                2014-03-26 19:47:49 -0700 2506) fb_mmap_failed:
01ea04c62e5cf (Jeevan Shriram                2014-03-26 19:47:49 -0700 2507) 	ion_free(mfd->fb_ion_client, mfd->fb_ion_handle);
e5eb0d3aa6fe6 (Benjamin Chan                 2016-12-15 13:46:42 -0500 2508) 	mfd->fb_attachment = NULL;
e5eb0d3aa6fe6 (Benjamin Chan                 2016-12-15 13:46:42 -0500 2509) 	mfd->fb_table = NULL;
e5eb0d3aa6fe6 (Benjamin Chan                 2016-12-15 13:46:42 -0500 2510) 	mfd->fb_ion_handle = NULL;
e5eb0d3aa6fe6 (Benjamin Chan                 2016-12-15 13:46:42 -0500 2511) 	mfd->fbmem_buf = NULL;
01ea04c62e5cf (Jeevan Shriram                2014-03-26 19:47:49 -0700 2512) 	return rc;
01ea04c62e5cf (Jeevan Shriram                2014-03-26 19:47:49 -0700 2513) }
01ea04c62e5cf (Jeevan Shriram                2014-03-26 19:47:49 -0700 2514) 
01ea04c62e5cf (Jeevan Shriram                2014-03-26 19:47:49 -0700 2515) /**
01ea04c62e5cf (Jeevan Shriram                2014-03-26 19:47:49 -0700 2516)  * mdss_fb_fbmem_ion_mmap() -  Custom fb  mmap() function for MSM driver.
01ea04c62e5cf (Jeevan Shriram                2014-03-26 19:47:49 -0700 2517)  *
01ea04c62e5cf (Jeevan Shriram                2014-03-26 19:47:49 -0700 2518)  * @info -  Framebuffer info.
01ea04c62e5cf (Jeevan Shriram                2014-03-26 19:47:49 -0700 2519)  * @vma  -  VM area which is part of the process virtual memory.
01ea04c62e5cf (Jeevan Shriram                2014-03-26 19:47:49 -0700 2520)  *
01ea04c62e5cf (Jeevan Shriram                2014-03-26 19:47:49 -0700 2521)  * This framebuffer mmap function differs from standard mmap() function by
01ea04c62e5cf (Jeevan Shriram                2014-03-26 19:47:49 -0700 2522)  * allowing for customized page-protection and dynamically allocate framebuffer
01ea04c62e5cf (Jeevan Shriram                2014-03-26 19:47:49 -0700 2523)  * memory from system heap and map to iommu virtual address.
01ea04c62e5cf (Jeevan Shriram                2014-03-26 19:47:49 -0700 2524)  *
01ea04c62e5cf (Jeevan Shriram                2014-03-26 19:47:49 -0700 2525)  * Return: virtual address is returned through vma
01ea04c62e5cf (Jeevan Shriram                2014-03-26 19:47:49 -0700 2526)  */
01ea04c62e5cf (Jeevan Shriram                2014-03-26 19:47:49 -0700 2527) static int mdss_fb_fbmem_ion_mmap(struct fb_info *info,
01ea04c62e5cf (Jeevan Shriram                2014-03-26 19:47:49 -0700 2528) 		struct vm_area_struct *vma)
01ea04c62e5cf (Jeevan Shriram                2014-03-26 19:47:49 -0700 2529) {
01ea04c62e5cf (Jeevan Shriram                2014-03-26 19:47:49 -0700 2530) 	int rc = 0;
01ea04c62e5cf (Jeevan Shriram                2014-03-26 19:47:49 -0700 2531) 	size_t req_size, fb_size;
01ea04c62e5cf (Jeevan Shriram                2014-03-26 19:47:49 -0700 2532) 	struct msm_fb_data_type *mfd = (struct msm_fb_data_type *)info->par;
01ea04c62e5cf (Jeevan Shriram                2014-03-26 19:47:49 -0700 2533) 	struct sg_table *table;
01ea04c62e5cf (Jeevan Shriram                2014-03-26 19:47:49 -0700 2534) 	unsigned long addr = vma->vm_start;
01ea04c62e5cf (Jeevan Shriram                2014-03-26 19:47:49 -0700 2535) 	unsigned long offset = vma->vm_pgoff * PAGE_SIZE;
01ea04c62e5cf (Jeevan Shriram                2014-03-26 19:47:49 -0700 2536) 	struct scatterlist *sg;
01ea04c62e5cf (Jeevan Shriram                2014-03-26 19:47:49 -0700 2537) 	unsigned int i;
01ea04c62e5cf (Jeevan Shriram                2014-03-26 19:47:49 -0700 2538) 	struct page *page;
01ea04c62e5cf (Jeevan Shriram                2014-03-26 19:47:49 -0700 2539) 
01ea04c62e5cf (Jeevan Shriram                2014-03-26 19:47:49 -0700 2540) 	if (!mfd || !mfd->pdev || !mfd->pdev->dev.of_node) {
01ea04c62e5cf (Jeevan Shriram                2014-03-26 19:47:49 -0700 2541) 		pr_err("Invalid device node\n");
01ea04c62e5cf (Jeevan Shriram                2014-03-26 19:47:49 -0700 2542) 		return -ENODEV;
7be668f2c0131 (Huaibin Yang                  2013-04-29 16:56:24 -0700 2543) 	}
7be668f2c0131 (Huaibin Yang                  2013-04-29 16:56:24 -0700 2544) 
01ea04c62e5cf (Jeevan Shriram                2014-03-26 19:47:49 -0700 2545) 	req_size = vma->vm_end - vma->vm_start;
87f3edd4381cd (Jeevan Shriram                2014-06-25 11:12:40 -0700 2546) 	fb_size = mfd->fbi->fix.smem_len;
01ea04c62e5cf (Jeevan Shriram                2014-03-26 19:47:49 -0700 2547) 	if (req_size > fb_size) {
5f1c60463e9eb (Dhaval Patel                  2014-07-11 15:09:12 -0700 2548) 		pr_warn("requested map is greater than framebuffer\n");
01ea04c62e5cf (Jeevan Shriram                2014-03-26 19:47:49 -0700 2549) 		return -EOVERFLOW;
5d546aa4e1fad (Ujwal Patel                   2013-08-02 17:35:52 -0700 2550) 	}
7be668f2c0131 (Huaibin Yang                  2013-04-29 16:56:24 -0700 2551) 
01ea04c62e5cf (Jeevan Shriram                2014-03-26 19:47:49 -0700 2552) 	if (!mfd->fbi->screen_base) {
915c2f85a0db0 (Jeevan Shriram                2014-04-28 18:04:07 -0700 2553) 		rc = mdss_fb_alloc_fb_ion_memory(mfd, fb_size);
01ea04c62e5cf (Jeevan Shriram                2014-03-26 19:47:49 -0700 2554) 		if (rc < 0) {
5f1c60463e9eb (Dhaval Patel                  2014-07-11 15:09:12 -0700 2555) 			pr_err("fb mmap failed!!!!\n");
01ea04c62e5cf (Jeevan Shriram                2014-03-26 19:47:49 -0700 2556) 			return rc;
01ea04c62e5cf (Jeevan Shriram                2014-03-26 19:47:49 -0700 2557) 		}
01ea04c62e5cf (Jeevan Shriram                2014-03-26 19:47:49 -0700 2558) 	}
5d546aa4e1fad (Ujwal Patel                   2013-08-02 17:35:52 -0700 2559) 
2b0ce3331c94c (Terence Hampson               2014-09-05 10:34:11 -0400 2560) 	table = mfd->fb_table;
01ea04c62e5cf (Jeevan Shriram                2014-03-26 19:47:49 -0700 2561) 	if (IS_ERR(table)) {
01ea04c62e5cf (Jeevan Shriram                2014-03-26 19:47:49 -0700 2562) 		pr_err("Unable to get sg_table from ion:%ld\n", PTR_ERR(table));
01ea04c62e5cf (Jeevan Shriram                2014-03-26 19:47:49 -0700 2563) 		mfd->fbi->screen_base = NULL;
01ea04c62e5cf (Jeevan Shriram                2014-03-26 19:47:49 -0700 2564) 		return PTR_ERR(table);
01ea04c62e5cf (Jeevan Shriram                2014-03-26 19:47:49 -0700 2565) 	} else if (!table) {
01ea04c62e5cf (Jeevan Shriram                2014-03-26 19:47:49 -0700 2566) 		pr_err("sg_list is NULL\n");
01ea04c62e5cf (Jeevan Shriram                2014-03-26 19:47:49 -0700 2567) 		mfd->fbi->screen_base = NULL;
01ea04c62e5cf (Jeevan Shriram                2014-03-26 19:47:49 -0700 2568) 		return -EINVAL;
01ea04c62e5cf (Jeevan Shriram                2014-03-26 19:47:49 -0700 2569) 	}
7be668f2c0131 (Huaibin Yang                  2013-04-29 16:56:24 -0700 2570) 
01ea04c62e5cf (Jeevan Shriram                2014-03-26 19:47:49 -0700 2571) 	page = sg_page(table->sgl);
01ea04c62e5cf (Jeevan Shriram                2014-03-26 19:47:49 -0700 2572) 	if (page) {
01ea04c62e5cf (Jeevan Shriram                2014-03-26 19:47:49 -0700 2573) 		for_each_sg(table->sgl, sg, table->nents, i) {
01ea04c62e5cf (Jeevan Shriram                2014-03-26 19:47:49 -0700 2574) 			unsigned long remainder = vma->vm_end - addr;
41dff92a6300f (Jeevan Shriram                2014-09-02 17:13:22 -0700 2575) 			unsigned long len = sg->length;
01ea04c62e5cf (Jeevan Shriram                2014-03-26 19:47:49 -0700 2576) 
01ea04c62e5cf (Jeevan Shriram                2014-03-26 19:47:49 -0700 2577) 			page = sg_page(sg);
01ea04c62e5cf (Jeevan Shriram                2014-03-26 19:47:49 -0700 2578) 
41dff92a6300f (Jeevan Shriram                2014-09-02 17:13:22 -0700 2579) 			if (offset >= sg->length) {
41dff92a6300f (Jeevan Shriram                2014-09-02 17:13:22 -0700 2580) 				offset -= sg->length;
01ea04c62e5cf (Jeevan Shriram                2014-03-26 19:47:49 -0700 2581) 				continue;
01ea04c62e5cf (Jeevan Shriram                2014-03-26 19:47:49 -0700 2582) 			} else if (offset) {
01ea04c62e5cf (Jeevan Shriram                2014-03-26 19:47:49 -0700 2583) 				page += offset / PAGE_SIZE;
41dff92a6300f (Jeevan Shriram                2014-09-02 17:13:22 -0700 2584) 				len = sg->length - offset;
01ea04c62e5cf (Jeevan Shriram                2014-03-26 19:47:49 -0700 2585) 				offset = 0;
01ea04c62e5cf (Jeevan Shriram                2014-03-26 19:47:49 -0700 2586) 			}
01ea04c62e5cf (Jeevan Shriram                2014-03-26 19:47:49 -0700 2587) 			len = min(len, remainder);
01ea04c62e5cf (Jeevan Shriram                2014-03-26 19:47:49 -0700 2588) 
1a3d9ad996ffb (Jeevan Shriram                2014-06-05 00:41:35 -0700 2589) 			if (mfd->mdp_fb_page_protection ==
1a3d9ad996ffb (Jeevan Shriram                2014-06-05 00:41:35 -0700 2590) 					MDP_FB_PAGE_PROTECTION_WRITECOMBINE)
1a3d9ad996ffb (Jeevan Shriram                2014-06-05 00:41:35 -0700 2591) 				vma->vm_page_prot =
1a3d9ad996ffb (Jeevan Shriram                2014-06-05 00:41:35 -0700 2592) 					pgprot_writecombine(vma->vm_page_prot);
1a3d9ad996ffb (Jeevan Shriram                2014-06-05 00:41:35 -0700 2593) 
668252dbaee73 (Abhijit Kulkarni              2016-06-15 10:30:50 -0700 2594) 			pr_debug("vma=%pK, addr=%x len=%ld\n",
01ea04c62e5cf (Jeevan Shriram                2014-03-26 19:47:49 -0700 2595) 					vma, (unsigned int)addr, len);
bcba569a29831 (Mao Flynn                     2014-11-07 15:32:26 +0800 2596) 			pr_debug("vm_start=%x vm_end=%x vm_page_prot=%ld\n",
01ea04c62e5cf (Jeevan Shriram                2014-03-26 19:47:49 -0700 2597) 					(unsigned int)vma->vm_start,
01ea04c62e5cf (Jeevan Shriram                2014-03-26 19:47:49 -0700 2598) 					(unsigned int)vma->vm_end,
01ea04c62e5cf (Jeevan Shriram                2014-03-26 19:47:49 -0700 2599) 					(unsigned long int)vma->vm_page_prot);
01ea04c62e5cf (Jeevan Shriram                2014-03-26 19:47:49 -0700 2600) 
01ea04c62e5cf (Jeevan Shriram                2014-03-26 19:47:49 -0700 2601) 			io_remap_pfn_range(vma, addr, page_to_pfn(page), len,
01ea04c62e5cf (Jeevan Shriram                2014-03-26 19:47:49 -0700 2602) 					vma->vm_page_prot);
01ea04c62e5cf (Jeevan Shriram                2014-03-26 19:47:49 -0700 2603) 			addr += len;
01ea04c62e5cf (Jeevan Shriram                2014-03-26 19:47:49 -0700 2604) 			if (addr >= vma->vm_end)
01ea04c62e5cf (Jeevan Shriram                2014-03-26 19:47:49 -0700 2605) 				break;
01ea04c62e5cf (Jeevan Shriram                2014-03-26 19:47:49 -0700 2606) 		}
01ea04c62e5cf (Jeevan Shriram                2014-03-26 19:47:49 -0700 2607) 	} else {
01ea04c62e5cf (Jeevan Shriram                2014-03-26 19:47:49 -0700 2608) 		pr_err("PAGE is null\n");
01ea04c62e5cf (Jeevan Shriram                2014-03-26 19:47:49 -0700 2609) 		mdss_fb_free_fb_ion_memory(mfd);
01ea04c62e5cf (Jeevan Shriram                2014-03-26 19:47:49 -0700 2610) 		return -ENOMEM;
01ea04c62e5cf (Jeevan Shriram                2014-03-26 19:47:49 -0700 2611) 	}
7be668f2c0131 (Huaibin Yang                  2013-04-29 16:56:24 -0700 2612) 
01ea04c62e5cf (Jeevan Shriram                2014-03-26 19:47:49 -0700 2613) 	return rc;
7be668f2c0131 (Huaibin Yang                  2013-04-29 16:56:24 -0700 2614) }
7be668f2c0131 (Huaibin Yang                  2013-04-29 16:56:24 -0700 2615) 
915c2f85a0db0 (Jeevan Shriram                2014-04-28 18:04:07 -0700 2616) /*
915c2f85a0db0 (Jeevan Shriram                2014-04-28 18:04:07 -0700 2617)  * mdss_fb_physical_mmap() - Custom fb mmap() function for MSM driver.
915c2f85a0db0 (Jeevan Shriram                2014-04-28 18:04:07 -0700 2618)  *
915c2f85a0db0 (Jeevan Shriram                2014-04-28 18:04:07 -0700 2619)  * @info -  Framebuffer info.
915c2f85a0db0 (Jeevan Shriram                2014-04-28 18:04:07 -0700 2620)  * @vma  -  VM area which is part of the process virtual memory.
915c2f85a0db0 (Jeevan Shriram                2014-04-28 18:04:07 -0700 2621)  *
915c2f85a0db0 (Jeevan Shriram                2014-04-28 18:04:07 -0700 2622)  * This framebuffer mmap function differs from standard mmap() function as
915c2f85a0db0 (Jeevan Shriram                2014-04-28 18:04:07 -0700 2623)  * map to framebuffer memory from the CMA memory which is allocated during
915c2f85a0db0 (Jeevan Shriram                2014-04-28 18:04:07 -0700 2624)  * bootup.
915c2f85a0db0 (Jeevan Shriram                2014-04-28 18:04:07 -0700 2625)  *
915c2f85a0db0 (Jeevan Shriram                2014-04-28 18:04:07 -0700 2626)  * Return: virtual address is returned through vma
915c2f85a0db0 (Jeevan Shriram                2014-04-28 18:04:07 -0700 2627)  */
915c2f85a0db0 (Jeevan Shriram                2014-04-28 18:04:07 -0700 2628) static int mdss_fb_physical_mmap(struct fb_info *info,
915c2f85a0db0 (Jeevan Shriram                2014-04-28 18:04:07 -0700 2629) 		struct vm_area_struct *vma)
915c2f85a0db0 (Jeevan Shriram                2014-04-28 18:04:07 -0700 2630) {
915c2f85a0db0 (Jeevan Shriram                2014-04-28 18:04:07 -0700 2631) 	/* Get frame buffer memory range. */
915c2f85a0db0 (Jeevan Shriram                2014-04-28 18:04:07 -0700 2632) 	unsigned long start = info->fix.smem_start;
915c2f85a0db0 (Jeevan Shriram                2014-04-28 18:04:07 -0700 2633) 	u32 len = PAGE_ALIGN((start & ~PAGE_MASK) + info->fix.smem_len);
915c2f85a0db0 (Jeevan Shriram                2014-04-28 18:04:07 -0700 2634) 	unsigned long off = vma->vm_pgoff << PAGE_SHIFT;
1a3d9ad996ffb (Jeevan Shriram                2014-06-05 00:41:35 -0700 2635) 	struct msm_fb_data_type *mfd = (struct msm_fb_data_type *)info->par;
915c2f85a0db0 (Jeevan Shriram                2014-04-28 18:04:07 -0700 2636) 
915c2f85a0db0 (Jeevan Shriram                2014-04-28 18:04:07 -0700 2637) 	if (!start) {
915c2f85a0db0 (Jeevan Shriram                2014-04-28 18:04:07 -0700 2638) 		pr_warn("No framebuffer memory is allocated\n");
915c2f85a0db0 (Jeevan Shriram                2014-04-28 18:04:07 -0700 2639) 		return -ENOMEM;
915c2f85a0db0 (Jeevan Shriram                2014-04-28 18:04:07 -0700 2640) 	}
915c2f85a0db0 (Jeevan Shriram                2014-04-28 18:04:07 -0700 2641) 
915c2f85a0db0 (Jeevan Shriram                2014-04-28 18:04:07 -0700 2642) 	/* Set VM flags. */
915c2f85a0db0 (Jeevan Shriram                2014-04-28 18:04:07 -0700 2643) 	start &= PAGE_MASK;
915c2f85a0db0 (Jeevan Shriram                2014-04-28 18:04:07 -0700 2644) 	if ((vma->vm_end <= vma->vm_start) ||
1a3d9ad996ffb (Jeevan Shriram                2014-06-05 00:41:35 -0700 2645) 			(off >= len) ||
1a3d9ad996ffb (Jeevan Shriram                2014-06-05 00:41:35 -0700 2646) 			((vma->vm_end - vma->vm_start) > (len - off)))
915c2f85a0db0 (Jeevan Shriram                2014-04-28 18:04:07 -0700 2647) 		return -EINVAL;
915c2f85a0db0 (Jeevan Shriram                2014-04-28 18:04:07 -0700 2648) 	off += start;
915c2f85a0db0 (Jeevan Shriram                2014-04-28 18:04:07 -0700 2649) 	if (off < start)
915c2f85a0db0 (Jeevan Shriram                2014-04-28 18:04:07 -0700 2650) 		return -EINVAL;
915c2f85a0db0 (Jeevan Shriram                2014-04-28 18:04:07 -0700 2651) 	vma->vm_pgoff = off >> PAGE_SHIFT;
915c2f85a0db0 (Jeevan Shriram                2014-04-28 18:04:07 -0700 2652) 	/* This is an IO map - tell maydump to skip this VMA */
915c2f85a0db0 (Jeevan Shriram                2014-04-28 18:04:07 -0700 2653) 	vma->vm_flags |= VM_IO;
915c2f85a0db0 (Jeevan Shriram                2014-04-28 18:04:07 -0700 2654) 
1a3d9ad996ffb (Jeevan Shriram                2014-06-05 00:41:35 -0700 2655) 	if (mfd->mdp_fb_page_protection == MDP_FB_PAGE_PROTECTION_WRITECOMBINE)
1a3d9ad996ffb (Jeevan Shriram                2014-06-05 00:41:35 -0700 2656) 		vma->vm_page_prot = pgprot_writecombine(vma->vm_page_prot);
1a3d9ad996ffb (Jeevan Shriram                2014-06-05 00:41:35 -0700 2657) 
915c2f85a0db0 (Jeevan Shriram                2014-04-28 18:04:07 -0700 2658) 	/* Remap the frame buffer I/O range */
915c2f85a0db0 (Jeevan Shriram                2014-04-28 18:04:07 -0700 2659) 	if (io_remap_pfn_range(vma, vma->vm_start, off >> PAGE_SHIFT,
1a3d9ad996ffb (Jeevan Shriram                2014-06-05 00:41:35 -0700 2660) 				vma->vm_end - vma->vm_start,
1a3d9ad996ffb (Jeevan Shriram                2014-06-05 00:41:35 -0700 2661) 				vma->vm_page_prot))
915c2f85a0db0 (Jeevan Shriram                2014-04-28 18:04:07 -0700 2662) 		return -EAGAIN;
915c2f85a0db0 (Jeevan Shriram                2014-04-28 18:04:07 -0700 2663) 
915c2f85a0db0 (Jeevan Shriram                2014-04-28 18:04:07 -0700 2664) 	return 0;
915c2f85a0db0 (Jeevan Shriram                2014-04-28 18:04:07 -0700 2665) }
915c2f85a0db0 (Jeevan Shriram                2014-04-28 18:04:07 -0700 2666) 
915c2f85a0db0 (Jeevan Shriram                2014-04-28 18:04:07 -0700 2667) static int mdss_fb_mmap(struct fb_info *info, struct vm_area_struct *vma)
915c2f85a0db0 (Jeevan Shriram                2014-04-28 18:04:07 -0700 2668) {
915c2f85a0db0 (Jeevan Shriram                2014-04-28 18:04:07 -0700 2669) 	struct msm_fb_data_type *mfd = (struct msm_fb_data_type *)info->par;
bcba569a29831 (Mao Flynn                     2014-11-07 15:32:26 +0800 2670) 	int rc = -EINVAL;
915c2f85a0db0 (Jeevan Shriram                2014-04-28 18:04:07 -0700 2671) 
bcba569a29831 (Mao Flynn                     2014-11-07 15:32:26 +0800 2672) 	if (mfd->fb_mmap_type == MDP_FB_MMAP_ION_ALLOC) {
915c2f85a0db0 (Jeevan Shriram                2014-04-28 18:04:07 -0700 2673) 		rc = mdss_fb_fbmem_ion_mmap(info, vma);
bcba569a29831 (Mao Flynn                     2014-11-07 15:32:26 +0800 2674) 	} else if (mfd->fb_mmap_type == MDP_FB_MMAP_PHYSICAL_ALLOC) {
915c2f85a0db0 (Jeevan Shriram                2014-04-28 18:04:07 -0700 2675) 		rc = mdss_fb_physical_mmap(info, vma);
bcba569a29831 (Mao Flynn                     2014-11-07 15:32:26 +0800 2676) 	} else {
bcba569a29831 (Mao Flynn                     2014-11-07 15:32:26 +0800 2677) 		if (!info->fix.smem_start && !mfd->fb_ion_handle) {
bcba569a29831 (Mao Flynn                     2014-11-07 15:32:26 +0800 2678) 			rc = mdss_fb_fbmem_ion_mmap(info, vma);
bcba569a29831 (Mao Flynn                     2014-11-07 15:32:26 +0800 2679) 			mfd->fb_mmap_type = MDP_FB_MMAP_ION_ALLOC;
bcba569a29831 (Mao Flynn                     2014-11-07 15:32:26 +0800 2680) 		} else {
bcba569a29831 (Mao Flynn                     2014-11-07 15:32:26 +0800 2681) 			rc = mdss_fb_physical_mmap(info, vma);
bcba569a29831 (Mao Flynn                     2014-11-07 15:32:26 +0800 2682) 			mfd->fb_mmap_type = MDP_FB_MMAP_PHYSICAL_ALLOC;
bcba569a29831 (Mao Flynn                     2014-11-07 15:32:26 +0800 2683) 		}
bcba569a29831 (Mao Flynn                     2014-11-07 15:32:26 +0800 2684) 	}
915c2f85a0db0 (Jeevan Shriram                2014-04-28 18:04:07 -0700 2685) 	if (rc < 0)
5f1c60463e9eb (Dhaval Patel                  2014-07-11 15:09:12 -0700 2686) 		pr_err("fb mmap failed with rc = %d\n", rc);
915c2f85a0db0 (Jeevan Shriram                2014-04-28 18:04:07 -0700 2687) 
915c2f85a0db0 (Jeevan Shriram                2014-04-28 18:04:07 -0700 2688) 	return rc;
915c2f85a0db0 (Jeevan Shriram                2014-04-28 18:04:07 -0700 2689) }
915c2f85a0db0 (Jeevan Shriram                2014-04-28 18:04:07 -0700 2690) 
01ea04c62e5cf (Jeevan Shriram                2014-03-26 19:47:49 -0700 2691) static struct fb_ops mdss_fb_ops = {
01ea04c62e5cf (Jeevan Shriram                2014-03-26 19:47:49 -0700 2692) 	.owner = THIS_MODULE,
01ea04c62e5cf (Jeevan Shriram                2014-03-26 19:47:49 -0700 2693) 	.fb_open = mdss_fb_open,
01ea04c62e5cf (Jeevan Shriram                2014-03-26 19:47:49 -0700 2694) 	.fb_release = mdss_fb_release,
01ea04c62e5cf (Jeevan Shriram                2014-03-26 19:47:49 -0700 2695) 	.fb_check_var = mdss_fb_check_var,	/* vinfo check */
01ea04c62e5cf (Jeevan Shriram                2014-03-26 19:47:49 -0700 2696) 	.fb_set_par = mdss_fb_set_par,	/* set the video mode */
01ea04c62e5cf (Jeevan Shriram                2014-03-26 19:47:49 -0700 2697) 	.fb_blank = mdss_fb_blank,	/* blank display */
01ea04c62e5cf (Jeevan Shriram                2014-03-26 19:47:49 -0700 2698) 	.fb_pan_display = mdss_fb_pan_display,	/* pan display */
75af757c1b7ba (Dhaval Patel                  2015-11-04 14:01:09 -0800 2699) 	.fb_ioctl_v2 = mdss_fb_ioctl,	/* perform fb specific ioctl */
01ea04c62e5cf (Jeevan Shriram                2014-03-26 19:47:49 -0700 2700) #ifdef CONFIG_COMPAT
75af757c1b7ba (Dhaval Patel                  2015-11-04 14:01:09 -0800 2701) 	.fb_compat_ioctl_v2 = mdss_fb_compat_ioctl,
01ea04c62e5cf (Jeevan Shriram                2014-03-26 19:47:49 -0700 2702) #endif
915c2f85a0db0 (Jeevan Shriram                2014-04-28 18:04:07 -0700 2703) 	.fb_mmap = mdss_fb_mmap,
01ea04c62e5cf (Jeevan Shriram                2014-03-26 19:47:49 -0700 2704) };
01ea04c62e5cf (Jeevan Shriram                2014-03-26 19:47:49 -0700 2705) 
915c2f85a0db0 (Jeevan Shriram                2014-04-28 18:04:07 -0700 2706) static int mdss_fb_alloc_fbmem_iommu(struct msm_fb_data_type *mfd, int dom)
915c2f85a0db0 (Jeevan Shriram                2014-04-28 18:04:07 -0700 2707) {
915c2f85a0db0 (Jeevan Shriram                2014-04-28 18:04:07 -0700 2708) 	void *virt = NULL;
915c2f85a0db0 (Jeevan Shriram                2014-04-28 18:04:07 -0700 2709) 	phys_addr_t phys = 0;
915c2f85a0db0 (Jeevan Shriram                2014-04-28 18:04:07 -0700 2710) 	size_t size = 0;
915c2f85a0db0 (Jeevan Shriram                2014-04-28 18:04:07 -0700 2711) 	struct platform_device *pdev = mfd->pdev;
915c2f85a0db0 (Jeevan Shriram                2014-04-28 18:04:07 -0700 2712) 	int rc = 0;
915c2f85a0db0 (Jeevan Shriram                2014-04-28 18:04:07 -0700 2713) 	struct device_node *fbmem_pnode = NULL;
915c2f85a0db0 (Jeevan Shriram                2014-04-28 18:04:07 -0700 2714) 
915c2f85a0db0 (Jeevan Shriram                2014-04-28 18:04:07 -0700 2715) 	if (!pdev || !pdev->dev.of_node) {
915c2f85a0db0 (Jeevan Shriram                2014-04-28 18:04:07 -0700 2716) 		pr_err("Invalid device node\n");
915c2f85a0db0 (Jeevan Shriram                2014-04-28 18:04:07 -0700 2717) 		return -ENODEV;
915c2f85a0db0 (Jeevan Shriram                2014-04-28 18:04:07 -0700 2718) 	}
915c2f85a0db0 (Jeevan Shriram                2014-04-28 18:04:07 -0700 2719) 
915c2f85a0db0 (Jeevan Shriram                2014-04-28 18:04:07 -0700 2720) 	fbmem_pnode = of_parse_phandle(pdev->dev.of_node,
915c2f85a0db0 (Jeevan Shriram                2014-04-28 18:04:07 -0700 2721) 		"linux,contiguous-region", 0);
915c2f85a0db0 (Jeevan Shriram                2014-04-28 18:04:07 -0700 2722) 	if (!fbmem_pnode) {
915c2f85a0db0 (Jeevan Shriram                2014-04-28 18:04:07 -0700 2723) 		pr_debug("fbmem is not reserved for %s\n", pdev->name);
915c2f85a0db0 (Jeevan Shriram                2014-04-28 18:04:07 -0700 2724) 		mfd->fbi->screen_base = NULL;
915c2f85a0db0 (Jeevan Shriram                2014-04-28 18:04:07 -0700 2725) 		mfd->fbi->fix.smem_start = 0;
915c2f85a0db0 (Jeevan Shriram                2014-04-28 18:04:07 -0700 2726) 		return 0;
915c2f85a0db0 (Jeevan Shriram                2014-04-28 18:04:07 -0700 2727) 	} else {
915c2f85a0db0 (Jeevan Shriram                2014-04-28 18:04:07 -0700 2728) 		const u32 *addr;
915c2f85a0db0 (Jeevan Shriram                2014-04-28 18:04:07 -0700 2729) 		u64 len;
915c2f85a0db0 (Jeevan Shriram                2014-04-28 18:04:07 -0700 2730) 
915c2f85a0db0 (Jeevan Shriram                2014-04-28 18:04:07 -0700 2731) 		addr = of_get_address(fbmem_pnode, 0, &len, NULL);
915c2f85a0db0 (Jeevan Shriram                2014-04-28 18:04:07 -0700 2732) 		if (!addr) {
915c2f85a0db0 (Jeevan Shriram                2014-04-28 18:04:07 -0700 2733) 			pr_err("fbmem size is not specified\n");
915c2f85a0db0 (Jeevan Shriram                2014-04-28 18:04:07 -0700 2734) 			of_node_put(fbmem_pnode);
915c2f85a0db0 (Jeevan Shriram                2014-04-28 18:04:07 -0700 2735) 			return -EINVAL;
915c2f85a0db0 (Jeevan Shriram                2014-04-28 18:04:07 -0700 2736) 		}
915c2f85a0db0 (Jeevan Shriram                2014-04-28 18:04:07 -0700 2737) 		size = (size_t)len;
915c2f85a0db0 (Jeevan Shriram                2014-04-28 18:04:07 -0700 2738) 		of_node_put(fbmem_pnode);
915c2f85a0db0 (Jeevan Shriram                2014-04-28 18:04:07 -0700 2739) 	}
915c2f85a0db0 (Jeevan Shriram                2014-04-28 18:04:07 -0700 2740) 
915c2f85a0db0 (Jeevan Shriram                2014-04-28 18:04:07 -0700 2741) 	pr_debug("%s frame buffer reserve_size=0x%zx\n", __func__, size);
915c2f85a0db0 (Jeevan Shriram                2014-04-28 18:04:07 -0700 2742) 
915c2f85a0db0 (Jeevan Shriram                2014-04-28 18:04:07 -0700 2743) 	if (size < PAGE_ALIGN(mfd->fbi->fix.line_length *
915c2f85a0db0 (Jeevan Shriram                2014-04-28 18:04:07 -0700 2744) 			      mfd->fbi->var.yres_virtual))
915c2f85a0db0 (Jeevan Shriram                2014-04-28 18:04:07 -0700 2745) 		pr_warn("reserve size is smaller than framebuffer size\n");
915c2f85a0db0 (Jeevan Shriram                2014-04-28 18:04:07 -0700 2746) 
ce2af4cff4d90 (Veera Sundaram Sankaran       2014-10-22 10:28:34 -0700 2747) 	rc = mdss_smmu_dma_alloc_coherent(&pdev->dev, size, &phys, &mfd->iova,
ce2af4cff4d90 (Veera Sundaram Sankaran       2014-10-22 10:28:34 -0700 2748) 			&virt, GFP_KERNEL, dom);
ce2af4cff4d90 (Veera Sundaram Sankaran       2014-10-22 10:28:34 -0700 2749) 	if (rc) {
915c2f85a0db0 (Jeevan Shriram                2014-04-28 18:04:07 -0700 2750) 		pr_err("unable to alloc fbmem size=%zx\n", size);
915c2f85a0db0 (Jeevan Shriram                2014-04-28 18:04:07 -0700 2751) 		return -ENOMEM;
915c2f85a0db0 (Jeevan Shriram                2014-04-28 18:04:07 -0700 2752) 	}
915c2f85a0db0 (Jeevan Shriram                2014-04-28 18:04:07 -0700 2753) 
915c2f85a0db0 (Jeevan Shriram                2014-04-28 18:04:07 -0700 2754) 	if (MDSS_LPAE_CHECK(phys)) {
915c2f85a0db0 (Jeevan Shriram                2014-04-28 18:04:07 -0700 2755) 		pr_warn("fb mem phys %pa > 4GB is not supported.\n", &phys);
ce2af4cff4d90 (Veera Sundaram Sankaran       2014-10-22 10:28:34 -0700 2756) 		mdss_smmu_dma_free_coherent(&pdev->dev, size, &virt,
ce2af4cff4d90 (Veera Sundaram Sankaran       2014-10-22 10:28:34 -0700 2757) 				phys, mfd->iova, dom);
915c2f85a0db0 (Jeevan Shriram                2014-04-28 18:04:07 -0700 2758) 		return -ERANGE;
915c2f85a0db0 (Jeevan Shriram                2014-04-28 18:04:07 -0700 2759) 	}
915c2f85a0db0 (Jeevan Shriram                2014-04-28 18:04:07 -0700 2760) 
668252dbaee73 (Abhijit Kulkarni              2016-06-15 10:30:50 -0700 2761) 	pr_debug("alloc 0x%zxB @ (%pa phys) (0x%pK virt) (%pa iova) for fb%d\n",
915c2f85a0db0 (Jeevan Shriram                2014-04-28 18:04:07 -0700 2762) 		 size, &phys, virt, &mfd->iova, mfd->index);
915c2f85a0db0 (Jeevan Shriram                2014-04-28 18:04:07 -0700 2763) 
915c2f85a0db0 (Jeevan Shriram                2014-04-28 18:04:07 -0700 2764) 	mfd->fbi->screen_base = virt;
915c2f85a0db0 (Jeevan Shriram                2014-04-28 18:04:07 -0700 2765) 	mfd->fbi->fix.smem_start = phys;
915c2f85a0db0 (Jeevan Shriram                2014-04-28 18:04:07 -0700 2766) 	mfd->fbi->fix.smem_len = size;
915c2f85a0db0 (Jeevan Shriram                2014-04-28 18:04:07 -0700 2767) 
915c2f85a0db0 (Jeevan Shriram                2014-04-28 18:04:07 -0700 2768) 	return 0;
915c2f85a0db0 (Jeevan Shriram                2014-04-28 18:04:07 -0700 2769) }
915c2f85a0db0 (Jeevan Shriram                2014-04-28 18:04:07 -0700 2770) 
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 2771) static int mdss_fb_alloc_fbmem(struct msm_fb_data_type *mfd)
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 2772) {
7be668f2c0131 (Huaibin Yang                  2013-04-29 16:56:24 -0700 2773) 
01ea04c62e5cf (Jeevan Shriram                2014-03-26 19:47:49 -0700 2774) 	if (mfd->mdp.fb_mem_alloc_fnc) {
7be668f2c0131 (Huaibin Yang                  2013-04-29 16:56:24 -0700 2775) 		return mfd->mdp.fb_mem_alloc_fnc(mfd);
915c2f85a0db0 (Jeevan Shriram                2014-04-28 18:04:07 -0700 2776) 	} else if (mfd->mdp.fb_mem_get_iommu_domain) {
915c2f85a0db0 (Jeevan Shriram                2014-04-28 18:04:07 -0700 2777) 		int dom = mfd->mdp.fb_mem_get_iommu_domain();
915c2f85a0db0 (Jeevan Shriram                2014-04-28 18:04:07 -0700 2778) 		if (dom >= 0)
915c2f85a0db0 (Jeevan Shriram                2014-04-28 18:04:07 -0700 2779) 			return mdss_fb_alloc_fbmem_iommu(mfd, dom);
915c2f85a0db0 (Jeevan Shriram                2014-04-28 18:04:07 -0700 2780) 		else
915c2f85a0db0 (Jeevan Shriram                2014-04-28 18:04:07 -0700 2781) 			return -ENOMEM;
7be668f2c0131 (Huaibin Yang                  2013-04-29 16:56:24 -0700 2782) 	} else {
b192f3c2c194b (Xiaoming Zhou                 2012-12-21 21:23:15 -0500 2783) 		pr_err("no fb memory allocator function defined\n");
b192f3c2c194b (Xiaoming Zhou                 2012-12-21 21:23:15 -0500 2784) 		return -ENOMEM;
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 2785) 	}
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 2786) }
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 2787) 
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 2788) static int mdss_fb_register(struct msm_fb_data_type *mfd)
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 2789) {
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 2790) 	int ret = -ENODEV;
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 2791) 	int bpp;
8b9bb877e8909 (Aravind Venkateswaran         2015-07-01 18:05:22 -0700 2792) 	char panel_name[20];
059a1e16bbdac (Adrian Salido-Moreno          2012-11-14 17:16:03 -0800 2793) 	struct mdss_panel_info *panel_info = mfd->panel_info;
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 2794) 	struct fb_info *fbi = mfd->fbi;
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 2795) 	struct fb_fix_screeninfo *fix;
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 2796) 	struct fb_var_screeninfo *var;
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 2797) 	int *id;
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 2798) 
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 2799) 	/*
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 2800) 	 * fb info initialization
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 2801) 	 */
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 2802) 	fix = &fbi->fix;
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 2803) 	var = &fbi->var;
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 2804) 
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 2805) 	fix->type_aux = 0;	/* if type == FB_TYPE_INTERLEAVED_PLANES */
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 2806) 	fix->visual = FB_VISUAL_TRUECOLOR;	/* True Color */
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 2807) 	fix->ywrapstep = 0;	/* No support */
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 2808) 	fix->mmio_start = 0;	/* No MMIO Address */
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 2809) 	fix->mmio_len = 0;	/* No MMIO Address */
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 2810) 	fix->accel = FB_ACCEL_NONE;/* FB_ACCEL_MSM needes to be added in fb.h */
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 2811) 
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 2812) 	var->xoffset = 0,	/* Offset from virtual to visible */
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 2813) 	var->yoffset = 0,	/* resolution */
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 2814) 	var->grayscale = 0,	/* No graylevels */
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 2815) 	var->nonstd = 0,	/* standard pixel format */
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 2816) 	var->activate = FB_ACTIVATE_VBL,	/* activate it at vsync */
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 2817) 	var->height = -1,	/* height of picture in mm */
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 2818) 	var->width = -1,	/* width of picture in mm */
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 2819) 	var->accel_flags = 0,	/* acceleration flags */
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 2820) 	var->sync = 0,	/* see FB_SYNC_* */
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 2821) 	var->rotate = 0,	/* angle we rotate counter clockwise */
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 2822) 	mfd->op_enable = false;
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 2823) 
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 2824) 	switch (mfd->fb_imgType) {
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 2825) 	case MDP_RGB_565:
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 2826) 		fix->type = FB_TYPE_PACKED_PIXELS;
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 2827) 		fix->xpanstep = 1;
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 2828) 		fix->ypanstep = 1;
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 2829) 		var->vmode = FB_VMODE_NONINTERLACED;
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 2830) 		var->blue.offset = 0;
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 2831) 		var->green.offset = 5;
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 2832) 		var->red.offset = 11;
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 2833) 		var->blue.length = 5;
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 2834) 		var->green.length = 6;
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 2835) 		var->red.length = 5;
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 2836) 		var->blue.msb_right = 0;
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 2837) 		var->green.msb_right = 0;
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 2838) 		var->red.msb_right = 0;
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 2839) 		var->transp.offset = 0;
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 2840) 		var->transp.length = 0;
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 2841) 		bpp = 2;
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 2842) 		break;
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 2843) 
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 2844) 	case MDP_RGB_888:
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 2845) 		fix->type = FB_TYPE_PACKED_PIXELS;
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 2846) 		fix->xpanstep = 1;
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 2847) 		fix->ypanstep = 1;
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 2848) 		var->vmode = FB_VMODE_NONINTERLACED;
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 2849) 		var->blue.offset = 0;
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 2850) 		var->green.offset = 8;
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 2851) 		var->red.offset = 16;
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 2852) 		var->blue.length = 8;
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 2853) 		var->green.length = 8;
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 2854) 		var->red.length = 8;
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 2855) 		var->blue.msb_right = 0;
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 2856) 		var->green.msb_right = 0;
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 2857) 		var->red.msb_right = 0;
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 2858) 		var->transp.offset = 0;
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 2859) 		var->transp.length = 0;
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 2860) 		bpp = 3;
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 2861) 		break;
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 2862) 
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 2863) 	case MDP_ARGB_8888:
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 2864) 		fix->type = FB_TYPE_PACKED_PIXELS;
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 2865) 		fix->xpanstep = 1;
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 2866) 		fix->ypanstep = 1;
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 2867) 		var->vmode = FB_VMODE_NONINTERLACED;
eaf8d189c1916 (Eugene Yasman                 2013-10-21 13:44:10 +0300 2868) 		var->blue.offset = 24;
eaf8d189c1916 (Eugene Yasman                 2013-10-21 13:44:10 +0300 2869) 		var->green.offset = 16;
eaf8d189c1916 (Eugene Yasman                 2013-10-21 13:44:10 +0300 2870) 		var->red.offset = 8;
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 2871) 		var->blue.length = 8;
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 2872) 		var->green.length = 8;
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 2873) 		var->red.length = 8;
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 2874) 		var->blue.msb_right = 0;
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 2875) 		var->green.msb_right = 0;
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 2876) 		var->red.msb_right = 0;
eaf8d189c1916 (Eugene Yasman                 2013-10-21 13:44:10 +0300 2877) 		var->transp.offset = 0;
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 2878) 		var->transp.length = 8;
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 2879) 		bpp = 4;
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 2880) 		break;
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 2881) 
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 2882) 	case MDP_RGBA_8888:
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 2883) 		fix->type = FB_TYPE_PACKED_PIXELS;
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 2884) 		fix->xpanstep = 1;
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 2885) 		fix->ypanstep = 1;
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 2886) 		var->vmode = FB_VMODE_NONINTERLACED;
eaf8d189c1916 (Eugene Yasman                 2013-10-21 13:44:10 +0300 2887) 		var->blue.offset = 16;
eaf8d189c1916 (Eugene Yasman                 2013-10-21 13:44:10 +0300 2888) 		var->green.offset = 8;
eaf8d189c1916 (Eugene Yasman                 2013-10-21 13:44:10 +0300 2889) 		var->red.offset = 0;
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 2890) 		var->blue.length = 8;
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 2891) 		var->green.length = 8;
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 2892) 		var->red.length = 8;
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 2893) 		var->blue.msb_right = 0;
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 2894) 		var->green.msb_right = 0;
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 2895) 		var->red.msb_right = 0;
eaf8d189c1916 (Eugene Yasman                 2013-10-21 13:44:10 +0300 2896) 		var->transp.offset = 24;
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 2897) 		var->transp.length = 8;
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 2898) 		bpp = 4;
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 2899) 		break;
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 2900) 
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 2901) 	case MDP_YCRYCB_H2V1:
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 2902) 		fix->type = FB_TYPE_INTERLEAVED_PLANES;
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 2903) 		fix->xpanstep = 2;
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 2904) 		fix->ypanstep = 1;
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 2905) 		var->vmode = FB_VMODE_NONINTERLACED;
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 2906) 
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 2907) 		/* how about R/G/B offset? */
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 2908) 		var->blue.offset = 0;
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 2909) 		var->green.offset = 5;
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 2910) 		var->red.offset = 11;
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 2911) 		var->blue.length = 5;
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 2912) 		var->green.length = 6;
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 2913) 		var->red.length = 5;
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 2914) 		var->blue.msb_right = 0;
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 2915) 		var->green.msb_right = 0;
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 2916) 		var->red.msb_right = 0;
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 2917) 		var->transp.offset = 0;
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 2918) 		var->transp.length = 0;
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 2919) 		bpp = 2;
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 2920) 		break;
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 2921) 
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 2922) 	default:
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 2923) 		pr_err("msm_fb_init: fb %d unkown image type!\n",
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 2924) 			    mfd->index);
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 2925) 		return ret;
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 2926) 	}
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 2927) 
d9f95bd8d910d (Adrian Salido-Moreno          2015-08-21 15:42:52 -0700 2928) 	mdss_panelinfo_to_fb_var(panel_info, var);
0a547f9587bf8 (Chandan Uddaraju              2013-01-24 14:33:19 -0800 2929) 
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 2930) 	fix->type = panel_info->is_3d_panel;
b192f3c2c194b (Xiaoming Zhou                 2012-12-21 21:23:15 -0500 2931) 	if (mfd->mdp.fb_stride)
b192f3c2c194b (Xiaoming Zhou                 2012-12-21 21:23:15 -0500 2932) 		fix->line_length = mfd->mdp.fb_stride(mfd->index, var->xres,
b192f3c2c194b (Xiaoming Zhou                 2012-12-21 21:23:15 -0500 2933) 							bpp);
b192f3c2c194b (Xiaoming Zhou                 2012-12-21 21:23:15 -0500 2934) 	else
b192f3c2c194b (Xiaoming Zhou                 2012-12-21 21:23:15 -0500 2935) 		fix->line_length = var->xres * bpp;
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 2936) 
0a547f9587bf8 (Chandan Uddaraju              2013-01-24 14:33:19 -0800 2937) 	var->xres_virtual = var->xres;
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 2938) 	var->yres_virtual = panel_info->yres * mfd->fb_page;
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 2939) 	var->bits_per_pixel = bpp * 8;	/* FrameBuffer color depth */
b47d1f83d0377 (Adrian Salido-Moreno          2012-07-25 17:57:15 -0700 2940) 
4503db18f5db5 (Jeevan Shriram                2014-06-07 17:56:15 -0700 2941) 	/*
4503db18f5db5 (Jeevan Shriram                2014-06-07 17:56:15 -0700 2942) 	 * Populate smem length here for uspace to get the
d9f95bd8d910d (Adrian Salido-Moreno          2015-08-21 15:42:52 -0700 2943) 	 * Framebuffer size when FBIO_FSCREENINFO ioctl is called.
4503db18f5db5 (Jeevan Shriram                2014-06-07 17:56:15 -0700 2944) 	 */
fe79ab60a6417 (Jeevan Shriram                2014-09-04 06:49:41 -0700 2945) 	fix->smem_len = PAGE_ALIGN(fix->line_length * var->yres) * mfd->fb_page;
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 2946) 
4503db18f5db5 (Jeevan Shriram                2014-06-07 17:56:15 -0700 2947) 	/* id field for fb app  */
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 2948) 	id = (int *)&mfd->panel;
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 2949) 
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 2950) 	snprintf(fix->id, sizeof(fix->id), "mdssfb_%x", (u32) *id);
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 2951) 
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 2952) 	fbi->fbops = &mdss_fb_ops;
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 2953) 	fbi->flags = FBINFO_FLAG_DEFAULT;
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 2954) 	fbi->pseudo_palette = mdss_fb_pseudo_palette;
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 2955) 
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 2956) 	mfd->ref_cnt = 0;
b9095befda98a (Aravind Venkateswaran         2014-07-28 23:24:46 -0700 2957) 	mfd->panel_power_state = MDSS_PANEL_POWER_OFF;
d00b8490439fd (Arpita Banerjee               2013-06-11 19:24:20 -0700 2958) 	mfd->dcm_state = DCM_UNINIT;
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 2959) 
01ea04c62e5cf (Jeevan Shriram                2014-03-26 19:47:49 -0700 2960) 	if (mdss_fb_alloc_fbmem(mfd))
01ea04c62e5cf (Jeevan Shriram                2014-03-26 19:47:49 -0700 2961) 		pr_warn("unable to allocate fb memory in fb register\n");
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 2962) 
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 2963) 	mfd->op_enable = true;
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 2964) 
c0129578c5b78 (Carl Vanderlip                2013-05-31 11:55:22 -0700 2965) 	mutex_init(&mfd->update.lock);
7b2726a393f13 (Carl Vanderlip                2012-08-28 12:03:28 -0700 2966) 	mutex_init(&mfd->no_update.lock);
21a8ee10e53eb (Jayant Shekhar                2013-08-22 12:31:56 +0530 2967) 	mutex_init(&mfd->mdp_sync_pt_data.sync_mutex);
0df863c8161ca (Adrian Salido-Moreno          2013-10-15 20:31:50 -0700 2968) 	atomic_set(&mfd->mdp_sync_pt_data.commit_cnt, 0);
0df863c8161ca (Adrian Salido-Moreno          2013-10-15 20:31:50 -0700 2969) 	atomic_set(&mfd->commits_pending, 0);
5570af793af75 (Ujwal Patel                   2014-03-31 17:18:32 -0700 2970) 	atomic_set(&mfd->ioctl_ref_cnt, 0);
206478bf63dde (Ken Zhang                     2014-04-13 18:28:20 -0400 2971) 	atomic_set(&mfd->kickoff_pending, 0);
21a8ee10e53eb (Jayant Shekhar                2013-08-22 12:31:56 +0530 2972) 
7b2726a393f13 (Carl Vanderlip                2012-08-28 12:03:28 -0700 2973) 	init_timer(&mfd->no_update.timer);
7b2726a393f13 (Carl Vanderlip                2012-08-28 12:03:28 -0700 2974) 	mfd->no_update.timer.function = mdss_fb_no_update_notify_timer_cb;
7b2726a393f13 (Carl Vanderlip                2012-08-28 12:03:28 -0700 2975) 	mfd->no_update.timer.data = (unsigned long)mfd;
ee779a5bd98d4 (Ping Li                       2014-03-17 10:06:47 -0700 2976) 	mfd->update.ref_count = 0;
ee779a5bd98d4 (Ping Li                       2014-03-17 10:06:47 -0700 2977) 	mfd->no_update.ref_count = 0;
1f137a2c70474 (Krishna Chaitanya Parimi      2015-02-10 23:37:05 -0800 2978) 	mfd->update.init_done = false;
7b2726a393f13 (Carl Vanderlip                2012-08-28 12:03:28 -0700 2979) 	init_completion(&mfd->update.comp);
7b2726a393f13 (Carl Vanderlip                2012-08-28 12:03:28 -0700 2980) 	init_completion(&mfd->no_update.comp);
d00b8490439fd (Arpita Banerjee               2013-06-11 19:24:20 -0700 2981) 	init_completion(&mfd->power_off_comp);
2747a8445ca2d (Ken Zhang                     2012-12-21 23:12:05 -0500 2982) 	init_completion(&mfd->power_set_comp);
0df863c8161ca (Adrian Salido-Moreno          2013-10-15 20:31:50 -0700 2983) 	init_waitqueue_head(&mfd->commit_wait_q);
0df863c8161ca (Adrian Salido-Moreno          2013-10-15 20:31:50 -0700 2984) 	init_waitqueue_head(&mfd->idle_wait_q);
5570af793af75 (Ujwal Patel                   2014-03-31 17:18:32 -0700 2985) 	init_waitqueue_head(&mfd->ioctl_q);
206478bf63dde (Ken Zhang                     2014-04-13 18:28:20 -0400 2986) 	init_waitqueue_head(&mfd->kickoff_wait_q);
b192f3c2c194b (Xiaoming Zhou                 2012-12-21 21:23:15 -0500 2987) 
b192f3c2c194b (Xiaoming Zhou                 2012-12-21 21:23:15 -0500 2988) 	ret = fb_alloc_cmap(&fbi->cmap, 256, 0);
b192f3c2c194b (Xiaoming Zhou                 2012-12-21 21:23:15 -0500 2989) 	if (ret)
b192f3c2c194b (Xiaoming Zhou                 2012-12-21 21:23:15 -0500 2990) 		pr_err("fb_alloc_cmap() failed!\n");
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 2991) 
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 2992) 	if (register_framebuffer(fbi) < 0) {
b192f3c2c194b (Xiaoming Zhou                 2012-12-21 21:23:15 -0500 2993) 		fb_dealloc_cmap(&fbi->cmap);
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 2994) 
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 2995) 		mfd->op_enable = false;
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 2996) 		return -EPERM;
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 2997) 	}
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 2998) 
8b9bb877e8909 (Aravind Venkateswaran         2015-07-01 18:05:22 -0700 2999) 	snprintf(panel_name, ARRAY_SIZE(panel_name), "mdss_panel_fb%d",
8b9bb877e8909 (Aravind Venkateswaran         2015-07-01 18:05:22 -0700 3000) 		mfd->index);
8b9bb877e8909 (Aravind Venkateswaran         2015-07-01 18:05:22 -0700 3001) 	mdss_panel_debugfs_init(panel_info, panel_name);
01ea04c62e5cf (Jeevan Shriram                2014-03-26 19:47:49 -0700 3002) 	pr_info("FrameBuffer[%d] %dx%d registered successfully!\n", mfd->index,
01ea04c62e5cf (Jeevan Shriram                2014-03-26 19:47:49 -0700 3003) 					fbi->var.xres, fbi->var.yres);
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 3004) 
0df863c8161ca (Adrian Salido-Moreno          2013-10-15 20:31:50 -0700 3005) 	return 0;
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 3006) }
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 3007) 
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 3008) static int mdss_fb_open(struct fb_info *info, int user)
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 3009) {
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 3010) 	struct msm_fb_data_type *mfd = (struct msm_fb_data_type *)info->par;
bd14538fc85ba (Veera Sundaram Sankaran       2015-04-16 18:43:19 -0700 3011) 	struct mdss_fb_file_info *file_info = NULL;
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 3012) 	int result;
2e888c39e921d (Dhaval Patel                  2014-02-21 13:27:23 -0800 3013) 	struct task_struct *task = current->group_leader;
754bf27ee161e (Adrian Salido-Moreno          2013-07-30 13:50:20 -0700 3014) 
272d4979007a1 (Aravind Venkateswaran         2013-11-12 14:33:16 -0800 3015) 	if (mfd->shutdown_pending) {
f4621d3955ab0 (Ujwal Patel                   2015-02-13 13:48:18 -0800 3016) 		pr_err_once("Shutdown pending. Aborting operation. Request from pid:%d name=%s\n",
d6bf565bedd22 (Dhaval Patel                  2015-03-27 19:03:33 -0700 3017) 			current->tgid, task->comm);
f4621d3955ab0 (Ujwal Patel                   2015-02-13 13:48:18 -0800 3018) 		sysfs_notify(&mfd->fbi->dev->kobj, NULL, "show_blank_event");
af6c0571c981a (Gopikrishnaiah Anandan        2015-02-17 20:59:43 -0800 3019) 		return -ESHUTDOWN;
272d4979007a1 (Aravind Venkateswaran         2013-11-12 14:33:16 -0800 3020) 	}
272d4979007a1 (Aravind Venkateswaran         2013-11-12 14:33:16 -0800 3021) 
bd14538fc85ba (Veera Sundaram Sankaran       2015-04-16 18:43:19 -0700 3022) 	file_info = kmalloc(sizeof(*file_info), GFP_KERNEL);
bd14538fc85ba (Veera Sundaram Sankaran       2015-04-16 18:43:19 -0700 3023) 	if (!file_info) {
bd14538fc85ba (Veera Sundaram Sankaran       2015-04-16 18:43:19 -0700 3024) 		pr_err("unable to alloc file info\n");
bd14538fc85ba (Veera Sundaram Sankaran       2015-04-16 18:43:19 -0700 3025) 		return -ENOMEM;
bd14538fc85ba (Veera Sundaram Sankaran       2015-04-16 18:43:19 -0700 3026) 	}
bd14538fc85ba (Veera Sundaram Sankaran       2015-04-16 18:43:19 -0700 3027) 
bd14538fc85ba (Veera Sundaram Sankaran       2015-04-16 18:43:19 -0700 3028) 	file_info->file = info->file;
d6bf565bedd22 (Dhaval Patel                  2015-03-27 19:03:33 -0700 3029) 	list_add(&file_info->list, &mfd->file_list);
bd14538fc85ba (Veera Sundaram Sankaran       2015-04-16 18:43:19 -0700 3030) 
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 3031) 	result = pm_runtime_get_sync(info->dev);
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 3032) 
272d4979007a1 (Aravind Venkateswaran         2013-11-12 14:33:16 -0800 3033) 	if (result < 0) {
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 3034) 		pr_err("pm_runtime: fail to wake up\n");
272d4979007a1 (Aravind Venkateswaran         2013-11-12 14:33:16 -0800 3035) 		goto pm_error;
272d4979007a1 (Aravind Venkateswaran         2013-11-12 14:33:16 -0800 3036) 	}
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 3037) 
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 3038) 	if (!mfd->ref_cnt) {
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 3039) 		result = mdss_fb_blank_sub(FB_BLANK_UNBLANK, info,
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 3040) 					   mfd->op_enable);
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 3041) 		if (result) {
5c1f7cd906b20 (Ujwal Patel                   2013-07-25 10:09:02 -0700 3042) 			pr_err("can't turn on fb%d! rc=%d\n", mfd->index,
5c1f7cd906b20 (Ujwal Patel                   2013-07-25 10:09:02 -0700 3043) 				result);
272d4979007a1 (Aravind Venkateswaran         2013-11-12 14:33:16 -0800 3044) 			goto blank_error;
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 3045) 		}
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 3046) 	}
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 3047) 
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 3048) 	mfd->ref_cnt++;
668252dbaee73 (Abhijit Kulkarni              2016-06-15 10:30:50 -0700 3049) 	pr_debug("mfd refcount:%d file:%pK\n", mfd->ref_cnt, info->file);
272d4979007a1 (Aravind Venkateswaran         2013-11-12 14:33:16 -0800 3050) 
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 3051) 	return 0;
272d4979007a1 (Aravind Venkateswaran         2013-11-12 14:33:16 -0800 3052) 
272d4979007a1 (Aravind Venkateswaran         2013-11-12 14:33:16 -0800 3053) blank_error:
bd14538fc85ba (Veera Sundaram Sankaran       2015-04-16 18:43:19 -0700 3054) 	pm_runtime_put(info->dev);
bd14538fc85ba (Veera Sundaram Sankaran       2015-04-16 18:43:19 -0700 3055) pm_error:
fa69b02d4422d (Dhaval Patel                  2014-11-10 22:57:40 -0800 3056) 	list_del(&file_info->list);
fa69b02d4422d (Dhaval Patel                  2014-11-10 22:57:40 -0800 3057) 	kfree(file_info);
272d4979007a1 (Aravind Venkateswaran         2013-11-12 14:33:16 -0800 3058) 	return result;
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 3059) }
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 3060) 
a681b26df0050 (Ujwal Patel                   2013-10-22 23:24:46 -0700 3061) static int mdss_fb_release_all(struct fb_info *info, bool release_all)
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 3062) {
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 3063) 	struct msm_fb_data_type *mfd = (struct msm_fb_data_type *)info->par;
d6bf565bedd22 (Dhaval Patel                  2015-03-27 19:03:33 -0700 3064) 	struct mdss_fb_file_info *file_info = NULL, *temp_file_info = NULL;
d6bf565bedd22 (Dhaval Patel                  2015-03-27 19:03:33 -0700 3065) 	struct file *file = info->file;
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 3066) 	int ret = 0;
d6bf565bedd22 (Dhaval Patel                  2015-03-27 19:03:33 -0700 3067) 	bool node_found = false;
43e6384f6415a (Ujwal Patel                   2013-11-21 08:21:44 -0800 3068) 	struct task_struct *task = current->group_leader;
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 3069) 
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 3070) 	if (!mfd->ref_cnt) {
f4621d3955ab0 (Ujwal Patel                   2015-02-13 13:48:18 -0800 3071) 		pr_info("try to close unopened fb %d! from pid:%d name:%s\n",
d6bf565bedd22 (Dhaval Patel                  2015-03-27 19:03:33 -0700 3072) 			mfd->index, current->tgid, task->comm);
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 3073) 		return -EINVAL;
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 3074) 	}
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 3075) 
5570af793af75 (Ujwal Patel                   2014-03-31 17:18:32 -0700 3076) 	if (!wait_event_timeout(mfd->ioctl_q,
5570af793af75 (Ujwal Patel                   2014-03-31 17:18:32 -0700 3077) 		!atomic_read(&mfd->ioctl_ref_cnt) || !release_all,
5570af793af75 (Ujwal Patel                   2014-03-31 17:18:32 -0700 3078) 		msecs_to_jiffies(1000)))
5570af793af75 (Ujwal Patel                   2014-03-31 17:18:32 -0700 3079) 		pr_warn("fb%d ioctl could not finish. waited 1 sec.\n",
5570af793af75 (Ujwal Patel                   2014-03-31 17:18:32 -0700 3080) 			mfd->index);
5570af793af75 (Ujwal Patel                   2014-03-31 17:18:32 -0700 3081) 
4629783f33340 (Adrian Salido-Moreno          2015-04-17 14:08:30 -0700 3082) 	/* wait only for the last release */
26bebe99120eb (Ujwal Patel                   2015-04-22 14:51:12 -0700 3083) 	if (release_all || (mfd->ref_cnt == 1)) {
26bebe99120eb (Ujwal Patel                   2015-04-22 14:51:12 -0700 3084) 		ret = mdss_fb_pan_idle(mfd);
26bebe99120eb (Ujwal Patel                   2015-04-22 14:51:12 -0700 3085) 		if (ret && (ret != -ESHUTDOWN))
26bebe99120eb (Ujwal Patel                   2015-04-22 14:51:12 -0700 3086) 			pr_warn("mdss_fb_pan_idle for fb%d failed. ret=%d ignoring.\n",
26bebe99120eb (Ujwal Patel                   2015-04-22 14:51:12 -0700 3087) 				mfd->index, ret);
26bebe99120eb (Ujwal Patel                   2015-04-22 14:51:12 -0700 3088) 	}
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 3089) 
a681b26df0050 (Ujwal Patel                   2013-10-22 23:24:46 -0700 3090) 	pr_debug("release_all = %s\n", release_all ? "true" : "false");
754bf27ee161e (Adrian Salido-Moreno          2013-07-30 13:50:20 -0700 3091) 
d6bf565bedd22 (Dhaval Patel                  2015-03-27 19:03:33 -0700 3092) 	list_for_each_entry_safe(file_info, temp_file_info, &mfd->file_list,
d6bf565bedd22 (Dhaval Patel                  2015-03-27 19:03:33 -0700 3093) 		list) {
d6bf565bedd22 (Dhaval Patel                  2015-03-27 19:03:33 -0700 3094) 		if (!release_all && file_info->file != file)
a681b26df0050 (Ujwal Patel                   2013-10-22 23:24:46 -0700 3095) 			continue;
a681b26df0050 (Ujwal Patel                   2013-10-22 23:24:46 -0700 3096) 
d6bf565bedd22 (Dhaval Patel                  2015-03-27 19:03:33 -0700 3097) 		pr_debug("found file node mfd->ref=%d\n", mfd->ref_cnt);
d6bf565bedd22 (Dhaval Patel                  2015-03-27 19:03:33 -0700 3098) 		list_del(&file_info->list);
d6bf565bedd22 (Dhaval Patel                  2015-03-27 19:03:33 -0700 3099) 		kfree(file_info);
a681b26df0050 (Ujwal Patel                   2013-10-22 23:24:46 -0700 3100) 
d6bf565bedd22 (Dhaval Patel                  2015-03-27 19:03:33 -0700 3101) 		mfd->ref_cnt--;
d6bf565bedd22 (Dhaval Patel                  2015-03-27 19:03:33 -0700 3102) 		pm_runtime_put(info->dev);
a681b26df0050 (Ujwal Patel                   2013-10-22 23:24:46 -0700 3103) 
d6bf565bedd22 (Dhaval Patel                  2015-03-27 19:03:33 -0700 3104) 		node_found = true;
43e6384f6415a (Ujwal Patel                   2013-11-21 08:21:44 -0800 3105) 
43e6384f6415a (Ujwal Patel                   2013-11-21 08:21:44 -0800 3106) 		if (!release_all)
43e6384f6415a (Ujwal Patel                   2013-11-21 08:21:44 -0800 3107) 			break;
754bf27ee161e (Adrian Salido-Moreno          2013-07-30 13:50:20 -0700 3108) 	}
754bf27ee161e (Adrian Salido-Moreno          2013-07-30 13:50:20 -0700 3109) 
d6bf565bedd22 (Dhaval Patel                  2015-03-27 19:03:33 -0700 3110) 	if (!node_found || (release_all && mfd->ref_cnt))
d6bf565bedd22 (Dhaval Patel                  2015-03-27 19:03:33 -0700 3111) 		pr_warn("file node not found or wrong ref cnt: release all:%d refcnt:%d\n",
d6bf565bedd22 (Dhaval Patel                  2015-03-27 19:03:33 -0700 3112) 			release_all, mfd->ref_cnt);
d6bf565bedd22 (Dhaval Patel                  2015-03-27 19:03:33 -0700 3113) 
668252dbaee73 (Abhijit Kulkarni              2016-06-15 10:30:50 -0700 3114) 	pr_debug("current process=%s pid=%d mfd->ref=%d file:%pK\n",
d6bf565bedd22 (Dhaval Patel                  2015-03-27 19:03:33 -0700 3115) 		task->comm, current->tgid, mfd->ref_cnt, info->file);
bd14538fc85ba (Veera Sundaram Sankaran       2015-04-16 18:43:19 -0700 3116) 
f44a833d60d42 (Adrian Salido-Moreno          2014-10-17 12:31:47 -0700 3117) 	if (!mfd->ref_cnt || release_all) {
f44a833d60d42 (Adrian Salido-Moreno          2014-10-17 12:31:47 -0700 3118) 		/* resources (if any) will be released during blank */
f44a833d60d42 (Adrian Salido-Moreno          2014-10-17 12:31:47 -0700 3119) 		if (mfd->mdp.release_fnc)
d6bf565bedd22 (Dhaval Patel                  2015-03-27 19:03:33 -0700 3120) 			mfd->mdp.release_fnc(mfd, NULL);
01ea04c62e5cf (Jeevan Shriram                2014-03-26 19:47:49 -0700 3121) 
5b73c7a4aa299 (Benet Clark                   2015-09-14 19:10:10 -0700 3122) 		if (mfd->mdp.pp_release_fnc) {
5b73c7a4aa299 (Benet Clark                   2015-09-14 19:10:10 -0700 3123) 			ret = (*mfd->mdp.pp_release_fnc)(mfd);
75086d13aba2e (Gopikrishnaiah Anandan        2015-07-17 10:46:35 -0700 3124) 			if (ret)
5b73c7a4aa299 (Benet Clark                   2015-09-14 19:10:10 -0700 3125) 				pr_err("PP release failed ret %d\n", ret);
75086d13aba2e (Gopikrishnaiah Anandan        2015-07-17 10:46:35 -0700 3126) 		}
75086d13aba2e (Gopikrishnaiah Anandan        2015-07-17 10:46:35 -0700 3127) 
c7cc278f25efb (Ray Zhang                     2015-12-02 17:41:48 +0800 3128) 		/* reset backlight before blank to prevent backlight from
c7cc278f25efb (Ray Zhang                     2015-12-02 17:41:48 +0800 3129) 		 * enabling ahead of unblank. for some special cases like
c7cc278f25efb (Ray Zhang                     2015-12-02 17:41:48 +0800 3130) 		 * adb shell stop/start.
c7cc278f25efb (Ray Zhang                     2015-12-02 17:41:48 +0800 3131) 		 */
1b7f1d14dc47e (Abhijit Kulkarni              2016-10-07 11:01:44 -0700 3132) 		mutex_lock(&mfd->bl_lock);
c7cc278f25efb (Ray Zhang                     2015-12-02 17:41:48 +0800 3133) 		mdss_fb_set_backlight(mfd, 0);
1b7f1d14dc47e (Abhijit Kulkarni              2016-10-07 11:01:44 -0700 3134) 		mutex_unlock(&mfd->bl_lock);
c7cc278f25efb (Ray Zhang                     2015-12-02 17:41:48 +0800 3135) 
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 3136) 		ret = mdss_fb_blank_sub(FB_BLANK_POWERDOWN, info,
a681b26df0050 (Ujwal Patel                   2013-10-22 23:24:46 -0700 3137) 			mfd->op_enable);
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 3138) 		if (ret) {
d6bf565bedd22 (Dhaval Patel                  2015-03-27 19:03:33 -0700 3139) 			pr_err("can't turn off fb%d! rc=%d current process=%s pid=%d\n",
d6bf565bedd22 (Dhaval Patel                  2015-03-27 19:03:33 -0700 3140) 			      mfd->index, ret, task->comm, current->tgid);
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 3141) 			return ret;
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 3142) 		}
cf62347f51331 (Adrian Salido-Moreno          2014-11-26 09:49:01 -0800 3143) 		if (mfd->fb_ion_handle)
cf62347f51331 (Adrian Salido-Moreno          2014-11-26 09:49:01 -0800 3144) 			mdss_fb_free_fb_ion_memory(mfd);
cf62347f51331 (Adrian Salido-Moreno          2014-11-26 09:49:01 -0800 3145) 
5570af793af75 (Ujwal Patel                   2014-03-31 17:18:32 -0700 3146) 		atomic_set(&mfd->ioctl_ref_cnt, 0);
d6bf565bedd22 (Dhaval Patel                  2015-03-27 19:03:33 -0700 3147) 	} else {
d6bf565bedd22 (Dhaval Patel                  2015-03-27 19:03:33 -0700 3148) 		if (mfd->mdp.release_fnc)
d6bf565bedd22 (Dhaval Patel                  2015-03-27 19:03:33 -0700 3149) 			ret = mfd->mdp.release_fnc(mfd, file);
f44a833d60d42 (Adrian Salido-Moreno          2014-10-17 12:31:47 -0700 3150) 
d6bf565bedd22 (Dhaval Patel                  2015-03-27 19:03:33 -0700 3151) 		/* display commit is needed to release resources */
d6bf565bedd22 (Dhaval Patel                  2015-03-27 19:03:33 -0700 3152) 		if (ret)
d6bf565bedd22 (Dhaval Patel                  2015-03-27 19:03:33 -0700 3153) 			mdss_fb_pan_display(&mfd->fbi->var, mfd->fbi);
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 3154) 	}
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 3155) 
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 3156) 	return ret;
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 3157) }
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 3158) 
a681b26df0050 (Ujwal Patel                   2013-10-22 23:24:46 -0700 3159) static int mdss_fb_release(struct fb_info *info, int user)
a681b26df0050 (Ujwal Patel                   2013-10-22 23:24:46 -0700 3160) {
a681b26df0050 (Ujwal Patel                   2013-10-22 23:24:46 -0700 3161) 	return mdss_fb_release_all(info, false);
a681b26df0050 (Ujwal Patel                   2013-10-22 23:24:46 -0700 3162) }
a681b26df0050 (Ujwal Patel                   2013-10-22 23:24:46 -0700 3163) 
2747a8445ca2d (Ken Zhang                     2012-12-21 23:12:05 -0500 3164) static void mdss_fb_power_setting_idle(struct msm_fb_data_type *mfd)
2747a8445ca2d (Ken Zhang                     2012-12-21 23:12:05 -0500 3165) {
2747a8445ca2d (Ken Zhang                     2012-12-21 23:12:05 -0500 3166) 	int ret;
2747a8445ca2d (Ken Zhang                     2012-12-21 23:12:05 -0500 3167) 
2747a8445ca2d (Ken Zhang                     2012-12-21 23:12:05 -0500 3168) 	if (mfd->is_power_setting) {
2747a8445ca2d (Ken Zhang                     2012-12-21 23:12:05 -0500 3169) 		ret = wait_for_completion_timeout(
2747a8445ca2d (Ken Zhang                     2012-12-21 23:12:05 -0500 3170) 				&mfd->power_set_comp,
2747a8445ca2d (Ken Zhang                     2012-12-21 23:12:05 -0500 3171) 			msecs_to_jiffies(WAIT_DISP_OP_TIMEOUT));
2747a8445ca2d (Ken Zhang                     2012-12-21 23:12:05 -0500 3172) 		if (ret < 0)
2747a8445ca2d (Ken Zhang                     2012-12-21 23:12:05 -0500 3173) 			ret = -ERESTARTSYS;
2747a8445ca2d (Ken Zhang                     2012-12-21 23:12:05 -0500 3174) 		else if (!ret)
2747a8445ca2d (Ken Zhang                     2012-12-21 23:12:05 -0500 3175) 			pr_err("%s wait for power_set_comp timeout %d %d",
2747a8445ca2d (Ken Zhang                     2012-12-21 23:12:05 -0500 3176) 				__func__, ret, mfd->is_power_setting);
2747a8445ca2d (Ken Zhang                     2012-12-21 23:12:05 -0500 3177) 		if (ret <= 0) {
2747a8445ca2d (Ken Zhang                     2012-12-21 23:12:05 -0500 3178) 			mfd->is_power_setting = false;
2747a8445ca2d (Ken Zhang                     2012-12-21 23:12:05 -0500 3179) 			complete_all(&mfd->power_set_comp);
2747a8445ca2d (Ken Zhang                     2012-12-21 23:12:05 -0500 3180) 		}
2747a8445ca2d (Ken Zhang                     2012-12-21 23:12:05 -0500 3181) 	}
2747a8445ca2d (Ken Zhang                     2012-12-21 23:12:05 -0500 3182) }
2747a8445ca2d (Ken Zhang                     2012-12-21 23:12:05 -0500 3183) 
38154a0adafa9 (Ken Zhang                     2014-07-14 15:39:46 -0400 3184) static void __mdss_fb_copy_fence(struct msm_sync_pt_data *sync_pt_data,
38154a0adafa9 (Ken Zhang                     2014-07-14 15:39:46 -0400 3185) 	struct sync_fence **fences, u32 *fence_cnt)
9bc30b3c612e8 (Ken Zhang                     2012-11-07 18:33:16 -0500 3186) {
0df863c8161ca (Adrian Salido-Moreno          2013-10-15 20:31:50 -0700 3187) 	pr_debug("%s: wait for fences\n", sync_pt_data->fence_name);
0df863c8161ca (Adrian Salido-Moreno          2013-10-15 20:31:50 -0700 3188) 
0df863c8161ca (Adrian Salido-Moreno          2013-10-15 20:31:50 -0700 3189) 	mutex_lock(&sync_pt_data->sync_mutex);
0df863c8161ca (Adrian Salido-Moreno          2013-10-15 20:31:50 -0700 3190) 	/*
0df863c8161ca (Adrian Salido-Moreno          2013-10-15 20:31:50 -0700 3191) 	 * Assuming that acq_fen_cnt is sanitized in bufsync ioctl
0df863c8161ca (Adrian Salido-Moreno          2013-10-15 20:31:50 -0700 3192) 	 * to check for sync_pt_data->acq_fen_cnt <= MDP_MAX_FENCE_FD
0df863c8161ca (Adrian Salido-Moreno          2013-10-15 20:31:50 -0700 3193) 	 */
38154a0adafa9 (Ken Zhang                     2014-07-14 15:39:46 -0400 3194) 	*fence_cnt = sync_pt_data->acq_fen_cnt;
0df863c8161ca (Adrian Salido-Moreno          2013-10-15 20:31:50 -0700 3195) 	sync_pt_data->acq_fen_cnt = 0;
38154a0adafa9 (Ken Zhang                     2014-07-14 15:39:46 -0400 3196) 	if (*fence_cnt)
0df863c8161ca (Adrian Salido-Moreno          2013-10-15 20:31:50 -0700 3197) 		memcpy(fences, sync_pt_data->acq_fen,
38154a0adafa9 (Ken Zhang                     2014-07-14 15:39:46 -0400 3198) 				*fence_cnt * sizeof(struct sync_fence *));
0df863c8161ca (Adrian Salido-Moreno          2013-10-15 20:31:50 -0700 3199) 	mutex_unlock(&sync_pt_data->sync_mutex);
38154a0adafa9 (Ken Zhang                     2014-07-14 15:39:46 -0400 3200) }
38154a0adafa9 (Ken Zhang                     2014-07-14 15:39:46 -0400 3201) 
40064f21bec62 (Jeevan Shriram                2015-02-11 15:01:09 -0800 3202) static int __mdss_fb_wait_for_fence_sub(struct msm_sync_pt_data *sync_pt_data,
38154a0adafa9 (Ken Zhang                     2014-07-14 15:39:46 -0400 3203) 	struct sync_fence **fences, int fence_cnt)
38154a0adafa9 (Ken Zhang                     2014-07-14 15:39:46 -0400 3204) {
38154a0adafa9 (Ken Zhang                     2014-07-14 15:39:46 -0400 3205) 	int i, ret = 0;
126e1a5bd124a (Jeevan Shriram                2015-02-03 16:51:23 -0800 3206) 	unsigned long max_wait = msecs_to_jiffies(WAIT_MAX_FENCE_TIMEOUT);
126e1a5bd124a (Jeevan Shriram                2015-02-03 16:51:23 -0800 3207) 	unsigned long timeout = jiffies + max_wait;
126e1a5bd124a (Jeevan Shriram                2015-02-03 16:51:23 -0800 3208) 	long wait_ms, wait_jf;
0df863c8161ca (Adrian Salido-Moreno          2013-10-15 20:31:50 -0700 3209) 
9bc30b3c612e8 (Ken Zhang                     2012-11-07 18:33:16 -0500 3210) 	/* buf sync */
0df863c8161ca (Adrian Salido-Moreno          2013-10-15 20:31:50 -0700 3211) 	for (i = 0; i < fence_cnt && !ret; i++) {
126e1a5bd124a (Jeevan Shriram                2015-02-03 16:51:23 -0800 3212) 		wait_jf = timeout - jiffies;
126e1a5bd124a (Jeevan Shriram                2015-02-03 16:51:23 -0800 3213) 		wait_ms = jiffies_to_msecs(wait_jf);
126e1a5bd124a (Jeevan Shriram                2015-02-03 16:51:23 -0800 3214) 
126e1a5bd124a (Jeevan Shriram                2015-02-03 16:51:23 -0800 3215) 		/*
126e1a5bd124a (Jeevan Shriram                2015-02-03 16:51:23 -0800 3216) 		 * In this loop, if one of the previous fence took long
126e1a5bd124a (Jeevan Shriram                2015-02-03 16:51:23 -0800 3217) 		 * time, give a chance for the next fence to check if
126e1a5bd124a (Jeevan Shriram                2015-02-03 16:51:23 -0800 3218) 		 * fence is already signalled. If not signalled it breaks
126e1a5bd124a (Jeevan Shriram                2015-02-03 16:51:23 -0800 3219) 		 * in the final wait timeout.
126e1a5bd124a (Jeevan Shriram                2015-02-03 16:51:23 -0800 3220) 		 */
126e1a5bd124a (Jeevan Shriram                2015-02-03 16:51:23 -0800 3221) 		if (wait_jf < 0)
126e1a5bd124a (Jeevan Shriram                2015-02-03 16:51:23 -0800 3222) 			wait_ms = WAIT_MIN_FENCE_TIMEOUT;
126e1a5bd124a (Jeevan Shriram                2015-02-03 16:51:23 -0800 3223) 		else
126e1a5bd124a (Jeevan Shriram                2015-02-03 16:51:23 -0800 3224) 			wait_ms = min_t(long, WAIT_FENCE_FIRST_TIMEOUT,
126e1a5bd124a (Jeevan Shriram                2015-02-03 16:51:23 -0800 3225) 					wait_ms);
126e1a5bd124a (Jeevan Shriram                2015-02-03 16:51:23 -0800 3226) 
126e1a5bd124a (Jeevan Shriram                2015-02-03 16:51:23 -0800 3227) 		ret = sync_fence_wait(fences[i], wait_ms);
126e1a5bd124a (Jeevan Shriram                2015-02-03 16:51:23 -0800 3228) 
0e4772d73332f (Naseer Ahmed                  2013-02-02 15:51:47 -0500 3229) 		if (ret == -ETIME) {
126e1a5bd124a (Jeevan Shriram                2015-02-03 16:51:23 -0800 3230) 			wait_jf = timeout - jiffies;
126e1a5bd124a (Jeevan Shriram                2015-02-03 16:51:23 -0800 3231) 			wait_ms = jiffies_to_msecs(wait_jf);
126e1a5bd124a (Jeevan Shriram                2015-02-03 16:51:23 -0800 3232) 			if (wait_jf < 0)
126e1a5bd124a (Jeevan Shriram                2015-02-03 16:51:23 -0800 3233) 				break;
126e1a5bd124a (Jeevan Shriram                2015-02-03 16:51:23 -0800 3234) 			else
126e1a5bd124a (Jeevan Shriram                2015-02-03 16:51:23 -0800 3235) 				wait_ms = min_t(long, WAIT_FENCE_FINAL_TIMEOUT,
126e1a5bd124a (Jeevan Shriram                2015-02-03 16:51:23 -0800 3236) 						wait_ms);
126e1a5bd124a (Jeevan Shriram                2015-02-03 16:51:23 -0800 3237) 
0df863c8161ca (Adrian Salido-Moreno          2013-10-15 20:31:50 -0700 3238) 			pr_warn("%s: sync_fence_wait timed out! ",
2616ef2bb00a8 (Krishna Manikandan            2016-12-28 17:43:28 +0530 3239) 					fences[i]->name);
126e1a5bd124a (Jeevan Shriram                2015-02-03 16:51:23 -0800 3240) 			pr_cont("Waiting %ld.%ld more seconds\n",
126e1a5bd124a (Jeevan Shriram                2015-02-03 16:51:23 -0800 3241) 				(wait_ms/MSEC_PER_SEC), (wait_ms%MSEC_PER_SEC));
126e1a5bd124a (Jeevan Shriram                2015-02-03 16:51:23 -0800 3242) 
126e1a5bd124a (Jeevan Shriram                2015-02-03 16:51:23 -0800 3243) 			ret = sync_fence_wait(fences[i], wait_ms);
126e1a5bd124a (Jeevan Shriram                2015-02-03 16:51:23 -0800 3244) 
126e1a5bd124a (Jeevan Shriram                2015-02-03 16:51:23 -0800 3245) 			if (ret == -ETIME)
126e1a5bd124a (Jeevan Shriram                2015-02-03 16:51:23 -0800 3246) 				break;
0e4772d73332f (Naseer Ahmed                  2013-02-02 15:51:47 -0500 3247) 		}
0df863c8161ca (Adrian Salido-Moreno          2013-10-15 20:31:50 -0700 3248) 		sync_fence_put(fences[i]);
dfdc53d8c422e (Adrian Salido-Moreno          2013-02-12 19:33:02 -0800 3249) 	}
dfdc53d8c422e (Adrian Salido-Moreno          2013-02-12 19:33:02 -0800 3250) 
dfdc53d8c422e (Adrian Salido-Moreno          2013-02-12 19:33:02 -0800 3251) 	if (ret < 0) {
0df863c8161ca (Adrian Salido-Moreno          2013-10-15 20:31:50 -0700 3252) 		pr_err("%s: sync_fence_wait failed! ret = %x\n",
0df863c8161ca (Adrian Salido-Moreno          2013-10-15 20:31:50 -0700 3253) 				sync_pt_data->fence_name, ret);
0df863c8161ca (Adrian Salido-Moreno          2013-10-15 20:31:50 -0700 3254) 		for (; i < fence_cnt; i++)
0df863c8161ca (Adrian Salido-Moreno          2013-10-15 20:31:50 -0700 3255) 			sync_fence_put(fences[i]);
9bc30b3c612e8 (Ken Zhang                     2012-11-07 18:33:16 -0500 3256) 	}
40064f21bec62 (Jeevan Shriram                2015-02-11 15:01:09 -0800 3257) 	return ret;
38154a0adafa9 (Ken Zhang                     2014-07-14 15:39:46 -0400 3258) }
38154a0adafa9 (Ken Zhang                     2014-07-14 15:39:46 -0400 3259) 
38154a0adafa9 (Ken Zhang                     2014-07-14 15:39:46 -0400 3260) int mdss_fb_wait_for_fence(struct msm_sync_pt_data *sync_pt_data)
38154a0adafa9 (Ken Zhang                     2014-07-14 15:39:46 -0400 3261) {
38154a0adafa9 (Ken Zhang                     2014-07-14 15:39:46 -0400 3262) 	struct sync_fence *fences[MDP_MAX_FENCE_FD];
38154a0adafa9 (Ken Zhang                     2014-07-14 15:39:46 -0400 3263) 	int fence_cnt = 0;
38154a0adafa9 (Ken Zhang                     2014-07-14 15:39:46 -0400 3264) 
38154a0adafa9 (Ken Zhang                     2014-07-14 15:39:46 -0400 3265) 	__mdss_fb_copy_fence(sync_pt_data, fences, &fence_cnt);
38154a0adafa9 (Ken Zhang                     2014-07-14 15:39:46 -0400 3266) 
38154a0adafa9 (Ken Zhang                     2014-07-14 15:39:46 -0400 3267) 	if (fence_cnt)
38154a0adafa9 (Ken Zhang                     2014-07-14 15:39:46 -0400 3268) 		__mdss_fb_wait_for_fence_sub(sync_pt_data,
38154a0adafa9 (Ken Zhang                     2014-07-14 15:39:46 -0400 3269) 			fences, fence_cnt);
38154a0adafa9 (Ken Zhang                     2014-07-14 15:39:46 -0400 3270) 
0df863c8161ca (Adrian Salido-Moreno          2013-10-15 20:31:50 -0700 3271) 	return fence_cnt;
6dc064e4432dd (Adrian Salido-Moreno          2013-02-04 17:32:36 -0800 3272) }
6dc064e4432dd (Adrian Salido-Moreno          2013-02-04 17:32:36 -0800 3273) 
0df863c8161ca (Adrian Salido-Moreno          2013-10-15 20:31:50 -0700 3274) /**
0df863c8161ca (Adrian Salido-Moreno          2013-10-15 20:31:50 -0700 3275)  * mdss_fb_signal_timeline() - signal a single release fence
0df863c8161ca (Adrian Salido-Moreno          2013-10-15 20:31:50 -0700 3276)  * @sync_pt_data:	Sync point data structure for the timeline which
0df863c8161ca (Adrian Salido-Moreno          2013-10-15 20:31:50 -0700 3277)  *			should be signaled.
0df863c8161ca (Adrian Salido-Moreno          2013-10-15 20:31:50 -0700 3278)  *
0df863c8161ca (Adrian Salido-Moreno          2013-10-15 20:31:50 -0700 3279)  * This is called after a frame has been pushed to display. This signals the
0df863c8161ca (Adrian Salido-Moreno          2013-10-15 20:31:50 -0700 3280)  * timeline to release the fences associated with this frame.
0df863c8161ca (Adrian Salido-Moreno          2013-10-15 20:31:50 -0700 3281)  */
21a8ee10e53eb (Jayant Shekhar                2013-08-22 12:31:56 +0530 3282) void mdss_fb_signal_timeline(struct msm_sync_pt_data *sync_pt_data)
6dc064e4432dd (Adrian Salido-Moreno          2013-02-04 17:32:36 -0800 3283) {
21a8ee10e53eb (Jayant Shekhar                2013-08-22 12:31:56 +0530 3284) 	mutex_lock(&sync_pt_data->sync_mutex);
0df863c8161ca (Adrian Salido-Moreno          2013-10-15 20:31:50 -0700 3285) 	if (atomic_add_unless(&sync_pt_data->commit_cnt, -1, 0) &&
0df863c8161ca (Adrian Salido-Moreno          2013-10-15 20:31:50 -0700 3286) 			sync_pt_data->timeline) {
0df863c8161ca (Adrian Salido-Moreno          2013-10-15 20:31:50 -0700 3287) 		sw_sync_timeline_inc(sync_pt_data->timeline, 1);
0df863c8161ca (Adrian Salido-Moreno          2013-10-15 20:31:50 -0700 3288) 		sync_pt_data->timeline_value++;
0df863c8161ca (Adrian Salido-Moreno          2013-10-15 20:31:50 -0700 3289) 
0df863c8161ca (Adrian Salido-Moreno          2013-10-15 20:31:50 -0700 3290) 		pr_debug("%s: buffer signaled! timeline val=%d remaining=%d\n",
0df863c8161ca (Adrian Salido-Moreno          2013-10-15 20:31:50 -0700 3291) 			sync_pt_data->fence_name, sync_pt_data->timeline_value,
0df863c8161ca (Adrian Salido-Moreno          2013-10-15 20:31:50 -0700 3292) 			atomic_read(&sync_pt_data->commit_cnt));
0df863c8161ca (Adrian Salido-Moreno          2013-10-15 20:31:50 -0700 3293) 	} else {
0df863c8161ca (Adrian Salido-Moreno          2013-10-15 20:31:50 -0700 3294) 		pr_debug("%s timeline signaled without commits val=%d\n",
0df863c8161ca (Adrian Salido-Moreno          2013-10-15 20:31:50 -0700 3295) 			sync_pt_data->fence_name, sync_pt_data->timeline_value);
0df863c8161ca (Adrian Salido-Moreno          2013-10-15 20:31:50 -0700 3296) 	}
21a8ee10e53eb (Jayant Shekhar                2013-08-22 12:31:56 +0530 3297) 	mutex_unlock(&sync_pt_data->sync_mutex);
9bc30b3c612e8 (Ken Zhang                     2012-11-07 18:33:16 -0500 3298) }
9bc30b3c612e8 (Ken Zhang                     2012-11-07 18:33:16 -0500 3299) 
0df863c8161ca (Adrian Salido-Moreno          2013-10-15 20:31:50 -0700 3300) /**
0df863c8161ca (Adrian Salido-Moreno          2013-10-15 20:31:50 -0700 3301)  * mdss_fb_release_fences() - signal all pending release fences
0df863c8161ca (Adrian Salido-Moreno          2013-10-15 20:31:50 -0700 3302)  * @mfd:	Framebuffer data structure for display
0df863c8161ca (Adrian Salido-Moreno          2013-10-15 20:31:50 -0700 3303)  *
0df863c8161ca (Adrian Salido-Moreno          2013-10-15 20:31:50 -0700 3304)  * Release all currently pending release fences, including those that are in
0df863c8161ca (Adrian Salido-Moreno          2013-10-15 20:31:50 -0700 3305)  * the process to be commited.
0df863c8161ca (Adrian Salido-Moreno          2013-10-15 20:31:50 -0700 3306)  *
0df863c8161ca (Adrian Salido-Moreno          2013-10-15 20:31:50 -0700 3307)  * Note: this should only be called during close or suspend sequence.
0df863c8161ca (Adrian Salido-Moreno          2013-10-15 20:31:50 -0700 3308)  */
9bc30b3c612e8 (Ken Zhang                     2012-11-07 18:33:16 -0500 3309) static void mdss_fb_release_fences(struct msm_fb_data_type *mfd)
9bc30b3c612e8 (Ken Zhang                     2012-11-07 18:33:16 -0500 3310) {
0df863c8161ca (Adrian Salido-Moreno          2013-10-15 20:31:50 -0700 3311) 	struct msm_sync_pt_data *sync_pt_data = &mfd->mdp_sync_pt_data;
0df863c8161ca (Adrian Salido-Moreno          2013-10-15 20:31:50 -0700 3312) 	int val;
21a8ee10e53eb (Jayant Shekhar                2013-08-22 12:31:56 +0530 3313) 
0df863c8161ca (Adrian Salido-Moreno          2013-10-15 20:31:50 -0700 3314) 	mutex_lock(&sync_pt_data->sync_mutex);
0df863c8161ca (Adrian Salido-Moreno          2013-10-15 20:31:50 -0700 3315) 	if (sync_pt_data->timeline) {
0df863c8161ca (Adrian Salido-Moreno          2013-10-15 20:31:50 -0700 3316) 		val = sync_pt_data->threshold +
0df863c8161ca (Adrian Salido-Moreno          2013-10-15 20:31:50 -0700 3317) 			atomic_read(&sync_pt_data->commit_cnt);
0df863c8161ca (Adrian Salido-Moreno          2013-10-15 20:31:50 -0700 3318) 		sw_sync_timeline_inc(sync_pt_data->timeline, val);
0df863c8161ca (Adrian Salido-Moreno          2013-10-15 20:31:50 -0700 3319) 		sync_pt_data->timeline_value += val;
0df863c8161ca (Adrian Salido-Moreno          2013-10-15 20:31:50 -0700 3320) 		atomic_set(&sync_pt_data->commit_cnt, 0);
9bc30b3c612e8 (Ken Zhang                     2012-11-07 18:33:16 -0500 3321) 	}
0df863c8161ca (Adrian Salido-Moreno          2013-10-15 20:31:50 -0700 3322) 	mutex_unlock(&sync_pt_data->sync_mutex);
9bc30b3c612e8 (Ken Zhang                     2012-11-07 18:33:16 -0500 3323) }
ab9f9179e2ec5 (Ken Zhang                     2012-12-02 21:15:47 -0500 3324) 
8865394e2763d (Ken Zhang                     2014-06-10 09:41:03 -0400 3325) static void mdss_fb_release_kickoff(struct msm_fb_data_type *mfd)
8865394e2763d (Ken Zhang                     2014-06-10 09:41:03 -0400 3326) {
8865394e2763d (Ken Zhang                     2014-06-10 09:41:03 -0400 3327) 	if (mfd->wait_for_kickoff) {
8865394e2763d (Ken Zhang                     2014-06-10 09:41:03 -0400 3328) 		atomic_set(&mfd->kickoff_pending, 0);
8865394e2763d (Ken Zhang                     2014-06-10 09:41:03 -0400 3329) 		wake_up_all(&mfd->kickoff_wait_q);
8865394e2763d (Ken Zhang                     2014-06-10 09:41:03 -0400 3330) 	}
8865394e2763d (Ken Zhang                     2014-06-10 09:41:03 -0400 3331) }
8865394e2763d (Ken Zhang                     2014-06-10 09:41:03 -0400 3332) 
a964a547c7031 (Adrian Salido-Moreno          2013-09-19 19:52:09 -0700 3333) /**
a964a547c7031 (Adrian Salido-Moreno          2013-09-19 19:52:09 -0700 3334)  * __mdss_fb_sync_buf_done_callback() - process async display events
a964a547c7031 (Adrian Salido-Moreno          2013-09-19 19:52:09 -0700 3335)  * @p:		Notifier block registered for async events.
a964a547c7031 (Adrian Salido-Moreno          2013-09-19 19:52:09 -0700 3336)  * @event:	Event enum to identify the event.
a964a547c7031 (Adrian Salido-Moreno          2013-09-19 19:52:09 -0700 3337)  * @data:	Optional argument provided with the event.
a964a547c7031 (Adrian Salido-Moreno          2013-09-19 19:52:09 -0700 3338)  *
a964a547c7031 (Adrian Salido-Moreno          2013-09-19 19:52:09 -0700 3339)  * See enum mdp_notify_event for events handled.
a964a547c7031 (Adrian Salido-Moreno          2013-09-19 19:52:09 -0700 3340)  */
a964a547c7031 (Adrian Salido-Moreno          2013-09-19 19:52:09 -0700 3341) static int __mdss_fb_sync_buf_done_callback(struct notifier_block *p,
a964a547c7031 (Adrian Salido-Moreno          2013-09-19 19:52:09 -0700 3342) 		unsigned long event, void *data)
a964a547c7031 (Adrian Salido-Moreno          2013-09-19 19:52:09 -0700 3343) {
a964a547c7031 (Adrian Salido-Moreno          2013-09-19 19:52:09 -0700 3344) 	struct msm_sync_pt_data *sync_pt_data;
824b24b09cd46 (Aravind Venkateswaran         2014-02-06 18:27:27 -0800 3345) 	struct msm_fb_data_type *mfd;
38154a0adafa9 (Ken Zhang                     2014-07-14 15:39:46 -0400 3346) 	int fence_cnt;
40064f21bec62 (Jeevan Shriram                2015-02-11 15:01:09 -0800 3347) 	int ret = NOTIFY_OK;
a964a547c7031 (Adrian Salido-Moreno          2013-09-19 19:52:09 -0700 3348) 
a964a547c7031 (Adrian Salido-Moreno          2013-09-19 19:52:09 -0700 3349) 	sync_pt_data = container_of(p, struct msm_sync_pt_data, notifier);
824b24b09cd46 (Aravind Venkateswaran         2014-02-06 18:27:27 -0800 3350) 	mfd = container_of(sync_pt_data, struct msm_fb_data_type,
824b24b09cd46 (Aravind Venkateswaran         2014-02-06 18:27:27 -0800 3351) 		mdp_sync_pt_data);
a964a547c7031 (Adrian Salido-Moreno          2013-09-19 19:52:09 -0700 3352) 
a964a547c7031 (Adrian Salido-Moreno          2013-09-19 19:52:09 -0700 3353) 	switch (event) {
824b24b09cd46 (Aravind Venkateswaran         2014-02-06 18:27:27 -0800 3354) 	case MDP_NOTIFY_FRAME_BEGIN:
20719c0e3c7a5 (Adrian Salido-Moreno          2014-12-10 16:54:30 -0800 3355) 		if (mfd->idle_time && !mod_delayed_work(system_wq,
20719c0e3c7a5 (Adrian Salido-Moreno          2014-12-10 16:54:30 -0800 3356) 					&mfd->idle_notify_work,
20719c0e3c7a5 (Adrian Salido-Moreno          2014-12-10 16:54:30 -0800 3357) 					msecs_to_jiffies(WAIT_DISP_OP_TIMEOUT)))
20719c0e3c7a5 (Adrian Salido-Moreno          2014-12-10 16:54:30 -0800 3358) 			pr_debug("fb%d: start idle delayed work\n",
20719c0e3c7a5 (Adrian Salido-Moreno          2014-12-10 16:54:30 -0800 3359) 					mfd->index);
20eafef76e5ba (Vinu Deokaran                 2015-07-16 16:14:30 -0700 3360) 
20eafef76e5ba (Vinu Deokaran                 2015-07-16 16:14:30 -0700 3361) 		mfd->idle_state = MDSS_FB_NOT_IDLE;
824b24b09cd46 (Aravind Venkateswaran         2014-02-06 18:27:27 -0800 3362) 		break;
5a390a4d664e3 (Adrian Salido-Moreno          2013-10-15 20:32:11 -0700 3363) 	case MDP_NOTIFY_FRAME_READY:
38154a0adafa9 (Ken Zhang                     2014-07-14 15:39:46 -0400 3364) 		if (sync_pt_data->async_wait_fences &&
38154a0adafa9 (Ken Zhang                     2014-07-14 15:39:46 -0400 3365) 			sync_pt_data->temp_fen_cnt) {
38154a0adafa9 (Ken Zhang                     2014-07-14 15:39:46 -0400 3366) 			fence_cnt = sync_pt_data->temp_fen_cnt;
38154a0adafa9 (Ken Zhang                     2014-07-14 15:39:46 -0400 3367) 			sync_pt_data->temp_fen_cnt = 0;
40064f21bec62 (Jeevan Shriram                2015-02-11 15:01:09 -0800 3368) 			ret = __mdss_fb_wait_for_fence_sub(sync_pt_data,
38154a0adafa9 (Ken Zhang                     2014-07-14 15:39:46 -0400 3369) 				sync_pt_data->temp_fen, fence_cnt);
38154a0adafa9 (Ken Zhang                     2014-07-14 15:39:46 -0400 3370) 		}
20719c0e3c7a5 (Adrian Salido-Moreno          2014-12-10 16:54:30 -0800 3371) 		if (mfd->idle_time && !mod_delayed_work(system_wq,
20719c0e3c7a5 (Adrian Salido-Moreno          2014-12-10 16:54:30 -0800 3372) 					&mfd->idle_notify_work,
20719c0e3c7a5 (Adrian Salido-Moreno          2014-12-10 16:54:30 -0800 3373) 					msecs_to_jiffies(mfd->idle_time)))
20719c0e3c7a5 (Adrian Salido-Moreno          2014-12-10 16:54:30 -0800 3374) 			pr_debug("fb%d: restarted idle work\n",
20719c0e3c7a5 (Adrian Salido-Moreno          2014-12-10 16:54:30 -0800 3375) 					mfd->index);
40064f21bec62 (Jeevan Shriram                2015-02-11 15:01:09 -0800 3376) 		if (ret == -ETIME)
40064f21bec62 (Jeevan Shriram                2015-02-11 15:01:09 -0800 3377) 			ret = NOTIFY_BAD;
20eafef76e5ba (Vinu Deokaran                 2015-07-16 16:14:30 -0700 3378) 		mfd->idle_state = MDSS_FB_IDLE_TIMER_RUNNING;
5a390a4d664e3 (Adrian Salido-Moreno          2013-10-15 20:32:11 -0700 3379) 		break;
a964a547c7031 (Adrian Salido-Moreno          2013-09-19 19:52:09 -0700 3380) 	case MDP_NOTIFY_FRAME_FLUSHED:
a964a547c7031 (Adrian Salido-Moreno          2013-09-19 19:52:09 -0700 3381) 		pr_debug("%s: frame flushed\n", sync_pt_data->fence_name);
a964a547c7031 (Adrian Salido-Moreno          2013-09-19 19:52:09 -0700 3382) 		sync_pt_data->flushed = true;
a964a547c7031 (Adrian Salido-Moreno          2013-09-19 19:52:09 -0700 3383) 		break;
a964a547c7031 (Adrian Salido-Moreno          2013-09-19 19:52:09 -0700 3384) 	case MDP_NOTIFY_FRAME_TIMEOUT:
a964a547c7031 (Adrian Salido-Moreno          2013-09-19 19:52:09 -0700 3385) 		pr_err("%s: frame timeout\n", sync_pt_data->fence_name);
a964a547c7031 (Adrian Salido-Moreno          2013-09-19 19:52:09 -0700 3386) 		mdss_fb_signal_timeline(sync_pt_data);
a964a547c7031 (Adrian Salido-Moreno          2013-09-19 19:52:09 -0700 3387) 		break;
a964a547c7031 (Adrian Salido-Moreno          2013-09-19 19:52:09 -0700 3388) 	case MDP_NOTIFY_FRAME_DONE:
a964a547c7031 (Adrian Salido-Moreno          2013-09-19 19:52:09 -0700 3389) 		pr_debug("%s: frame done\n", sync_pt_data->fence_name);
a964a547c7031 (Adrian Salido-Moreno          2013-09-19 19:52:09 -0700 3390) 		mdss_fb_signal_timeline(sync_pt_data);
90fd65ba93d5c (Krishna Manikandan            2016-12-28 17:58:39 +0530 3391) 		mdss_fb_calc_fps(mfd);
a964a547c7031 (Adrian Salido-Moreno          2013-09-19 19:52:09 -0700 3392) 		break;
38154a0adafa9 (Ken Zhang                     2014-07-14 15:39:46 -0400 3393) 	case MDP_NOTIFY_FRAME_CFG_DONE:
38154a0adafa9 (Ken Zhang                     2014-07-14 15:39:46 -0400 3394) 		if (sync_pt_data->async_wait_fences)
38154a0adafa9 (Ken Zhang                     2014-07-14 15:39:46 -0400 3395) 			__mdss_fb_copy_fence(sync_pt_data,
38154a0adafa9 (Ken Zhang                     2014-07-14 15:39:46 -0400 3396) 					sync_pt_data->temp_fen,
38154a0adafa9 (Ken Zhang                     2014-07-14 15:39:46 -0400 3397) 					&sync_pt_data->temp_fen_cnt);
38154a0adafa9 (Ken Zhang                     2014-07-14 15:39:46 -0400 3398) 		break;
38154a0adafa9 (Ken Zhang                     2014-07-14 15:39:46 -0400 3399) 	case MDP_NOTIFY_FRAME_CTX_DONE:
8865394e2763d (Ken Zhang                     2014-06-10 09:41:03 -0400 3400) 		mdss_fb_release_kickoff(mfd);
8865394e2763d (Ken Zhang                     2014-06-10 09:41:03 -0400 3401) 		break;
a964a547c7031 (Adrian Salido-Moreno          2013-09-19 19:52:09 -0700 3402) 	}
a964a547c7031 (Adrian Salido-Moreno          2013-09-19 19:52:09 -0700 3403) 
40064f21bec62 (Jeevan Shriram                2015-02-11 15:01:09 -0800 3404) 	return ret;
a964a547c7031 (Adrian Salido-Moreno          2013-09-19 19:52:09 -0700 3405) }
0df863c8161ca (Adrian Salido-Moreno          2013-10-15 20:31:50 -0700 3406) 
0df863c8161ca (Adrian Salido-Moreno          2013-10-15 20:31:50 -0700 3407) /**
0df863c8161ca (Adrian Salido-Moreno          2013-10-15 20:31:50 -0700 3408)  * mdss_fb_pan_idle() - wait for panel programming to be idle
0df863c8161ca (Adrian Salido-Moreno          2013-10-15 20:31:50 -0700 3409)  * @mfd:	Framebuffer data structure for display
0df863c8161ca (Adrian Salido-Moreno          2013-10-15 20:31:50 -0700 3410)  *
0df863c8161ca (Adrian Salido-Moreno          2013-10-15 20:31:50 -0700 3411)  * Wait for any pending programming to be done if in the process of programming
0df863c8161ca (Adrian Salido-Moreno          2013-10-15 20:31:50 -0700 3412)  * hardware configuration. After this function returns it is safe to perform
0df863c8161ca (Adrian Salido-Moreno          2013-10-15 20:31:50 -0700 3413)  * software updates for next frame.
0df863c8161ca (Adrian Salido-Moreno          2013-10-15 20:31:50 -0700 3414)  */
272d4979007a1 (Aravind Venkateswaran         2013-11-12 14:33:16 -0800 3415) static int mdss_fb_pan_idle(struct msm_fb_data_type *mfd)
ab9f9179e2ec5 (Ken Zhang                     2012-12-02 21:15:47 -0500 3416) {
272d4979007a1 (Aravind Venkateswaran         2013-11-12 14:33:16 -0800 3417) 	int ret = 0;
ab9f9179e2ec5 (Ken Zhang                     2012-12-02 21:15:47 -0500 3418) 
0df863c8161ca (Adrian Salido-Moreno          2013-10-15 20:31:50 -0700 3419) 	ret = wait_event_timeout(mfd->idle_wait_q,
272d4979007a1 (Aravind Venkateswaran         2013-11-12 14:33:16 -0800 3420) 			(!atomic_read(&mfd->commits_pending) ||
272d4979007a1 (Aravind Venkateswaran         2013-11-12 14:33:16 -0800 3421) 			 mfd->shutdown_pending),
ab9f9179e2ec5 (Ken Zhang                     2012-12-02 21:15:47 -0500 3422) 			msecs_to_jiffies(WAIT_DISP_OP_TIMEOUT));
0df863c8161ca (Adrian Salido-Moreno          2013-10-15 20:31:50 -0700 3423) 	if (!ret) {
7d0209236200d (Adrian Salido-Moreno          2015-01-19 19:16:06 -0800 3424) 		pr_err("%pS: wait for idle timeout commits=%d\n",
7d0209236200d (Adrian Salido-Moreno          2015-01-19 19:16:06 -0800 3425) 				__builtin_return_address(0),
7d0209236200d (Adrian Salido-Moreno          2015-01-19 19:16:06 -0800 3426) 				atomic_read(&mfd->commits_pending));
be40fe4f6586b (Dhaval Patel                  2015-09-23 15:14:52 -0700 3427) 		MDSS_XLOG_TOUT_HANDLER("mdp", "vbif", "vbif_nrt",
be40fe4f6586b (Dhaval Patel                  2015-09-23 15:14:52 -0700 3428) 			"dbg_bus", "vbif_dbg_bus");
26bebe99120eb (Ujwal Patel                   2015-04-22 14:51:12 -0700 3429) 		ret = -ETIMEDOUT;
272d4979007a1 (Aravind Venkateswaran         2013-11-12 14:33:16 -0800 3430) 	} else if (mfd->shutdown_pending) {
272d4979007a1 (Aravind Venkateswaran         2013-11-12 14:33:16 -0800 3431) 		pr_debug("Shutdown signalled\n");
26bebe99120eb (Ujwal Patel                   2015-04-22 14:51:12 -0700 3432) 		ret = -ESHUTDOWN;
26bebe99120eb (Ujwal Patel                   2015-04-22 14:51:12 -0700 3433) 	} else {
26bebe99120eb (Ujwal Patel                   2015-04-22 14:51:12 -0700 3434) 		ret = 0;
ab9f9179e2ec5 (Ken Zhang                     2012-12-02 21:15:47 -0500 3435) 	}
272d4979007a1 (Aravind Venkateswaran         2013-11-12 14:33:16 -0800 3436) 
26bebe99120eb (Ujwal Patel                   2015-04-22 14:51:12 -0700 3437) 	return ret;
ab9f9179e2ec5 (Ken Zhang                     2012-12-02 21:15:47 -0500 3438) }
ab9f9179e2ec5 (Ken Zhang                     2012-12-02 21:15:47 -0500 3439) 
206478bf63dde (Ken Zhang                     2014-04-13 18:28:20 -0400 3440) static int mdss_fb_wait_for_kickoff(struct msm_fb_data_type *mfd)
206478bf63dde (Ken Zhang                     2014-04-13 18:28:20 -0400 3441) {
206478bf63dde (Ken Zhang                     2014-04-13 18:28:20 -0400 3442) 	int ret = 0;
206478bf63dde (Ken Zhang                     2014-04-13 18:28:20 -0400 3443) 
b9ebb7be67745 (Adrian Salido-Moreno          2014-11-04 20:34:16 -0800 3444) 	if (!mfd->wait_for_kickoff)
b9ebb7be67745 (Adrian Salido-Moreno          2014-11-04 20:34:16 -0800 3445) 		return mdss_fb_pan_idle(mfd);
b9ebb7be67745 (Adrian Salido-Moreno          2014-11-04 20:34:16 -0800 3446) 
206478bf63dde (Ken Zhang                     2014-04-13 18:28:20 -0400 3447) 	ret = wait_event_timeout(mfd->kickoff_wait_q,
206478bf63dde (Ken Zhang                     2014-04-13 18:28:20 -0400 3448) 			(!atomic_read(&mfd->kickoff_pending) ||
206478bf63dde (Ken Zhang                     2014-04-13 18:28:20 -0400 3449) 			 mfd->shutdown_pending),
126e1a5bd124a (Jeevan Shriram                2015-02-03 16:51:23 -0800 3450) 			msecs_to_jiffies(WAIT_DISP_OP_TIMEOUT));
206478bf63dde (Ken Zhang                     2014-04-13 18:28:20 -0400 3451) 	if (!ret) {
7d0209236200d (Adrian Salido-Moreno          2015-01-19 19:16:06 -0800 3452) 		pr_err("%pS: wait for kickoff timeout koff=%d commits=%d\n",
7d0209236200d (Adrian Salido-Moreno          2015-01-19 19:16:06 -0800 3453) 				__builtin_return_address(0),
7d0209236200d (Adrian Salido-Moreno          2015-01-19 19:16:06 -0800 3454) 				atomic_read(&mfd->kickoff_pending),
7d0209236200d (Adrian Salido-Moreno          2015-01-19 19:16:06 -0800 3455) 				atomic_read(&mfd->commits_pending));
be40fe4f6586b (Dhaval Patel                  2015-09-23 15:14:52 -0700 3456) 		MDSS_XLOG_TOUT_HANDLER("mdp", "vbif", "vbif_nrt",
be40fe4f6586b (Dhaval Patel                  2015-09-23 15:14:52 -0700 3457) 			"dbg_bus", "vbif_dbg_bus");
26bebe99120eb (Ujwal Patel                   2015-04-22 14:51:12 -0700 3458) 		ret = -ETIMEDOUT;
206478bf63dde (Ken Zhang                     2014-04-13 18:28:20 -0400 3459) 	} else if (mfd->shutdown_pending) {
206478bf63dde (Ken Zhang                     2014-04-13 18:28:20 -0400 3460) 		pr_debug("Shutdown signalled\n");
26bebe99120eb (Ujwal Patel                   2015-04-22 14:51:12 -0700 3461) 		ret = -ESHUTDOWN;
26bebe99120eb (Ujwal Patel                   2015-04-22 14:51:12 -0700 3462) 	} else {
26bebe99120eb (Ujwal Patel                   2015-04-22 14:51:12 -0700 3463) 		ret = 0;
206478bf63dde (Ken Zhang                     2014-04-13 18:28:20 -0400 3464) 	}
206478bf63dde (Ken Zhang                     2014-04-13 18:28:20 -0400 3465) 
26bebe99120eb (Ujwal Patel                   2015-04-22 14:51:12 -0700 3466) 	return ret;
206478bf63dde (Ken Zhang                     2014-04-13 18:28:20 -0400 3467) }
272d4979007a1 (Aravind Venkateswaran         2013-11-12 14:33:16 -0800 3468) 
ab9f9179e2ec5 (Ken Zhang                     2012-12-02 21:15:47 -0500 3469) static int mdss_fb_pan_display_ex(struct fb_info *info,
ab9f9179e2ec5 (Ken Zhang                     2012-12-02 21:15:47 -0500 3470) 		struct mdp_display_commit *disp_commit)
ab9f9179e2ec5 (Ken Zhang                     2012-12-02 21:15:47 -0500 3471) {
ab9f9179e2ec5 (Ken Zhang                     2012-12-02 21:15:47 -0500 3472) 	struct msm_fb_data_type *mfd = (struct msm_fb_data_type *)info->par;
ab9f9179e2ec5 (Ken Zhang                     2012-12-02 21:15:47 -0500 3473) 	struct fb_var_screeninfo *var = &disp_commit->var;
ab9f9179e2ec5 (Ken Zhang                     2012-12-02 21:15:47 -0500 3474) 	u32 wait_for_finish = disp_commit->wait_for_finish;
ab9f9179e2ec5 (Ken Zhang                     2012-12-02 21:15:47 -0500 3475) 	int ret = 0;
ab9f9179e2ec5 (Ken Zhang                     2012-12-02 21:15:47 -0500 3476) 
7d9accc73821f (Zohaib Alam                   2014-06-10 01:09:52 -0400 3477) 	if (!mfd || (!mfd->op_enable))
7d9accc73821f (Zohaib Alam                   2014-06-10 01:09:52 -0400 3478) 		return -EPERM;
7d9accc73821f (Zohaib Alam                   2014-06-10 01:09:52 -0400 3479) 
49036d7c0ebbd (Aravind Venkateswaran         2014-08-01 17:20:51 -0700 3480) 	if ((mdss_fb_is_power_off(mfd)) &&
b9095befda98a (Aravind Venkateswaran         2014-07-28 23:24:46 -0700 3481) 		!((mfd->dcm_state == DCM_ENTER) &&
b9095befda98a (Aravind Venkateswaran         2014-07-28 23:24:46 -0700 3482) 		(mfd->panel.type == MIPI_CMD_PANEL)))
ab9f9179e2ec5 (Ken Zhang                     2012-12-02 21:15:47 -0500 3483) 		return -EPERM;
ab9f9179e2ec5 (Ken Zhang                     2012-12-02 21:15:47 -0500 3484) 
ab9f9179e2ec5 (Ken Zhang                     2012-12-02 21:15:47 -0500 3485) 	if (var->xoffset > (info->var.xres_virtual - info->var.xres))
ab9f9179e2ec5 (Ken Zhang                     2012-12-02 21:15:47 -0500 3486) 		return -EINVAL;
ab9f9179e2ec5 (Ken Zhang                     2012-12-02 21:15:47 -0500 3487) 
ab9f9179e2ec5 (Ken Zhang                     2012-12-02 21:15:47 -0500 3488) 	if (var->yoffset > (info->var.yres_virtual - info->var.yres))
ab9f9179e2ec5 (Ken Zhang                     2012-12-02 21:15:47 -0500 3489) 		return -EINVAL;
ab9f9179e2ec5 (Ken Zhang                     2012-12-02 21:15:47 -0500 3490) 
acb7e2f792643 (Naseer Ahmed                  2016-07-11 15:48:03 -0400 3491) 	ret = mdss_fb_pan_idle(mfd);
272d4979007a1 (Aravind Venkateswaran         2013-11-12 14:33:16 -0800 3492) 	if (ret) {
26bebe99120eb (Ujwal Patel                   2015-04-22 14:51:12 -0700 3493) 		pr_err("wait_for_kick failed. rc=%d\n", ret);
272d4979007a1 (Aravind Venkateswaran         2013-11-12 14:33:16 -0800 3494) 		return ret;
272d4979007a1 (Aravind Venkateswaran         2013-11-12 14:33:16 -0800 3495) 	}
ab9f9179e2ec5 (Ken Zhang                     2012-12-02 21:15:47 -0500 3496) 
84019e7e6c836 (Adrian Salido-Moreno          2015-02-05 14:50:42 -0800 3497) 	if (mfd->mdp.pre_commit_fnc) {
84019e7e6c836 (Adrian Salido-Moreno          2015-02-05 14:50:42 -0800 3498) 		ret = mfd->mdp.pre_commit_fnc(mfd);
84019e7e6c836 (Adrian Salido-Moreno          2015-02-05 14:50:42 -0800 3499) 		if (ret) {
84019e7e6c836 (Adrian Salido-Moreno          2015-02-05 14:50:42 -0800 3500) 			pr_err("fb%d: pre commit failed %d\n",
84019e7e6c836 (Adrian Salido-Moreno          2015-02-05 14:50:42 -0800 3501) 					mfd->index, ret);
84019e7e6c836 (Adrian Salido-Moreno          2015-02-05 14:50:42 -0800 3502) 			return ret;
84019e7e6c836 (Adrian Salido-Moreno          2015-02-05 14:50:42 -0800 3503) 		}
84019e7e6c836 (Adrian Salido-Moreno          2015-02-05 14:50:42 -0800 3504) 	}
84019e7e6c836 (Adrian Salido-Moreno          2015-02-05 14:50:42 -0800 3505) 
21a8ee10e53eb (Jayant Shekhar                2013-08-22 12:31:56 +0530 3506) 	mutex_lock(&mfd->mdp_sync_pt_data.sync_mutex);
ab9f9179e2ec5 (Ken Zhang                     2012-12-02 21:15:47 -0500 3507) 	if (info->fix.xpanstep)
ab9f9179e2ec5 (Ken Zhang                     2012-12-02 21:15:47 -0500 3508) 		info->var.xoffset =
ab9f9179e2ec5 (Ken Zhang                     2012-12-02 21:15:47 -0500 3509) 		(var->xoffset / info->fix.xpanstep) * info->fix.xpanstep;
ab9f9179e2ec5 (Ken Zhang                     2012-12-02 21:15:47 -0500 3510) 
ab9f9179e2ec5 (Ken Zhang                     2012-12-02 21:15:47 -0500 3511) 	if (info->fix.ypanstep)
ab9f9179e2ec5 (Ken Zhang                     2012-12-02 21:15:47 -0500 3512) 		info->var.yoffset =
ab9f9179e2ec5 (Ken Zhang                     2012-12-02 21:15:47 -0500 3513) 		(var->yoffset / info->fix.ypanstep) * info->fix.ypanstep;
ab9f9179e2ec5 (Ken Zhang                     2012-12-02 21:15:47 -0500 3514) 
0df863c8161ca (Adrian Salido-Moreno          2013-10-15 20:31:50 -0700 3515) 	mfd->msm_fb_backup.info = *info;
0df863c8161ca (Adrian Salido-Moreno          2013-10-15 20:31:50 -0700 3516) 	mfd->msm_fb_backup.disp_commit = *disp_commit;
0df863c8161ca (Adrian Salido-Moreno          2013-10-15 20:31:50 -0700 3517) 
0df863c8161ca (Adrian Salido-Moreno          2013-10-15 20:31:50 -0700 3518) 	atomic_inc(&mfd->mdp_sync_pt_data.commit_cnt);
0df863c8161ca (Adrian Salido-Moreno          2013-10-15 20:31:50 -0700 3519) 	atomic_inc(&mfd->commits_pending);
206478bf63dde (Ken Zhang                     2014-04-13 18:28:20 -0400 3520) 	atomic_inc(&mfd->kickoff_pending);
0df863c8161ca (Adrian Salido-Moreno          2013-10-15 20:31:50 -0700 3521) 	wake_up_all(&mfd->commit_wait_q);
21a8ee10e53eb (Jayant Shekhar                2013-08-22 12:31:56 +0530 3522) 	mutex_unlock(&mfd->mdp_sync_pt_data.sync_mutex);
26bebe99120eb (Ujwal Patel                   2015-04-22 14:51:12 -0700 3523) 	if (wait_for_finish) {
26bebe99120eb (Ujwal Patel                   2015-04-22 14:51:12 -0700 3524) 		ret = mdss_fb_pan_idle(mfd);
26bebe99120eb (Ujwal Patel                   2015-04-22 14:51:12 -0700 3525) 		if (ret)
26bebe99120eb (Ujwal Patel                   2015-04-22 14:51:12 -0700 3526) 			pr_err("mdss_fb_pan_idle failed. rc=%d\n", ret);
26bebe99120eb (Ujwal Patel                   2015-04-22 14:51:12 -0700 3527) 	}
ab9f9179e2ec5 (Ken Zhang                     2012-12-02 21:15:47 -0500 3528) 	return ret;
ab9f9179e2ec5 (Ken Zhang                     2012-12-02 21:15:47 -0500 3529) }
ab9f9179e2ec5 (Ken Zhang                     2012-12-02 21:15:47 -0500 3530) 
4cba013e17a90 (Terence Hampson               2015-04-02 11:38:58 -0400 3531) u32 mdss_fb_get_mode_switch(struct msm_fb_data_type *mfd)
4cba013e17a90 (Terence Hampson               2015-04-02 11:38:58 -0400 3532) {
4cba013e17a90 (Terence Hampson               2015-04-02 11:38:58 -0400 3533) 	/* If there is no attached mfd then there is no pending mode switch */
4cba013e17a90 (Terence Hampson               2015-04-02 11:38:58 -0400 3534) 	if (!mfd)
4cba013e17a90 (Terence Hampson               2015-04-02 11:38:58 -0400 3535) 		return 0;
4cba013e17a90 (Terence Hampson               2015-04-02 11:38:58 -0400 3536) 
4cba013e17a90 (Terence Hampson               2015-04-02 11:38:58 -0400 3537) 	if (mfd->pending_switch)
4cba013e17a90 (Terence Hampson               2015-04-02 11:38:58 -0400 3538) 		return mfd->switch_new_mode;
4cba013e17a90 (Terence Hampson               2015-04-02 11:38:58 -0400 3539) 
4cba013e17a90 (Terence Hampson               2015-04-02 11:38:58 -0400 3540) 	return 0;
4cba013e17a90 (Terence Hampson               2015-04-02 11:38:58 -0400 3541) }
4cba013e17a90 (Terence Hampson               2015-04-02 11:38:58 -0400 3542) 
4cba013e17a90 (Terence Hampson               2015-04-02 11:38:58 -0400 3543) /*
4cba013e17a90 (Terence Hampson               2015-04-02 11:38:58 -0400 3544)  * __ioctl_transition_dyn_mode_state() - State machine for mode switch
4cba013e17a90 (Terence Hampson               2015-04-02 11:38:58 -0400 3545)  * @mfd:	Framebuffer data structure for display
4cba013e17a90 (Terence Hampson               2015-04-02 11:38:58 -0400 3546)  * @cmd:	ioctl that was called
4cba013e17a90 (Terence Hampson               2015-04-02 11:38:58 -0400 3547)  * @validate:	used with atomic commit when doing validate layers
4cba013e17a90 (Terence Hampson               2015-04-02 11:38:58 -0400 3548)  *
4cba013e17a90 (Terence Hampson               2015-04-02 11:38:58 -0400 3549)  * This function assists with dynamic mode switch of DSI panel. States
4cba013e17a90 (Terence Hampson               2015-04-02 11:38:58 -0400 3550)  * are used to make sure that panel mode switch occurs on next
4cba013e17a90 (Terence Hampson               2015-04-02 11:38:58 -0400 3551)  * prepare/sync/commit (for legacy) and validate/pre_commit (for
4cba013e17a90 (Terence Hampson               2015-04-02 11:38:58 -0400 3552)  * atomic commit) pairing. This state machine insure that calculation
4cba013e17a90 (Terence Hampson               2015-04-02 11:38:58 -0400 3553)  * and return values (such as buffer release fences) are based on the
4cba013e17a90 (Terence Hampson               2015-04-02 11:38:58 -0400 3554)  * panel mode being switching into.
4cba013e17a90 (Terence Hampson               2015-04-02 11:38:58 -0400 3555)  */
649c91d1cd61d (Adrian Salido-Moreno          2015-04-23 18:33:56 -0700 3556) static int __ioctl_transition_dyn_mode_state(struct msm_fb_data_type *mfd,
df73dce85c64f (Veera Sundaram Sankaran       2016-04-15 11:57:24 -0700 3557) 		unsigned int cmd, bool validate, bool null_commit)
4cba013e17a90 (Terence Hampson               2015-04-02 11:38:58 -0400 3558) {
649c91d1cd61d (Adrian Salido-Moreno          2015-04-23 18:33:56 -0700 3559) 	if (mfd->switch_state == MDSS_MDP_NO_UPDATE_REQUESTED)
4cba013e17a90 (Terence Hampson               2015-04-02 11:38:58 -0400 3560) 		return 0;
4cba013e17a90 (Terence Hampson               2015-04-02 11:38:58 -0400 3561) 
4cba013e17a90 (Terence Hampson               2015-04-02 11:38:58 -0400 3562) 	mutex_lock(&mfd->switch_lock);
4cba013e17a90 (Terence Hampson               2015-04-02 11:38:58 -0400 3563) 	switch (cmd) {
4cba013e17a90 (Terence Hampson               2015-04-02 11:38:58 -0400 3564) 	case MSMFB_ATOMIC_COMMIT:
df73dce85c64f (Veera Sundaram Sankaran       2016-04-15 11:57:24 -0700 3565) 		if ((mfd->switch_state == MDSS_MDP_WAIT_FOR_VALIDATE)
df73dce85c64f (Veera Sundaram Sankaran       2016-04-15 11:57:24 -0700 3566) 				&& validate) {
649c91d1cd61d (Adrian Salido-Moreno          2015-04-23 18:33:56 -0700 3567) 			if (mfd->switch_new_mode != SWITCH_RESOLUTION)
649c91d1cd61d (Adrian Salido-Moreno          2015-04-23 18:33:56 -0700 3568) 				mfd->pending_switch = true;
df73dce85c64f (Veera Sundaram Sankaran       2016-04-15 11:57:24 -0700 3569) 			mfd->switch_state = MDSS_MDP_WAIT_FOR_COMMIT;
df73dce85c64f (Veera Sundaram Sankaran       2016-04-15 11:57:24 -0700 3570) 		} else if (mfd->switch_state == MDSS_MDP_WAIT_FOR_COMMIT) {
649c91d1cd61d (Adrian Salido-Moreno          2015-04-23 18:33:56 -0700 3571) 			if (mfd->switch_new_mode != SWITCH_RESOLUTION)
649c91d1cd61d (Adrian Salido-Moreno          2015-04-23 18:33:56 -0700 3572) 				mdss_fb_set_mdp_sync_pt_threshold(mfd,
649c91d1cd61d (Adrian Salido-Moreno          2015-04-23 18:33:56 -0700 3573) 					mfd->switch_new_mode);
df73dce85c64f (Veera Sundaram Sankaran       2016-04-15 11:57:24 -0700 3574) 			mfd->switch_state = MDSS_MDP_WAIT_FOR_KICKOFF;
df73dce85c64f (Veera Sundaram Sankaran       2016-04-15 11:57:24 -0700 3575) 		} else if ((mfd->switch_state == MDSS_MDP_WAIT_FOR_VALIDATE)
df73dce85c64f (Veera Sundaram Sankaran       2016-04-15 11:57:24 -0700 3576) 				&& null_commit) {
df73dce85c64f (Veera Sundaram Sankaran       2016-04-15 11:57:24 -0700 3577) 			mfd->switch_state = MDSS_MDP_WAIT_FOR_KICKOFF;
4cba013e17a90 (Terence Hampson               2015-04-02 11:38:58 -0400 3578) 		}
4cba013e17a90 (Terence Hampson               2015-04-02 11:38:58 -0400 3579) 		break;
4cba013e17a90 (Terence Hampson               2015-04-02 11:38:58 -0400 3580) 	}
4cba013e17a90 (Terence Hampson               2015-04-02 11:38:58 -0400 3581) 	mutex_unlock(&mfd->switch_lock);
4cba013e17a90 (Terence Hampson               2015-04-02 11:38:58 -0400 3582) 	return 0;
4cba013e17a90 (Terence Hampson               2015-04-02 11:38:58 -0400 3583) }
4cba013e17a90 (Terence Hampson               2015-04-02 11:38:58 -0400 3584) 
38a6f65128052 (Veera Sundaram Sankaran       2015-12-23 14:47:04 -0800 3585) static inline bool mdss_fb_is_wb_config_same(struct msm_fb_data_type *mfd,
38a6f65128052 (Veera Sundaram Sankaran       2015-12-23 14:47:04 -0800 3586) 		struct mdp_output_layer *output_layer)
38a6f65128052 (Veera Sundaram Sankaran       2015-12-23 14:47:04 -0800 3587) {
38a6f65128052 (Veera Sundaram Sankaran       2015-12-23 14:47:04 -0800 3588) 	struct mdss_overlay_private *mdp5_data = mfd_to_mdp5_data(mfd);
38a6f65128052 (Veera Sundaram Sankaran       2015-12-23 14:47:04 -0800 3589) 	struct msm_mdp_interface *mdp5_interface = &mfd->mdp;
38a6f65128052 (Veera Sundaram Sankaran       2015-12-23 14:47:04 -0800 3590) 
38a6f65128052 (Veera Sundaram Sankaran       2015-12-23 14:47:04 -0800 3591) 	if (!mdp5_data->wfd
38a6f65128052 (Veera Sundaram Sankaran       2015-12-23 14:47:04 -0800 3592) 		|| (mdp5_interface->is_config_same
38a6f65128052 (Veera Sundaram Sankaran       2015-12-23 14:47:04 -0800 3593) 		&& !mdp5_interface->is_config_same(mfd, output_layer)))
38a6f65128052 (Veera Sundaram Sankaran       2015-12-23 14:47:04 -0800 3594) 		return false;
38a6f65128052 (Veera Sundaram Sankaran       2015-12-23 14:47:04 -0800 3595) 	return true;
38a6f65128052 (Veera Sundaram Sankaran       2015-12-23 14:47:04 -0800 3596) }
38a6f65128052 (Veera Sundaram Sankaran       2015-12-23 14:47:04 -0800 3597) 
38a6f65128052 (Veera Sundaram Sankaran       2015-12-23 14:47:04 -0800 3598) /* update pinfo and var for WB on config change */
38a6f65128052 (Veera Sundaram Sankaran       2015-12-23 14:47:04 -0800 3599) static void mdss_fb_update_resolution(struct msm_fb_data_type *mfd,
38a6f65128052 (Veera Sundaram Sankaran       2015-12-23 14:47:04 -0800 3600) 		u32 xres, u32 yres, u32 format)
38a6f65128052 (Veera Sundaram Sankaran       2015-12-23 14:47:04 -0800 3601) {
38a6f65128052 (Veera Sundaram Sankaran       2015-12-23 14:47:04 -0800 3602) 	struct mdss_panel_info *pinfo = mfd->panel_info;
38a6f65128052 (Veera Sundaram Sankaran       2015-12-23 14:47:04 -0800 3603) 	struct fb_var_screeninfo *var = &mfd->fbi->var;
38a6f65128052 (Veera Sundaram Sankaran       2015-12-23 14:47:04 -0800 3604) 	struct fb_fix_screeninfo *fix = &mfd->fbi->fix;
38a6f65128052 (Veera Sundaram Sankaran       2015-12-23 14:47:04 -0800 3605) 	struct mdss_mdp_format_params *fmt = NULL;
38a6f65128052 (Veera Sundaram Sankaran       2015-12-23 14:47:04 -0800 3606) 
38a6f65128052 (Veera Sundaram Sankaran       2015-12-23 14:47:04 -0800 3607) 	pinfo->xres = xres;
38a6f65128052 (Veera Sundaram Sankaran       2015-12-23 14:47:04 -0800 3608) 	pinfo->yres = yres;
38a6f65128052 (Veera Sundaram Sankaran       2015-12-23 14:47:04 -0800 3609) 	mfd->fb_imgType = format;
38a6f65128052 (Veera Sundaram Sankaran       2015-12-23 14:47:04 -0800 3610) 	if (mfd->mdp.get_format_params) {
38a6f65128052 (Veera Sundaram Sankaran       2015-12-23 14:47:04 -0800 3611) 		fmt = mfd->mdp.get_format_params(format);
38a6f65128052 (Veera Sundaram Sankaran       2015-12-23 14:47:04 -0800 3612) 		if (fmt) {
38a6f65128052 (Veera Sundaram Sankaran       2015-12-23 14:47:04 -0800 3613) 			pinfo->bpp = fmt->bpp;
38a6f65128052 (Veera Sundaram Sankaran       2015-12-23 14:47:04 -0800 3614) 			var->bits_per_pixel = fmt->bpp * 8;
38a6f65128052 (Veera Sundaram Sankaran       2015-12-23 14:47:04 -0800 3615) 		}
38a6f65128052 (Veera Sundaram Sankaran       2015-12-23 14:47:04 -0800 3616) 		if (mfd->mdp.fb_stride)
38a6f65128052 (Veera Sundaram Sankaran       2015-12-23 14:47:04 -0800 3617) 			fix->line_length = mfd->mdp.fb_stride(mfd->index,
38a6f65128052 (Veera Sundaram Sankaran       2015-12-23 14:47:04 -0800 3618) 						var->xres,
38a6f65128052 (Veera Sundaram Sankaran       2015-12-23 14:47:04 -0800 3619) 						var->bits_per_pixel / 8);
38a6f65128052 (Veera Sundaram Sankaran       2015-12-23 14:47:04 -0800 3620) 		else
38a6f65128052 (Veera Sundaram Sankaran       2015-12-23 14:47:04 -0800 3621) 			fix->line_length = var->xres * var->bits_per_pixel / 8;
38a6f65128052 (Veera Sundaram Sankaran       2015-12-23 14:47:04 -0800 3622) 
38a6f65128052 (Veera Sundaram Sankaran       2015-12-23 14:47:04 -0800 3623) 	}
38a6f65128052 (Veera Sundaram Sankaran       2015-12-23 14:47:04 -0800 3624) 	var->xres_virtual = var->xres;
38a6f65128052 (Veera Sundaram Sankaran       2015-12-23 14:47:04 -0800 3625) 	var->yres_virtual = pinfo->yres * mfd->fb_page;
38a6f65128052 (Veera Sundaram Sankaran       2015-12-23 14:47:04 -0800 3626) 	mdss_panelinfo_to_fb_var(pinfo, var);
38a6f65128052 (Veera Sundaram Sankaran       2015-12-23 14:47:04 -0800 3627) }
38a6f65128052 (Veera Sundaram Sankaran       2015-12-23 14:47:04 -0800 3628) 
be2ca2761e376 (Dhaval Patel                  2014-10-29 15:33:30 -0700 3629) int mdss_fb_atomic_commit(struct fb_info *info,
75af757c1b7ba (Dhaval Patel                  2015-11-04 14:01:09 -0800 3630) 	struct mdp_layer_commit  *commit, struct file *file)
be2ca2761e376 (Dhaval Patel                  2014-10-29 15:33:30 -0700 3631) {
be2ca2761e376 (Dhaval Patel                  2014-10-29 15:33:30 -0700 3632) 	struct msm_fb_data_type *mfd = (struct msm_fb_data_type *)info->par;
be2ca2761e376 (Dhaval Patel                  2014-10-29 15:33:30 -0700 3633) 	struct mdp_layer_commit_v1 *commit_v1;
38a6f65128052 (Veera Sundaram Sankaran       2015-12-23 14:47:04 -0800 3634) 	struct mdp_output_layer *output_layer;
38a6f65128052 (Veera Sundaram Sankaran       2015-12-23 14:47:04 -0800 3635) 	struct mdss_panel_info *pinfo;
38a6f65128052 (Veera Sundaram Sankaran       2015-12-23 14:47:04 -0800 3636) 	bool wait_for_finish, wb_change = false;
be2ca2761e376 (Dhaval Patel                  2014-10-29 15:33:30 -0700 3637) 	int ret = -EPERM;
38a6f65128052 (Veera Sundaram Sankaran       2015-12-23 14:47:04 -0800 3638) 	u32 old_xres, old_yres, old_format;
be2ca2761e376 (Dhaval Patel                  2014-10-29 15:33:30 -0700 3639) 
be2ca2761e376 (Dhaval Patel                  2014-10-29 15:33:30 -0700 3640) 	if (!mfd || (!mfd->op_enable)) {
be2ca2761e376 (Dhaval Patel                  2014-10-29 15:33:30 -0700 3641) 		pr_err("mfd is NULL or operation not permitted\n");
e4d22fbab14df (Dhaval Patel                  2016-03-15 17:43:59 -0700 3642) 		return -EPERM;
be2ca2761e376 (Dhaval Patel                  2014-10-29 15:33:30 -0700 3643) 	}
be2ca2761e376 (Dhaval Patel                  2014-10-29 15:33:30 -0700 3644) 
be2ca2761e376 (Dhaval Patel                  2014-10-29 15:33:30 -0700 3645) 	if ((mdss_fb_is_power_off(mfd)) &&
be2ca2761e376 (Dhaval Patel                  2014-10-29 15:33:30 -0700 3646) 		!((mfd->dcm_state == DCM_ENTER) &&
be2ca2761e376 (Dhaval Patel                  2014-10-29 15:33:30 -0700 3647) 		(mfd->panel.type == MIPI_CMD_PANEL))) {
be2ca2761e376 (Dhaval Patel                  2014-10-29 15:33:30 -0700 3648) 		pr_err("commit is not supported when interface is in off state\n");
be2ca2761e376 (Dhaval Patel                  2014-10-29 15:33:30 -0700 3649) 		goto end;
be2ca2761e376 (Dhaval Patel                  2014-10-29 15:33:30 -0700 3650) 	}
38a6f65128052 (Veera Sundaram Sankaran       2015-12-23 14:47:04 -0800 3651) 	pinfo = mfd->panel_info;
be2ca2761e376 (Dhaval Patel                  2014-10-29 15:33:30 -0700 3652) 
be2ca2761e376 (Dhaval Patel                  2014-10-29 15:33:30 -0700 3653) 	/* only supports version 1.0 */
be2ca2761e376 (Dhaval Patel                  2014-10-29 15:33:30 -0700 3654) 	if (commit->version != MDP_COMMIT_VERSION_1_0) {
be2ca2761e376 (Dhaval Patel                  2014-10-29 15:33:30 -0700 3655) 		pr_err("commit version is not supported\n");
be2ca2761e376 (Dhaval Patel                  2014-10-29 15:33:30 -0700 3656) 		goto end;
be2ca2761e376 (Dhaval Patel                  2014-10-29 15:33:30 -0700 3657) 	}
be2ca2761e376 (Dhaval Patel                  2014-10-29 15:33:30 -0700 3658) 
be2ca2761e376 (Dhaval Patel                  2014-10-29 15:33:30 -0700 3659) 	if (!mfd->mdp.pre_commit || !mfd->mdp.atomic_validate) {
be2ca2761e376 (Dhaval Patel                  2014-10-29 15:33:30 -0700 3660) 		pr_err("commit callback is not registered\n");
be2ca2761e376 (Dhaval Patel                  2014-10-29 15:33:30 -0700 3661) 		goto end;
be2ca2761e376 (Dhaval Patel                  2014-10-29 15:33:30 -0700 3662) 	}
be2ca2761e376 (Dhaval Patel                  2014-10-29 15:33:30 -0700 3663) 
be2ca2761e376 (Dhaval Patel                  2014-10-29 15:33:30 -0700 3664) 	commit_v1 = &commit->commit_v1;
be2ca2761e376 (Dhaval Patel                  2014-10-29 15:33:30 -0700 3665) 	if (commit_v1->flags & MDP_VALIDATE_LAYER) {
be2ca2761e376 (Dhaval Patel                  2014-10-29 15:33:30 -0700 3666) 		ret = mdss_fb_wait_for_kickoff(mfd);
4cba013e17a90 (Terence Hampson               2015-04-02 11:38:58 -0400 3667) 		if (ret) {
be2ca2761e376 (Dhaval Patel                  2014-10-29 15:33:30 -0700 3668) 			pr_err("wait for kickoff failed\n");
4cba013e17a90 (Terence Hampson               2015-04-02 11:38:58 -0400 3669) 		} else {
4cba013e17a90 (Terence Hampson               2015-04-02 11:38:58 -0400 3670) 			__ioctl_transition_dyn_mode_state(mfd,
df73dce85c64f (Veera Sundaram Sankaran       2016-04-15 11:57:24 -0700 3671) 				MSMFB_ATOMIC_COMMIT, true, false);
38a6f65128052 (Veera Sundaram Sankaran       2015-12-23 14:47:04 -0800 3672) 			if (mfd->panel.type == WRITEBACK_PANEL) {
38a6f65128052 (Veera Sundaram Sankaran       2015-12-23 14:47:04 -0800 3673) 				output_layer = commit_v1->output_layer;
ef8e3cd4588b5 (Rajkumar Subbiah              2017-05-15 15:17:14 -0400 3674) 				if (!output_layer) {
ef8e3cd4588b5 (Rajkumar Subbiah              2017-05-15 15:17:14 -0400 3675) 					pr_err("Output layer is null\n");
ef8e3cd4588b5 (Rajkumar Subbiah              2017-05-15 15:17:14 -0400 3676) 					goto end;
ef8e3cd4588b5 (Rajkumar Subbiah              2017-05-15 15:17:14 -0400 3677) 				}
38a6f65128052 (Veera Sundaram Sankaran       2015-12-23 14:47:04 -0800 3678) 				wb_change = !mdss_fb_is_wb_config_same(mfd,
38a6f65128052 (Veera Sundaram Sankaran       2015-12-23 14:47:04 -0800 3679) 						commit_v1->output_layer);
38a6f65128052 (Veera Sundaram Sankaran       2015-12-23 14:47:04 -0800 3680) 				if (wb_change) {
38a6f65128052 (Veera Sundaram Sankaran       2015-12-23 14:47:04 -0800 3681) 					old_xres = pinfo->xres;
38a6f65128052 (Veera Sundaram Sankaran       2015-12-23 14:47:04 -0800 3682) 					old_yres = pinfo->yres;
38a6f65128052 (Veera Sundaram Sankaran       2015-12-23 14:47:04 -0800 3683) 					old_format = mfd->fb_imgType;
38a6f65128052 (Veera Sundaram Sankaran       2015-12-23 14:47:04 -0800 3684) 					mdss_fb_update_resolution(mfd,
38a6f65128052 (Veera Sundaram Sankaran       2015-12-23 14:47:04 -0800 3685) 						output_layer->buffer.width,
38a6f65128052 (Veera Sundaram Sankaran       2015-12-23 14:47:04 -0800 3686) 						output_layer->buffer.height,
38a6f65128052 (Veera Sundaram Sankaran       2015-12-23 14:47:04 -0800 3687) 						output_layer->buffer.format);
38a6f65128052 (Veera Sundaram Sankaran       2015-12-23 14:47:04 -0800 3688) 				}
38a6f65128052 (Veera Sundaram Sankaran       2015-12-23 14:47:04 -0800 3689) 			}
d6bf565bedd22 (Dhaval Patel                  2015-03-27 19:03:33 -0700 3690) 			ret = mfd->mdp.atomic_validate(mfd, file, commit_v1);
c657b3d1c2943 (Ingrid Gallardo               2015-06-29 20:55:41 -0700 3691) 			if (!ret)
933552698c028 (Dhaval Patel                  2015-12-21 16:27:52 -0800 3692) 				mfd->atomic_commit_pending = true;
4cba013e17a90 (Terence Hampson               2015-04-02 11:38:58 -0400 3693) 		}
be2ca2761e376 (Dhaval Patel                  2014-10-29 15:33:30 -0700 3694) 		goto end;
be2ca2761e376 (Dhaval Patel                  2014-10-29 15:33:30 -0700 3695) 	} else {
be2ca2761e376 (Dhaval Patel                  2014-10-29 15:33:30 -0700 3696) 		ret = mdss_fb_pan_idle(mfd);
be2ca2761e376 (Dhaval Patel                  2014-10-29 15:33:30 -0700 3697) 		if (ret) {
be2ca2761e376 (Dhaval Patel                  2014-10-29 15:33:30 -0700 3698) 			pr_err("pan display idle call failed\n");
be2ca2761e376 (Dhaval Patel                  2014-10-29 15:33:30 -0700 3699) 			goto end;
be2ca2761e376 (Dhaval Patel                  2014-10-29 15:33:30 -0700 3700) 		}
df73dce85c64f (Veera Sundaram Sankaran       2016-04-15 11:57:24 -0700 3701) 		__ioctl_transition_dyn_mode_state(mfd,
df73dce85c64f (Veera Sundaram Sankaran       2016-04-15 11:57:24 -0700 3702) 			MSMFB_ATOMIC_COMMIT, false,
df73dce85c64f (Veera Sundaram Sankaran       2016-04-15 11:57:24 -0700 3703) 			(commit_v1->input_layer_cnt ? 0 : 1));
be2ca2761e376 (Dhaval Patel                  2014-10-29 15:33:30 -0700 3704) 
d6bf565bedd22 (Dhaval Patel                  2015-03-27 19:03:33 -0700 3705) 		ret = mfd->mdp.pre_commit(mfd, file, commit_v1);
be2ca2761e376 (Dhaval Patel                  2014-10-29 15:33:30 -0700 3706) 		if (ret) {
be2ca2761e376 (Dhaval Patel                  2014-10-29 15:33:30 -0700 3707) 			pr_err("atomic pre commit failed\n");
be2ca2761e376 (Dhaval Patel                  2014-10-29 15:33:30 -0700 3708) 			goto end;
be2ca2761e376 (Dhaval Patel                  2014-10-29 15:33:30 -0700 3709) 		}
be2ca2761e376 (Dhaval Patel                  2014-10-29 15:33:30 -0700 3710) 	}
be2ca2761e376 (Dhaval Patel                  2014-10-29 15:33:30 -0700 3711) 
be2ca2761e376 (Dhaval Patel                  2014-10-29 15:33:30 -0700 3712) 	wait_for_finish = commit_v1->flags & MDP_COMMIT_WAIT_FOR_FINISH;
be2ca2761e376 (Dhaval Patel                  2014-10-29 15:33:30 -0700 3713) 	mfd->msm_fb_backup.atomic_commit = true;
be2ca2761e376 (Dhaval Patel                  2014-10-29 15:33:30 -0700 3714) 	mfd->msm_fb_backup.disp_commit.l_roi =  commit_v1->left_roi;
be2ca2761e376 (Dhaval Patel                  2014-10-29 15:33:30 -0700 3715) 	mfd->msm_fb_backup.disp_commit.r_roi =  commit_v1->right_roi;
d5da41a9807d9 (Veera Sundaram Sankaran       2016-10-10 17:14:32 -0700 3716) 	mfd->msm_fb_backup.disp_commit.flags =  commit_v1->flags;
6baec9abc01da (Xu Yang                       2017-02-15 09:29:27 +0800 3717) 	if (commit_v1->flags & MDP_COMMIT_UPDATE_BRIGHTNESS) {
6baec9abc01da (Xu Yang                       2017-02-15 09:29:27 +0800 3718) 		MDSS_BRIGHT_TO_BL(mfd->bl_extn_level, commit_v1->bl_level,
6baec9abc01da (Xu Yang                       2017-02-15 09:29:27 +0800 3719) 			mfd->panel_info->bl_max,
6baec9abc01da (Xu Yang                       2017-02-15 09:29:27 +0800 3720) 			mfd->panel_info->brightness_max);
6baec9abc01da (Xu Yang                       2017-02-15 09:29:27 +0800 3721) 		if (!mfd->bl_extn_level && commit_v1->bl_level)
6baec9abc01da (Xu Yang                       2017-02-15 09:29:27 +0800 3722) 			mfd->bl_extn_level = 1;
6baec9abc01da (Xu Yang                       2017-02-15 09:29:27 +0800 3723) 	} else
6baec9abc01da (Xu Yang                       2017-02-15 09:29:27 +0800 3724) 		mfd->bl_extn_level = -1;
be2ca2761e376 (Dhaval Patel                  2014-10-29 15:33:30 -0700 3725) 
be2ca2761e376 (Dhaval Patel                  2014-10-29 15:33:30 -0700 3726) 	mutex_lock(&mfd->mdp_sync_pt_data.sync_mutex);
be2ca2761e376 (Dhaval Patel                  2014-10-29 15:33:30 -0700 3727) 	atomic_inc(&mfd->mdp_sync_pt_data.commit_cnt);
be2ca2761e376 (Dhaval Patel                  2014-10-29 15:33:30 -0700 3728) 	atomic_inc(&mfd->commits_pending);
be2ca2761e376 (Dhaval Patel                  2014-10-29 15:33:30 -0700 3729) 	atomic_inc(&mfd->kickoff_pending);
be2ca2761e376 (Dhaval Patel                  2014-10-29 15:33:30 -0700 3730) 	wake_up_all(&mfd->commit_wait_q);
be2ca2761e376 (Dhaval Patel                  2014-10-29 15:33:30 -0700 3731) 	mutex_unlock(&mfd->mdp_sync_pt_data.sync_mutex);
be2ca2761e376 (Dhaval Patel                  2014-10-29 15:33:30 -0700 3732) 
be2ca2761e376 (Dhaval Patel                  2014-10-29 15:33:30 -0700 3733) 	if (wait_for_finish)
be2ca2761e376 (Dhaval Patel                  2014-10-29 15:33:30 -0700 3734) 		ret = mdss_fb_pan_idle(mfd);
be2ca2761e376 (Dhaval Patel                  2014-10-29 15:33:30 -0700 3735) 
be2ca2761e376 (Dhaval Patel                  2014-10-29 15:33:30 -0700 3736) end:
38a6f65128052 (Veera Sundaram Sankaran       2015-12-23 14:47:04 -0800 3737) 	if (ret && (mfd->panel.type == WRITEBACK_PANEL) && wb_change)
38a6f65128052 (Veera Sundaram Sankaran       2015-12-23 14:47:04 -0800 3738) 		mdss_fb_update_resolution(mfd, old_xres, old_yres, old_format);
be2ca2761e376 (Dhaval Patel                  2014-10-29 15:33:30 -0700 3739) 	return ret;
be2ca2761e376 (Dhaval Patel                  2014-10-29 15:33:30 -0700 3740) }
be2ca2761e376 (Dhaval Patel                  2014-10-29 15:33:30 -0700 3741) 
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 3742) static int mdss_fb_pan_display(struct fb_var_screeninfo *var,
ab9f9179e2ec5 (Ken Zhang                     2012-12-02 21:15:47 -0500 3743) 		struct fb_info *info)
ab9f9179e2ec5 (Ken Zhang                     2012-12-02 21:15:47 -0500 3744) {
ab9f9179e2ec5 (Ken Zhang                     2012-12-02 21:15:47 -0500 3745) 	struct mdp_display_commit disp_commit;
649c91d1cd61d (Adrian Salido-Moreno          2015-04-23 18:33:56 -0700 3746) 	struct msm_fb_data_type *mfd = (struct msm_fb_data_type *)info->par;
cadc1614708b9 (Venkata Prahlad Valluru       2019-05-07 19:58:00 +0530 3747) 	struct mdss_data_type *mdata = mfd_to_mdata(mfd);
649c91d1cd61d (Adrian Salido-Moreno          2015-04-23 18:33:56 -0700 3748) 
649c91d1cd61d (Adrian Salido-Moreno          2015-04-23 18:33:56 -0700 3749) 	/*
cadc1614708b9 (Venkata Prahlad Valluru       2019-05-07 19:58:00 +0530 3750) 	 * Abort pan_display operations in following cases:
cadc1614708b9 (Venkata Prahlad Valluru       2019-05-07 19:58:00 +0530 3751) 	 * 1. during mode switch through mode sysfs node, it will trigger a
cadc1614708b9 (Venkata Prahlad Valluru       2019-05-07 19:58:00 +0530 3752) 	 *    pan_display after switch. This assumes that fb has been adjusted,
cadc1614708b9 (Venkata Prahlad Valluru       2019-05-07 19:58:00 +0530 3753) 	 *    however when using overlays we may not have the right size at this
cadc1614708b9 (Venkata Prahlad Valluru       2019-05-07 19:58:00 +0530 3754) 	 *    point, so it needs to go through PREPARE first.
cadc1614708b9 (Venkata Prahlad Valluru       2019-05-07 19:58:00 +0530 3755) 	 * 2. When the splash handoff is pending.
649c91d1cd61d (Adrian Salido-Moreno          2015-04-23 18:33:56 -0700 3756) 	 */
cadc1614708b9 (Venkata Prahlad Valluru       2019-05-07 19:58:00 +0530 3757) 	if ((mfd->switch_state != MDSS_MDP_NO_UPDATE_REQUESTED) ||
0000000000000 (Not Committed Yet             2020-02-26 11:37:22 +0800 3758) <<<<<<< HEAD
cadc1614708b9 (Venkata Prahlad Valluru       2019-05-07 19:58:00 +0530 3759) 			mdata->handoff_pending) {
0000000000000 (Not Committed Yet             2020-02-26 11:37:22 +0800 3760) =======
2fe2cba7ce9dc (raghavendra ambadas           2019-07-16 10:24:16 +0530 3761) 		(mdss_fb_is_hdmi_primary(mfd) && mdata->handoff_pending)) {
0000000000000 (Not Committed Yet             2020-02-26 11:37:22 +0800 3762) >>>>>>> 8afadade9c593161a74242c2c30073fdc5a397ff
cadc1614708b9 (Venkata Prahlad Valluru       2019-05-07 19:58:00 +0530 3763) 		pr_debug("fb%d: pan_display skipped during switch or handoff\n",
649c91d1cd61d (Adrian Salido-Moreno          2015-04-23 18:33:56 -0700 3764) 				mfd->index);
649c91d1cd61d (Adrian Salido-Moreno          2015-04-23 18:33:56 -0700 3765) 		return 0;
649c91d1cd61d (Adrian Salido-Moreno          2015-04-23 18:33:56 -0700 3766) 	}
649c91d1cd61d (Adrian Salido-Moreno          2015-04-23 18:33:56 -0700 3767) 
ab9f9179e2ec5 (Ken Zhang                     2012-12-02 21:15:47 -0500 3768) 	memset(&disp_commit, 0, sizeof(disp_commit));
ab9f9179e2ec5 (Ken Zhang                     2012-12-02 21:15:47 -0500 3769) 	disp_commit.wait_for_finish = true;
123b0b8feca28 (Terence Hampson               2013-04-17 20:03:16 -0700 3770) 	memcpy(&disp_commit.var, var, sizeof(struct fb_var_screeninfo));
ab9f9179e2ec5 (Ken Zhang                     2012-12-02 21:15:47 -0500 3771) 	return mdss_fb_pan_display_ex(info, &disp_commit);
ab9f9179e2ec5 (Ken Zhang                     2012-12-02 21:15:47 -0500 3772) }
ab9f9179e2ec5 (Ken Zhang                     2012-12-02 21:15:47 -0500 3773) 
ab9f9179e2ec5 (Ken Zhang                     2012-12-02 21:15:47 -0500 3774) static int mdss_fb_pan_display_sub(struct fb_var_screeninfo *var,
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 3775) 			       struct fb_info *info)
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 3776) {
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 3777) 	struct msm_fb_data_type *mfd = (struct msm_fb_data_type *)info->par;
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 3778) 
6c8d6db018316 (Alan Kwong                    2016-05-16 21:43:18 -0400 3779) 	if (!mfd || !var) {
668252dbaee73 (Abhijit Kulkarni              2016-06-15 10:30:50 -0700 3780) 		pr_err("Invalid parameters mfd:%pK var:%pK\n", mfd, var);
6c8d6db018316 (Alan Kwong                    2016-05-16 21:43:18 -0400 3781) 		return -EINVAL;
6c8d6db018316 (Alan Kwong                    2016-05-16 21:43:18 -0400 3782) 	}
6c8d6db018316 (Alan Kwong                    2016-05-16 21:43:18 -0400 3783) 
7d9accc73821f (Zohaib Alam                   2014-06-10 01:09:52 -0400 3784) 	if (!mfd->op_enable)
7d9accc73821f (Zohaib Alam                   2014-06-10 01:09:52 -0400 3785) 		return -EPERM;
7d9accc73821f (Zohaib Alam                   2014-06-10 01:09:52 -0400 3786) 
49036d7c0ebbd (Aravind Venkateswaran         2014-08-01 17:20:51 -0700 3787) 	if ((mdss_fb_is_power_off(mfd)) &&
b9095befda98a (Aravind Venkateswaran         2014-07-28 23:24:46 -0700 3788) 		!((mfd->dcm_state == DCM_ENTER) &&
b9095befda98a (Aravind Venkateswaran         2014-07-28 23:24:46 -0700 3789) 		(mfd->panel.type == MIPI_CMD_PANEL)))
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 3790) 		return -EPERM;
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 3791) 
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 3792) 	if (var->xoffset > (info->var.xres_virtual - info->var.xres))
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 3793) 		return -EINVAL;
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 3794) 
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 3795) 	if (var->yoffset > (info->var.yres_virtual - info->var.yres))
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 3796) 		return -EINVAL;
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 3797) 
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 3798) 	if (info->fix.xpanstep)
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 3799) 		info->var.xoffset =
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 3800) 		(var->xoffset / info->fix.xpanstep) * info->fix.xpanstep;
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 3801) 
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 3802) 	if (info->fix.ypanstep)
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 3803) 		info->var.yoffset =
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 3804) 		(var->yoffset / info->fix.ypanstep) * info->fix.ypanstep;
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 3805) 
b192f3c2c194b (Xiaoming Zhou                 2012-12-21 21:23:15 -0500 3806) 	if (mfd->mdp.dma_fnc)
fb9d80000c238 (Dhaval Patel                  2014-03-19 17:04:29 -0700 3807) 		mfd->mdp.dma_fnc(mfd);
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 3808) 	else
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 3809) 		pr_warn("dma function not set for panel type=%d\n",
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 3810) 				mfd->panel.type);
0df863c8161ca (Adrian Salido-Moreno          2013-10-15 20:31:50 -0700 3811) 
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 3812) 	return 0;
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 3813) }
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 3814) 
f6fb77ca7d114 (Tatenda Chipeperekwa          2015-02-23 21:18:29 -0800 3815) static int mdss_grayscale_to_mdp_format(u32 grayscale)
f6fb77ca7d114 (Tatenda Chipeperekwa          2015-02-23 21:18:29 -0800 3816) {
f6fb77ca7d114 (Tatenda Chipeperekwa          2015-02-23 21:18:29 -0800 3817) 	switch (grayscale) {
f6fb77ca7d114 (Tatenda Chipeperekwa          2015-02-23 21:18:29 -0800 3818) 	case V4L2_PIX_FMT_RGB24:
f6fb77ca7d114 (Tatenda Chipeperekwa          2015-02-23 21:18:29 -0800 3819) 		return MDP_RGB_888;
f6fb77ca7d114 (Tatenda Chipeperekwa          2015-02-23 21:18:29 -0800 3820) 	case V4L2_PIX_FMT_NV12:
f6fb77ca7d114 (Tatenda Chipeperekwa          2015-02-23 21:18:29 -0800 3821) 		return MDP_Y_CBCR_H2V2;
f6fb77ca7d114 (Tatenda Chipeperekwa          2015-02-23 21:18:29 -0800 3822) 	default:
f6fb77ca7d114 (Tatenda Chipeperekwa          2015-02-23 21:18:29 -0800 3823) 		return -EINVAL;
f6fb77ca7d114 (Tatenda Chipeperekwa          2015-02-23 21:18:29 -0800 3824) 	}
f6fb77ca7d114 (Tatenda Chipeperekwa          2015-02-23 21:18:29 -0800 3825) }
f6fb77ca7d114 (Tatenda Chipeperekwa          2015-02-23 21:18:29 -0800 3826) 
38bc092bedf35 (Adrian Salido-Moreno          2012-11-28 18:41:33 -0800 3827) static void mdss_fb_var_to_panelinfo(struct fb_var_screeninfo *var,
38bc092bedf35 (Adrian Salido-Moreno          2012-11-28 18:41:33 -0800 3828) 	struct mdss_panel_info *pinfo)
38bc092bedf35 (Adrian Salido-Moreno          2012-11-28 18:41:33 -0800 3829) {
f6fb77ca7d114 (Tatenda Chipeperekwa          2015-02-23 21:18:29 -0800 3830) 	int format = -EINVAL;
f6fb77ca7d114 (Tatenda Chipeperekwa          2015-02-23 21:18:29 -0800 3831) 
38bc092bedf35 (Adrian Salido-Moreno          2012-11-28 18:41:33 -0800 3832) 	pinfo->xres = var->xres;
38bc092bedf35 (Adrian Salido-Moreno          2012-11-28 18:41:33 -0800 3833) 	pinfo->yres = var->yres;
ed727bc153163 (Ujwal Patel                   2012-12-12 16:30:18 -0800 3834) 	pinfo->lcdc.v_front_porch = var->lower_margin;
ed727bc153163 (Ujwal Patel                   2012-12-12 16:30:18 -0800 3835) 	pinfo->lcdc.v_back_porch = var->upper_margin;
38bc092bedf35 (Adrian Salido-Moreno          2012-11-28 18:41:33 -0800 3836) 	pinfo->lcdc.v_pulse_width = var->vsync_len;
ed727bc153163 (Ujwal Patel                   2012-12-12 16:30:18 -0800 3837) 	pinfo->lcdc.h_front_porch = var->right_margin;
ed727bc153163 (Ujwal Patel                   2012-12-12 16:30:18 -0800 3838) 	pinfo->lcdc.h_back_porch = var->left_margin;
38bc092bedf35 (Adrian Salido-Moreno          2012-11-28 18:41:33 -0800 3839) 	pinfo->lcdc.h_pulse_width = var->hsync_len;
f6fb77ca7d114 (Tatenda Chipeperekwa          2015-02-23 21:18:29 -0800 3840) 
f6fb77ca7d114 (Tatenda Chipeperekwa          2015-02-23 21:18:29 -0800 3841) 	if (var->grayscale > 1) {
f6fb77ca7d114 (Tatenda Chipeperekwa          2015-02-23 21:18:29 -0800 3842) 		format = mdss_grayscale_to_mdp_format(var->grayscale);
f6fb77ca7d114 (Tatenda Chipeperekwa          2015-02-23 21:18:29 -0800 3843) 		if (!IS_ERR_VALUE(format))
f6fb77ca7d114 (Tatenda Chipeperekwa          2015-02-23 21:18:29 -0800 3844) 			pinfo->out_format = format;
f6fb77ca7d114 (Tatenda Chipeperekwa          2015-02-23 21:18:29 -0800 3845) 		else
f6fb77ca7d114 (Tatenda Chipeperekwa          2015-02-23 21:18:29 -0800 3846) 			pr_warn("Failed to map grayscale value (%d) to an MDP format\n",
f6fb77ca7d114 (Tatenda Chipeperekwa          2015-02-23 21:18:29 -0800 3847) 					var->grayscale);
f6fb77ca7d114 (Tatenda Chipeperekwa          2015-02-23 21:18:29 -0800 3848) 	}
d9f95bd8d910d (Adrian Salido-Moreno          2015-08-21 15:42:52 -0700 3849) 
d9f95bd8d910d (Adrian Salido-Moreno          2015-08-21 15:42:52 -0700 3850) 	/*
d9f95bd8d910d (Adrian Salido-Moreno          2015-08-21 15:42:52 -0700 3851) 	 * if greater than 1M, then rate would fall below 1mhz which is not
d9f95bd8d910d (Adrian Salido-Moreno          2015-08-21 15:42:52 -0700 3852) 	 * even supported. In this case it means clock rate is actually
d9f95bd8d910d (Adrian Salido-Moreno          2015-08-21 15:42:52 -0700 3853) 	 * passed directly in hz.
d9f95bd8d910d (Adrian Salido-Moreno          2015-08-21 15:42:52 -0700 3854) 	 */
d9f95bd8d910d (Adrian Salido-Moreno          2015-08-21 15:42:52 -0700 3855) 	if (var->pixclock > SZ_1M)
d9f95bd8d910d (Adrian Salido-Moreno          2015-08-21 15:42:52 -0700 3856) 		pinfo->clk_rate = var->pixclock;
d9f95bd8d910d (Adrian Salido-Moreno          2015-08-21 15:42:52 -0700 3857) 	else
d9f95bd8d910d (Adrian Salido-Moreno          2015-08-21 15:42:52 -0700 3858) 		pinfo->clk_rate = PICOS2KHZ(var->pixclock) * 1000;
40783c97f5d6f (Ingrid Gallardo               2016-03-22 17:14:39 -0700 3859) 
40783c97f5d6f (Ingrid Gallardo               2016-03-22 17:14:39 -0700 3860) 	/*
40783c97f5d6f (Ingrid Gallardo               2016-03-22 17:14:39 -0700 3861) 	 * if it is a DBA panel i.e. HDMI TV connected through
40783c97f5d6f (Ingrid Gallardo               2016-03-22 17:14:39 -0700 3862) 	 * DSI interface, then store the pixel clock value in
40783c97f5d6f (Ingrid Gallardo               2016-03-22 17:14:39 -0700 3863) 	 * DSI specific variable.
40783c97f5d6f (Ingrid Gallardo               2016-03-22 17:14:39 -0700 3864) 	 */
40783c97f5d6f (Ingrid Gallardo               2016-03-22 17:14:39 -0700 3865) 	if (pinfo->is_dba_panel)
40783c97f5d6f (Ingrid Gallardo               2016-03-22 17:14:39 -0700 3866) 		pinfo->mipi.dsi_pclk_rate = pinfo->clk_rate;
d12c004a3121a (Casey Piper                   2015-04-13 11:58:50 -0700 3867) 
d12c004a3121a (Casey Piper                   2015-04-13 11:58:50 -0700 3868) 	if (var->sync & FB_SYNC_HOR_HIGH_ACT)
d12c004a3121a (Casey Piper                   2015-04-13 11:58:50 -0700 3869) 		pinfo->lcdc.h_polarity = 0;
d12c004a3121a (Casey Piper                   2015-04-13 11:58:50 -0700 3870) 	else
d12c004a3121a (Casey Piper                   2015-04-13 11:58:50 -0700 3871) 		pinfo->lcdc.h_polarity = 1;
d12c004a3121a (Casey Piper                   2015-04-13 11:58:50 -0700 3872) 
d12c004a3121a (Casey Piper                   2015-04-13 11:58:50 -0700 3873) 	if (var->sync & FB_SYNC_VERT_HIGH_ACT)
d12c004a3121a (Casey Piper                   2015-04-13 11:58:50 -0700 3874) 		pinfo->lcdc.v_polarity = 0;
d12c004a3121a (Casey Piper                   2015-04-13 11:58:50 -0700 3875) 	else
d12c004a3121a (Casey Piper                   2015-04-13 11:58:50 -0700 3876) 		pinfo->lcdc.v_polarity = 1;
38bc092bedf35 (Adrian Salido-Moreno          2012-11-28 18:41:33 -0800 3877) }
38bc092bedf35 (Adrian Salido-Moreno          2012-11-28 18:41:33 -0800 3878) 
ce623e2090a41 (Ingrid Gallardo               2015-10-08 15:15:37 -0700 3879) void mdss_panelinfo_to_fb_var(struct mdss_panel_info *pinfo,
0507b2f2e28d0 (Veera Sundaram Sankaran       2014-08-29 14:03:48 -0700 3880) 						struct fb_var_screeninfo *var)
0507b2f2e28d0 (Veera Sundaram Sankaran       2014-08-29 14:03:48 -0700 3881) {
8370151cfe4d3 (Veera Sundaram Sankaran       2016-04-28 18:36:38 -0700 3882) 	u32 frame_rate;
8370151cfe4d3 (Veera Sundaram Sankaran       2016-04-28 18:36:38 -0700 3883) 
d9f95bd8d910d (Adrian Salido-Moreno          2015-08-21 15:42:52 -0700 3884) 	var->xres = mdss_fb_get_panel_xres(pinfo);
0507b2f2e28d0 (Veera Sundaram Sankaran       2014-08-29 14:03:48 -0700 3885) 	var->yres = pinfo->yres;
2707818973b22 (Ingrid Gallardo               2015-05-12 22:25:41 -0700 3886) 	var->lower_margin = pinfo->lcdc.v_front_porch -
2707818973b22 (Ingrid Gallardo               2015-05-12 22:25:41 -0700 3887) 		pinfo->prg_fet;
2707818973b22 (Ingrid Gallardo               2015-05-12 22:25:41 -0700 3888) 	var->upper_margin = pinfo->lcdc.v_back_porch +
2707818973b22 (Ingrid Gallardo               2015-05-12 22:25:41 -0700 3889) 		pinfo->prg_fet;
0507b2f2e28d0 (Veera Sundaram Sankaran       2014-08-29 14:03:48 -0700 3890) 	var->vsync_len = pinfo->lcdc.v_pulse_width;
0507b2f2e28d0 (Veera Sundaram Sankaran       2014-08-29 14:03:48 -0700 3891) 	var->right_margin = pinfo->lcdc.h_front_porch;
0507b2f2e28d0 (Veera Sundaram Sankaran       2014-08-29 14:03:48 -0700 3892) 	var->left_margin = pinfo->lcdc.h_back_porch;
0507b2f2e28d0 (Veera Sundaram Sankaran       2014-08-29 14:03:48 -0700 3893) 	var->hsync_len = pinfo->lcdc.h_pulse_width;
d9f95bd8d910d (Adrian Salido-Moreno          2015-08-21 15:42:52 -0700 3894) 
8370151cfe4d3 (Veera Sundaram Sankaran       2016-04-28 18:36:38 -0700 3895) 	frame_rate = mdss_panel_get_framerate(pinfo);
8370151cfe4d3 (Veera Sundaram Sankaran       2016-04-28 18:36:38 -0700 3896) 	if (frame_rate) {
8370151cfe4d3 (Veera Sundaram Sankaran       2016-04-28 18:36:38 -0700 3897) 		unsigned long clk_rate, h_total, v_total;
8370151cfe4d3 (Veera Sundaram Sankaran       2016-04-28 18:36:38 -0700 3898) 
8370151cfe4d3 (Veera Sundaram Sankaran       2016-04-28 18:36:38 -0700 3899) 		h_total = var->xres + var->left_margin
8370151cfe4d3 (Veera Sundaram Sankaran       2016-04-28 18:36:38 -0700 3900) 			+ var->right_margin + var->hsync_len;
8370151cfe4d3 (Veera Sundaram Sankaran       2016-04-28 18:36:38 -0700 3901) 		v_total = var->yres + var->lower_margin
8370151cfe4d3 (Veera Sundaram Sankaran       2016-04-28 18:36:38 -0700 3902) 			+ var->upper_margin + var->vsync_len;
8370151cfe4d3 (Veera Sundaram Sankaran       2016-04-28 18:36:38 -0700 3903) 		clk_rate = h_total * v_total * frame_rate;
8370151cfe4d3 (Veera Sundaram Sankaran       2016-04-28 18:36:38 -0700 3904) 		var->pixclock = KHZ2PICOS(clk_rate / 1000);
8370151cfe4d3 (Veera Sundaram Sankaran       2016-04-28 18:36:38 -0700 3905) 	} else if (pinfo->clk_rate) {
8370151cfe4d3 (Veera Sundaram Sankaran       2016-04-28 18:36:38 -0700 3906) 		var->pixclock = KHZ2PICOS(
8370151cfe4d3 (Veera Sundaram Sankaran       2016-04-28 18:36:38 -0700 3907) 				(unsigned long int) pinfo->clk_rate / 1000);
8370151cfe4d3 (Veera Sundaram Sankaran       2016-04-28 18:36:38 -0700 3908) 	}
8370151cfe4d3 (Veera Sundaram Sankaran       2016-04-28 18:36:38 -0700 3909) 
d9f95bd8d910d (Adrian Salido-Moreno          2015-08-21 15:42:52 -0700 3910) 	if (pinfo->physical_width)
d9f95bd8d910d (Adrian Salido-Moreno          2015-08-21 15:42:52 -0700 3911) 		var->width = pinfo->physical_width;
d9f95bd8d910d (Adrian Salido-Moreno          2015-08-21 15:42:52 -0700 3912) 	if (pinfo->physical_height)
d9f95bd8d910d (Adrian Salido-Moreno          2015-08-21 15:42:52 -0700 3913) 		var->height = pinfo->physical_height;
ce623e2090a41 (Ingrid Gallardo               2015-10-08 15:15:37 -0700 3914) 
ce623e2090a41 (Ingrid Gallardo               2015-10-08 15:15:37 -0700 3915) 	pr_debug("ScreenInfo: res=%dx%d [%d, %d] [%d, %d]\n",
ce623e2090a41 (Ingrid Gallardo               2015-10-08 15:15:37 -0700 3916) 		var->xres, var->yres, var->left_margin,
ce623e2090a41 (Ingrid Gallardo               2015-10-08 15:15:37 -0700 3917) 		var->right_margin, var->upper_margin,
ce623e2090a41 (Ingrid Gallardo               2015-10-08 15:15:37 -0700 3918) 		var->lower_margin);
0507b2f2e28d0 (Veera Sundaram Sankaran       2014-08-29 14:03:48 -0700 3919) }
0507b2f2e28d0 (Veera Sundaram Sankaran       2014-08-29 14:03:48 -0700 3920) 
0df863c8161ca (Adrian Salido-Moreno          2013-10-15 20:31:50 -0700 3921) /**
0df863c8161ca (Adrian Salido-Moreno          2013-10-15 20:31:50 -0700 3922)  * __mdss_fb_perform_commit() - process a frame to display
0df863c8161ca (Adrian Salido-Moreno          2013-10-15 20:31:50 -0700 3923)  * @mfd:	Framebuffer data structure for display
0df863c8161ca (Adrian Salido-Moreno          2013-10-15 20:31:50 -0700 3924)  *
0df863c8161ca (Adrian Salido-Moreno          2013-10-15 20:31:50 -0700 3925)  * Processes all layers and buffers programmed and ensures all pending release
0df863c8161ca (Adrian Salido-Moreno          2013-10-15 20:31:50 -0700 3926)  * fences are signaled once the buffer is transfered to display.
0df863c8161ca (Adrian Salido-Moreno          2013-10-15 20:31:50 -0700 3927)  */
0df863c8161ca (Adrian Salido-Moreno          2013-10-15 20:31:50 -0700 3928) static int __mdss_fb_perform_commit(struct msm_fb_data_type *mfd)
ab9f9179e2ec5 (Ken Zhang                     2012-12-02 21:15:47 -0500 3929) {
0df863c8161ca (Adrian Salido-Moreno          2013-10-15 20:31:50 -0700 3930) 	struct msm_sync_pt_data *sync_pt_data = &mfd->mdp_sync_pt_data;
0df863c8161ca (Adrian Salido-Moreno          2013-10-15 20:31:50 -0700 3931) 	struct msm_fb_backup_type *fb_backup = &mfd->msm_fb_backup;
0df863c8161ca (Adrian Salido-Moreno          2013-10-15 20:31:50 -0700 3932) 	int ret = -ENOSYS;
07930a15004de (Terence Hampson               2015-01-21 13:36:24 -0500 3933) 	u32 new_dsi_mode, dynamic_dsi_switch = 0;
0df863c8161ca (Adrian Salido-Moreno          2013-10-15 20:31:50 -0700 3934) 
5a390a4d664e3 (Adrian Salido-Moreno          2013-10-15 20:32:11 -0700 3935) 	if (!sync_pt_data->async_wait_fences)
5a390a4d664e3 (Adrian Salido-Moreno          2013-10-15 20:32:11 -0700 3936) 		mdss_fb_wait_for_fence(sync_pt_data);
a964a547c7031 (Adrian Salido-Moreno          2013-09-19 19:52:09 -0700 3937) 	sync_pt_data->flushed = false;
ab9f9179e2ec5 (Ken Zhang                     2012-12-02 21:15:47 -0500 3938) 
07930a15004de (Terence Hampson               2015-01-21 13:36:24 -0500 3939) 	mutex_lock(&mfd->switch_lock);
df73dce85c64f (Veera Sundaram Sankaran       2016-04-15 11:57:24 -0700 3940) 	if (mfd->switch_state == MDSS_MDP_WAIT_FOR_KICKOFF) {
07930a15004de (Terence Hampson               2015-01-21 13:36:24 -0500 3941) 		dynamic_dsi_switch = 1;
07930a15004de (Terence Hampson               2015-01-21 13:36:24 -0500 3942) 		new_dsi_mode = mfd->switch_new_mode;
db2b74c45630a (Adrian Salido-Moreno          2015-09-01 18:17:07 -0700 3943) 	} else if (mfd->switch_state != MDSS_MDP_NO_UPDATE_REQUESTED) {
db2b74c45630a (Adrian Salido-Moreno          2015-09-01 18:17:07 -0700 3944) 		pr_err("invalid commit on fb%d with state = %d\n",
db2b74c45630a (Adrian Salido-Moreno          2015-09-01 18:17:07 -0700 3945) 			mfd->index, mfd->switch_state);
db2b74c45630a (Adrian Salido-Moreno          2015-09-01 18:17:07 -0700 3946) 		mutex_unlock(&mfd->switch_lock);
db2b74c45630a (Adrian Salido-Moreno          2015-09-01 18:17:07 -0700 3947) 		goto skip_commit;
07930a15004de (Terence Hampson               2015-01-21 13:36:24 -0500 3948) 	}
07930a15004de (Terence Hampson               2015-01-21 13:36:24 -0500 3949) 	mutex_unlock(&mfd->switch_lock);
07930a15004de (Terence Hampson               2015-01-21 13:36:24 -0500 3950) 	if (dynamic_dsi_switch) {
df73dce85c64f (Veera Sundaram Sankaran       2016-04-15 11:57:24 -0700 3951) 		MDSS_XLOG(mfd->index, mfd->split_mode, new_dsi_mode,
df73dce85c64f (Veera Sundaram Sankaran       2016-04-15 11:57:24 -0700 3952) 			XLOG_FUNC_ENTRY);
07930a15004de (Terence Hampson               2015-01-21 13:36:24 -0500 3953) 		pr_debug("Triggering dyn mode switch to %d\n", new_dsi_mode);
07930a15004de (Terence Hampson               2015-01-21 13:36:24 -0500 3954) 		ret = mfd->mdp.mode_switch(mfd, new_dsi_mode);
07930a15004de (Terence Hampson               2015-01-21 13:36:24 -0500 3955) 		if (ret)
07930a15004de (Terence Hampson               2015-01-21 13:36:24 -0500 3956) 			pr_err("DSI mode switch has failed");
07930a15004de (Terence Hampson               2015-01-21 13:36:24 -0500 3957) 		else
4cba013e17a90 (Terence Hampson               2015-04-02 11:38:58 -0400 3958) 			mfd->pending_switch = false;
07930a15004de (Terence Hampson               2015-01-21 13:36:24 -0500 3959) 	}
0df863c8161ca (Adrian Salido-Moreno          2013-10-15 20:31:50 -0700 3960) 	if (fb_backup->disp_commit.flags & MDP_DISPLAY_COMMIT_OVERLAY) {
b192f3c2c194b (Xiaoming Zhou                 2012-12-21 21:23:15 -0500 3961) 		if (mfd->mdp.kickoff_fnc)
c6a3454283d5b (Jeykumar Sankaran             2013-09-07 00:58:43 -0700 3962) 			ret = mfd->mdp.kickoff_fnc(mfd,
0df863c8161ca (Adrian Salido-Moreno          2013-10-15 20:31:50 -0700 3963) 					&fb_backup->disp_commit);
0df863c8161ca (Adrian Salido-Moreno          2013-10-15 20:31:50 -0700 3964) 		else
0df863c8161ca (Adrian Salido-Moreno          2013-10-15 20:31:50 -0700 3965) 			pr_warn("no kickoff function setup for fb%d\n",
0df863c8161ca (Adrian Salido-Moreno          2013-10-15 20:31:50 -0700 3966) 					mfd->index);
be2ca2761e376 (Dhaval Patel                  2014-10-29 15:33:30 -0700 3967) 	} else if (fb_backup->atomic_commit) {
be2ca2761e376 (Dhaval Patel                  2014-10-29 15:33:30 -0700 3968) 		if (mfd->mdp.kickoff_fnc)
be2ca2761e376 (Dhaval Patel                  2014-10-29 15:33:30 -0700 3969) 			ret = mfd->mdp.kickoff_fnc(mfd,
be2ca2761e376 (Dhaval Patel                  2014-10-29 15:33:30 -0700 3970) 					&fb_backup->disp_commit);
be2ca2761e376 (Dhaval Patel                  2014-10-29 15:33:30 -0700 3971) 		else
be2ca2761e376 (Dhaval Patel                  2014-10-29 15:33:30 -0700 3972) 			pr_warn("no kickoff function setup for fb%d\n",
be2ca2761e376 (Dhaval Patel                  2014-10-29 15:33:30 -0700 3973) 				mfd->index);
be2ca2761e376 (Dhaval Patel                  2014-10-29 15:33:30 -0700 3974) 		fb_backup->atomic_commit = false;
ab9f9179e2ec5 (Ken Zhang                     2012-12-02 21:15:47 -0500 3975) 	} else {
0df863c8161ca (Adrian Salido-Moreno          2013-10-15 20:31:50 -0700 3976) 		ret = mdss_fb_pan_display_sub(&fb_backup->disp_commit.var,
0df863c8161ca (Adrian Salido-Moreno          2013-10-15 20:31:50 -0700 3977) 				&fb_backup->info);
ab9f9179e2ec5 (Ken Zhang                     2012-12-02 21:15:47 -0500 3978) 		if (ret)
0df863c8161ca (Adrian Salido-Moreno          2013-10-15 20:31:50 -0700 3979) 			pr_err("pan display failed %x on fb%d\n", ret,
0df863c8161ca (Adrian Salido-Moreno          2013-10-15 20:31:50 -0700 3980) 					mfd->index);
ab9f9179e2ec5 (Ken Zhang                     2012-12-02 21:15:47 -0500 3981) 	}
db2b74c45630a (Adrian Salido-Moreno          2015-09-01 18:17:07 -0700 3982) 
db2b74c45630a (Adrian Salido-Moreno          2015-09-01 18:17:07 -0700 3983) skip_commit:
0df863c8161ca (Adrian Salido-Moreno          2013-10-15 20:31:50 -0700 3984) 	if (!ret)
0df863c8161ca (Adrian Salido-Moreno          2013-10-15 20:31:50 -0700 3985) 		mdss_fb_update_backlight(mfd);
0df863c8161ca (Adrian Salido-Moreno          2013-10-15 20:31:50 -0700 3986) 
be48303843a06 (SGCMarkus                     2019-07-09 09:54:59 +0200 3987) #if defined(CONFIG_LGE_DISPLAY_AMBIENT_SUPPORTED)
be48303843a06 (SGCMarkus                     2019-07-09 09:54:59 +0200 3988) 	if (!ret)
be48303843a06 (SGCMarkus                     2019-07-09 09:54:59 +0200 3989) 		mdss_fb_update_backlight_ex(mfd);
be48303843a06 (SGCMarkus                     2019-07-09 09:54:59 +0200 3990) #endif
be48303843a06 (SGCMarkus                     2019-07-09 09:54:59 +0200 3991) 
8865394e2763d (Ken Zhang                     2014-06-10 09:41:03 -0400 3992) 	if (IS_ERR_VALUE(ret) || !sync_pt_data->flushed) {
8865394e2763d (Ken Zhang                     2014-06-10 09:41:03 -0400 3993) 		mdss_fb_release_kickoff(mfd);
a964a547c7031 (Adrian Salido-Moreno          2013-09-19 19:52:09 -0700 3994) 		mdss_fb_signal_timeline(sync_pt_data);
07930a15004de (Terence Hampson               2015-01-21 13:36:24 -0500 3995) 
b725d52ad5781 (Sachin Bhayare                2017-11-08 15:45:05 +0530 3996) 		if ((mfd->panel.type == MIPI_CMD_PANEL) &&
b725d52ad5781 (Sachin Bhayare                2017-11-08 15:45:05 +0530 3997) 			(mfd->mdp.signal_retire_fence))
b725d52ad5781 (Sachin Bhayare                2017-11-08 15:45:05 +0530 3998) 			mfd->mdp.signal_retire_fence(mfd, 1);
b725d52ad5781 (Sachin Bhayare                2017-11-08 15:45:05 +0530 3999) 	}
07930a15004de (Terence Hampson               2015-01-21 13:36:24 -0500 4000) 	if (dynamic_dsi_switch) {
df73dce85c64f (Veera Sundaram Sankaran       2016-04-15 11:57:24 -0700 4001) 		MDSS_XLOG(mfd->index, mfd->split_mode, new_dsi_mode,
df73dce85c64f (Veera Sundaram Sankaran       2016-04-15 11:57:24 -0700 4002) 			XLOG_FUNC_EXIT);
07930a15004de (Terence Hampson               2015-01-21 13:36:24 -0500 4003) 		mfd->mdp.mode_switch_post(mfd, new_dsi_mode);
07930a15004de (Terence Hampson               2015-01-21 13:36:24 -0500 4004) 		mutex_lock(&mfd->switch_lock);
07930a15004de (Terence Hampson               2015-01-21 13:36:24 -0500 4005) 		mfd->switch_state = MDSS_MDP_NO_UPDATE_REQUESTED;
07930a15004de (Terence Hampson               2015-01-21 13:36:24 -0500 4006) 		mutex_unlock(&mfd->switch_lock);
bf33a59c14779 (Veera Sundaram Sankaran       2016-06-16 16:24:11 -0700 4007) 		if (new_dsi_mode != SWITCH_RESOLUTION)
bf33a59c14779 (Veera Sundaram Sankaran       2016-06-16 16:24:11 -0700 4008) 			mfd->panel.type = new_dsi_mode;
07930a15004de (Terence Hampson               2015-01-21 13:36:24 -0500 4009) 		pr_debug("Dynamic mode switch completed\n");
07930a15004de (Terence Hampson               2015-01-21 13:36:24 -0500 4010) 	}
07930a15004de (Terence Hampson               2015-01-21 13:36:24 -0500 4011) 
be48303843a06 (SGCMarkus                     2019-07-09 09:54:59 +0200 4012) #if defined(CONFIG_LGE_DISPLAY_COMMON)
be48303843a06 (SGCMarkus                     2019-07-09 09:54:59 +0200 4013) 	if (mfd->index == 0 &&
be48303843a06 (SGCMarkus                     2019-07-09 09:54:59 +0200 4014) 		mfd->need_panel_reg_backup && mfd->mdp.panel_reg_backup) {
be48303843a06 (SGCMarkus                     2019-07-09 09:54:59 +0200 4015) 		mfd->mdp.panel_reg_backup(mfd);
be48303843a06 (SGCMarkus                     2019-07-09 09:54:59 +0200 4016) 	}
be48303843a06 (SGCMarkus                     2019-07-09 09:54:59 +0200 4017) #endif
be48303843a06 (SGCMarkus                     2019-07-09 09:54:59 +0200 4018) 
0df863c8161ca (Adrian Salido-Moreno          2013-10-15 20:31:50 -0700 4019) 	return ret;
0df863c8161ca (Adrian Salido-Moreno          2013-10-15 20:31:50 -0700 4020) }
0df863c8161ca (Adrian Salido-Moreno          2013-10-15 20:31:50 -0700 4021) 
0df863c8161ca (Adrian Salido-Moreno          2013-10-15 20:31:50 -0700 4022) static int __mdss_fb_display_thread(void *data)
0df863c8161ca (Adrian Salido-Moreno          2013-10-15 20:31:50 -0700 4023) {
0df863c8161ca (Adrian Salido-Moreno          2013-10-15 20:31:50 -0700 4024) 	struct msm_fb_data_type *mfd = data;
0df863c8161ca (Adrian Salido-Moreno          2013-10-15 20:31:50 -0700 4025) 	int ret;
3ed7bccc79e30 (Adrian Salido-Moreno          2013-09-18 17:44:43 -0700 4026) 	struct sched_param param;
3ed7bccc79e30 (Adrian Salido-Moreno          2013-09-18 17:44:43 -0700 4027) 
3ed7bccc79e30 (Adrian Salido-Moreno          2013-09-18 17:44:43 -0700 4028) 	/*
3ed7bccc79e30 (Adrian Salido-Moreno          2013-09-18 17:44:43 -0700 4029) 	 * this priority was found during empiric testing to have appropriate
3ed7bccc79e30 (Adrian Salido-Moreno          2013-09-18 17:44:43 -0700 4030) 	 * realtime scheduling to process display updates and interact with
3ed7bccc79e30 (Adrian Salido-Moreno          2013-09-18 17:44:43 -0700 4031) 	 * other real time and normal priority tasks
3ed7bccc79e30 (Adrian Salido-Moreno          2013-09-18 17:44:43 -0700 4032) 	 */
3ed7bccc79e30 (Adrian Salido-Moreno          2013-09-18 17:44:43 -0700 4033) 	param.sched_priority = 16;
3ed7bccc79e30 (Adrian Salido-Moreno          2013-09-18 17:44:43 -0700 4034) 	ret = sched_setscheduler(current, SCHED_FIFO, &param);
3ed7bccc79e30 (Adrian Salido-Moreno          2013-09-18 17:44:43 -0700 4035) 	if (ret)
3ed7bccc79e30 (Adrian Salido-Moreno          2013-09-18 17:44:43 -0700 4036) 		pr_warn("set priority failed for fb%d display thread\n",
3ed7bccc79e30 (Adrian Salido-Moreno          2013-09-18 17:44:43 -0700 4037) 				mfd->index);
0df863c8161ca (Adrian Salido-Moreno          2013-10-15 20:31:50 -0700 4038) 
0df863c8161ca (Adrian Salido-Moreno          2013-10-15 20:31:50 -0700 4039) 	while (1) {
0df863c8161ca (Adrian Salido-Moreno          2013-10-15 20:31:50 -0700 4040) 		wait_event(mfd->commit_wait_q,
272d4979007a1 (Aravind Venkateswaran         2013-11-12 14:33:16 -0800 4041) 				(atomic_read(&mfd->commits_pending) ||
272d4979007a1 (Aravind Venkateswaran         2013-11-12 14:33:16 -0800 4042) 				 kthread_should_stop()));
0df863c8161ca (Adrian Salido-Moreno          2013-10-15 20:31:50 -0700 4043) 
272d4979007a1 (Aravind Venkateswaran         2013-11-12 14:33:16 -0800 4044) 		if (kthread_should_stop())
272d4979007a1 (Aravind Venkateswaran         2013-11-12 14:33:16 -0800 4045) 			break;
0df863c8161ca (Adrian Salido-Moreno          2013-10-15 20:31:50 -0700 4046) 
26bebe99120eb (Ujwal Patel                   2015-04-22 14:51:12 -0700 4047) 		MDSS_XLOG(mfd->index, XLOG_FUNC_ENTRY);
272d4979007a1 (Aravind Venkateswaran         2013-11-12 14:33:16 -0800 4048) 		ret = __mdss_fb_perform_commit(mfd);
26bebe99120eb (Ujwal Patel                   2015-04-22 14:51:12 -0700 4049) 		MDSS_XLOG(mfd->index, XLOG_FUNC_EXIT);
26bebe99120eb (Ujwal Patel                   2015-04-22 14:51:12 -0700 4050) 
0df863c8161ca (Adrian Salido-Moreno          2013-10-15 20:31:50 -0700 4051) 		atomic_dec(&mfd->commits_pending);
0df863c8161ca (Adrian Salido-Moreno          2013-10-15 20:31:50 -0700 4052) 		wake_up_all(&mfd->idle_wait_q);
0df863c8161ca (Adrian Salido-Moreno          2013-10-15 20:31:50 -0700 4053) 	}
0df863c8161ca (Adrian Salido-Moreno          2013-10-15 20:31:50 -0700 4054) 
8865394e2763d (Ken Zhang                     2014-06-10 09:41:03 -0400 4055) 	mdss_fb_release_kickoff(mfd);
272d4979007a1 (Aravind Venkateswaran         2013-11-12 14:33:16 -0800 4056) 	atomic_set(&mfd->commits_pending, 0);
272d4979007a1 (Aravind Venkateswaran         2013-11-12 14:33:16 -0800 4057) 	wake_up_all(&mfd->idle_wait_q);
272d4979007a1 (Aravind Venkateswaran         2013-11-12 14:33:16 -0800 4058) 
0df863c8161ca (Adrian Salido-Moreno          2013-10-15 20:31:50 -0700 4059) 	return ret;
ab9f9179e2ec5 (Ken Zhang                     2012-12-02 21:15:47 -0500 4060) }
ab9f9179e2ec5 (Ken Zhang                     2012-12-02 21:15:47 -0500 4061) 
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 4062) static int mdss_fb_check_var(struct fb_var_screeninfo *var,
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 4063) 			     struct fb_info *info)
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 4064) {
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 4065) 	struct msm_fb_data_type *mfd = (struct msm_fb_data_type *)info->par;
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 4066) 
0bc9cc98eabcc (Saurabh Shah                  2015-01-19 15:37:06 -0800 4067) 	if (var->rotate != FB_ROTATE_UR && var->rotate != FB_ROTATE_UD)
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 4068) 		return -EINVAL;
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 4069) 
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 4070) 	switch (var->bits_per_pixel) {
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 4071) 	case 16:
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 4072) 		if ((var->green.offset != 5) ||
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 4073) 		    !((var->blue.offset == 11)
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 4074) 		      || (var->blue.offset == 0)) ||
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 4075) 		    !((var->red.offset == 11)
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 4076) 		      || (var->red.offset == 0)) ||
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 4077) 		    (var->blue.length != 5) ||
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 4078) 		    (var->green.length != 6) ||
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 4079) 		    (var->red.length != 5) ||
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 4080) 		    (var->blue.msb_right != 0) ||
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 4081) 		    (var->green.msb_right != 0) ||
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 4082) 		    (var->red.msb_right != 0) ||
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 4083) 		    (var->transp.offset != 0) ||
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 4084) 		    (var->transp.length != 0))
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 4085) 			return -EINVAL;
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 4086) 		break;
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 4087) 
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 4088) 	case 24:
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 4089) 		if ((var->blue.offset != 0) ||
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 4090) 		    (var->green.offset != 8) ||
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 4091) 		    (var->red.offset != 16) ||
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 4092) 		    (var->blue.length != 8) ||
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 4093) 		    (var->green.length != 8) ||
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 4094) 		    (var->red.length != 8) ||
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 4095) 		    (var->blue.msb_right != 0) ||
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 4096) 		    (var->green.msb_right != 0) ||
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 4097) 		    (var->red.msb_right != 0) ||
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 4098) 		    !(((var->transp.offset == 0) &&
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 4099) 		       (var->transp.length == 0)) ||
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 4100) 		      ((var->transp.offset == 24) &&
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 4101) 		       (var->transp.length == 8))))
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 4102) 			return -EINVAL;
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 4103) 		break;
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 4104) 
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 4105) 	case 32:
eaf8d189c1916 (Eugene Yasman                 2013-10-21 13:44:10 +0300 4106) 		/* Check user specified color format BGRA/ARGB/RGBA
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 4107) 		   and verify the position of the RGB components */
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 4108) 
eaf8d189c1916 (Eugene Yasman                 2013-10-21 13:44:10 +0300 4109) 		if (!((var->transp.offset == 24) &&
eaf8d189c1916 (Eugene Yasman                 2013-10-21 13:44:10 +0300 4110) 			(var->blue.offset == 0) &&
eaf8d189c1916 (Eugene Yasman                 2013-10-21 13:44:10 +0300 4111) 			(var->green.offset == 8) &&
eaf8d189c1916 (Eugene Yasman                 2013-10-21 13:44:10 +0300 4112) 			(var->red.offset == 16)) &&
0542dc68325c5 (Jayant Shekhar                2016-01-22 11:30:58 +0530 4113) 		    !((var->transp.offset == 0) &&
0542dc68325c5 (Jayant Shekhar                2016-01-22 11:30:58 +0530 4114) 			(var->blue.offset == 24) &&
0542dc68325c5 (Jayant Shekhar                2016-01-22 11:30:58 +0530 4115) 			(var->green.offset == 16) &&
0542dc68325c5 (Jayant Shekhar                2016-01-22 11:30:58 +0530 4116) 			(var->red.offset == 8)) &&
eaf8d189c1916 (Eugene Yasman                 2013-10-21 13:44:10 +0300 4117) 		    !((var->transp.offset == 24) &&
eaf8d189c1916 (Eugene Yasman                 2013-10-21 13:44:10 +0300 4118) 			(var->blue.offset == 16) &&
eaf8d189c1916 (Eugene Yasman                 2013-10-21 13:44:10 +0300 4119) 			(var->green.offset == 8) &&
eaf8d189c1916 (Eugene Yasman                 2013-10-21 13:44:10 +0300 4120) 			(var->red.offset == 0)))
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 4121) 				return -EINVAL;
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 4122) 
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 4123) 		/* Check the common values for both RGBA and ARGB */
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 4124) 
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 4125) 		if ((var->blue.length != 8) ||
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 4126) 		    (var->green.length != 8) ||
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 4127) 		    (var->red.length != 8) ||
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 4128) 		    (var->transp.length != 8) ||
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 4129) 		    (var->blue.msb_right != 0) ||
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 4130) 		    (var->green.msb_right != 0) ||
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 4131) 		    (var->red.msb_right != 0))
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 4132) 			return -EINVAL;
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 4133) 
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 4134) 		break;
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 4135) 
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 4136) 	default:
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 4137) 		return -EINVAL;
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 4138) 	}
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 4139) 
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 4140) 	if ((var->xres_virtual <= 0) || (var->yres_virtual <= 0))
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 4141) 		return -EINVAL;
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 4142) 
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 4143) 	if ((var->xres == 0) || (var->yres == 0))
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 4144) 		return -EINVAL;
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 4145) 
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 4146) 	if (var->xoffset > (var->xres_virtual - var->xres))
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 4147) 		return -EINVAL;
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 4148) 
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 4149) 	if (var->yoffset > (var->yres_virtual - var->yres))
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 4150) 		return -EINVAL;
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 4151) 
649c91d1cd61d (Adrian Salido-Moreno          2015-04-23 18:33:56 -0700 4152) 	if (info->mode) {
649c91d1cd61d (Adrian Salido-Moreno          2015-04-23 18:33:56 -0700 4153) 		const struct fb_videomode *mode;
649c91d1cd61d (Adrian Salido-Moreno          2015-04-23 18:33:56 -0700 4154) 
649c91d1cd61d (Adrian Salido-Moreno          2015-04-23 18:33:56 -0700 4155) 		mode = fb_match_mode(var, &info->modelist);
649c91d1cd61d (Adrian Salido-Moreno          2015-04-23 18:33:56 -0700 4156) 		if (mode == NULL)
649c91d1cd61d (Adrian Salido-Moreno          2015-04-23 18:33:56 -0700 4157) 			return -EINVAL;
649c91d1cd61d (Adrian Salido-Moreno          2015-04-23 18:33:56 -0700 4158) 	} else if (mfd->panel_info && !(var->activate & FB_ACTIVATE_TEST)) {
e9bc670954414 (Jayant Shekhar                2015-01-06 10:36:51 +0530 4159) 		struct mdss_panel_info *panel_info;
38bc092bedf35 (Adrian Salido-Moreno          2012-11-28 18:41:33 -0800 4160) 		int rc;
e9bc670954414 (Jayant Shekhar                2015-01-06 10:36:51 +0530 4161) 		panel_info = kzalloc(sizeof(struct mdss_panel_info),
e9bc670954414 (Jayant Shekhar                2015-01-06 10:36:51 +0530 4162) 				GFP_KERNEL);
e9bc670954414 (Jayant Shekhar                2015-01-06 10:36:51 +0530 4163) 		if (!panel_info)
e9bc670954414 (Jayant Shekhar                2015-01-06 10:36:51 +0530 4164) 			return -ENOMEM;
38bc092bedf35 (Adrian Salido-Moreno          2012-11-28 18:41:33 -0800 4165) 
e9bc670954414 (Jayant Shekhar                2015-01-06 10:36:51 +0530 4166) 		memcpy(panel_info, mfd->panel_info,
e9bc670954414 (Jayant Shekhar                2015-01-06 10:36:51 +0530 4167) 				sizeof(struct mdss_panel_info));
e9bc670954414 (Jayant Shekhar                2015-01-06 10:36:51 +0530 4168) 		mdss_fb_var_to_panelinfo(var, panel_info);
38bc092bedf35 (Adrian Salido-Moreno          2012-11-28 18:41:33 -0800 4169) 		rc = mdss_fb_send_panel_event(mfd, MDSS_EVENT_CHECK_PARAMS,
e9bc670954414 (Jayant Shekhar                2015-01-06 10:36:51 +0530 4170) 			panel_info);
e9bc670954414 (Jayant Shekhar                2015-01-06 10:36:51 +0530 4171) 		if (IS_ERR_VALUE(rc)) {
e9bc670954414 (Jayant Shekhar                2015-01-06 10:36:51 +0530 4172) 			kfree(panel_info);
38bc092bedf35 (Adrian Salido-Moreno          2012-11-28 18:41:33 -0800 4173) 			return rc;
e9bc670954414 (Jayant Shekhar                2015-01-06 10:36:51 +0530 4174) 		}
38bc092bedf35 (Adrian Salido-Moreno          2012-11-28 18:41:33 -0800 4175) 		mfd->panel_reconfig = rc;
e9bc670954414 (Jayant Shekhar                2015-01-06 10:36:51 +0530 4176) 		kfree(panel_info);
38bc092bedf35 (Adrian Salido-Moreno          2012-11-28 18:41:33 -0800 4177) 	}
38bc092bedf35 (Adrian Salido-Moreno          2012-11-28 18:41:33 -0800 4178) 
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 4179) 	return 0;
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 4180) }
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 4181) 
649c91d1cd61d (Adrian Salido-Moreno          2015-04-23 18:33:56 -0700 4182) static int mdss_fb_videomode_switch(struct msm_fb_data_type *mfd,
649c91d1cd61d (Adrian Salido-Moreno          2015-04-23 18:33:56 -0700 4183) 		const struct fb_videomode *mode)
649c91d1cd61d (Adrian Salido-Moreno          2015-04-23 18:33:56 -0700 4184) {
649c91d1cd61d (Adrian Salido-Moreno          2015-04-23 18:33:56 -0700 4185) 	int ret = 0;
649c91d1cd61d (Adrian Salido-Moreno          2015-04-23 18:33:56 -0700 4186) 	struct mdss_panel_data *pdata, *tmp;
649c91d1cd61d (Adrian Salido-Moreno          2015-04-23 18:33:56 -0700 4187) 	struct mdss_panel_timing *timing;
649c91d1cd61d (Adrian Salido-Moreno          2015-04-23 18:33:56 -0700 4188) 
649c91d1cd61d (Adrian Salido-Moreno          2015-04-23 18:33:56 -0700 4189) 	pdata = dev_get_platdata(&mfd->pdev->dev);
649c91d1cd61d (Adrian Salido-Moreno          2015-04-23 18:33:56 -0700 4190) 	if (!pdata) {
649c91d1cd61d (Adrian Salido-Moreno          2015-04-23 18:33:56 -0700 4191) 		pr_err("no panel connected\n");
649c91d1cd61d (Adrian Salido-Moreno          2015-04-23 18:33:56 -0700 4192) 		return -ENODEV;
649c91d1cd61d (Adrian Salido-Moreno          2015-04-23 18:33:56 -0700 4193) 	}
649c91d1cd61d (Adrian Salido-Moreno          2015-04-23 18:33:56 -0700 4194) 
649c91d1cd61d (Adrian Salido-Moreno          2015-04-23 18:33:56 -0700 4195) 	/* make sure that we are idle while switching */
649c91d1cd61d (Adrian Salido-Moreno          2015-04-23 18:33:56 -0700 4196) 	mdss_fb_wait_for_kickoff(mfd);
649c91d1cd61d (Adrian Salido-Moreno          2015-04-23 18:33:56 -0700 4197) 
649c91d1cd61d (Adrian Salido-Moreno          2015-04-23 18:33:56 -0700 4198) 	pr_debug("fb%d: changing display mode to %s\n", mfd->index, mode->name);
df73dce85c64f (Veera Sundaram Sankaran       2016-04-15 11:57:24 -0700 4199) 	MDSS_XLOG(mfd->index, mode->name,
df73dce85c64f (Veera Sundaram Sankaran       2016-04-15 11:57:24 -0700 4200) 			mdss_fb_get_panel_xres(mfd->panel_info),
df73dce85c64f (Veera Sundaram Sankaran       2016-04-15 11:57:24 -0700 4201) 			mfd->panel_info->yres, mfd->split_mode,
df73dce85c64f (Veera Sundaram Sankaran       2016-04-15 11:57:24 -0700 4202) 			XLOG_FUNC_ENTRY);
649c91d1cd61d (Adrian Salido-Moreno          2015-04-23 18:33:56 -0700 4203) 	tmp = pdata;
649c91d1cd61d (Adrian Salido-Moreno          2015-04-23 18:33:56 -0700 4204) 	do {
649c91d1cd61d (Adrian Salido-Moreno          2015-04-23 18:33:56 -0700 4205) 		if (!tmp->event_handler) {
649c91d1cd61d (Adrian Salido-Moreno          2015-04-23 18:33:56 -0700 4206) 			pr_warn("no event handler for panel\n");
649c91d1cd61d (Adrian Salido-Moreno          2015-04-23 18:33:56 -0700 4207) 			continue;
649c91d1cd61d (Adrian Salido-Moreno          2015-04-23 18:33:56 -0700 4208) 		}
649c91d1cd61d (Adrian Salido-Moreno          2015-04-23 18:33:56 -0700 4209) 		timing = mdss_panel_get_timing_by_name(tmp, mode->name);
649c91d1cd61d (Adrian Salido-Moreno          2015-04-23 18:33:56 -0700 4210) 		ret = tmp->event_handler(tmp,
649c91d1cd61d (Adrian Salido-Moreno          2015-04-23 18:33:56 -0700 4211) 				MDSS_EVENT_PANEL_TIMING_SWITCH, timing);
649c91d1cd61d (Adrian Salido-Moreno          2015-04-23 18:33:56 -0700 4212) 
649c91d1cd61d (Adrian Salido-Moreno          2015-04-23 18:33:56 -0700 4213) 		tmp->active = timing != NULL;
649c91d1cd61d (Adrian Salido-Moreno          2015-04-23 18:33:56 -0700 4214) 		tmp = tmp->next;
649c91d1cd61d (Adrian Salido-Moreno          2015-04-23 18:33:56 -0700 4215) 	} while (tmp && !ret);
649c91d1cd61d (Adrian Salido-Moreno          2015-04-23 18:33:56 -0700 4216) 
df73dce85c64f (Veera Sundaram Sankaran       2016-04-15 11:57:24 -0700 4217) 	if (!ret)
df73dce85c64f (Veera Sundaram Sankaran       2016-04-15 11:57:24 -0700 4218) 		mdss_fb_set_split_mode(mfd, pdata);
df73dce85c64f (Veera Sundaram Sankaran       2016-04-15 11:57:24 -0700 4219) 
649c91d1cd61d (Adrian Salido-Moreno          2015-04-23 18:33:56 -0700 4220) 	if (!ret && mfd->mdp.configure_panel) {
649c91d1cd61d (Adrian Salido-Moreno          2015-04-23 18:33:56 -0700 4221) 		int dest_ctrl = 1;
649c91d1cd61d (Adrian Salido-Moreno          2015-04-23 18:33:56 -0700 4222) 
649c91d1cd61d (Adrian Salido-Moreno          2015-04-23 18:33:56 -0700 4223) 		/* todo: currently assumes no changes in video/cmd mode */
649c91d1cd61d (Adrian Salido-Moreno          2015-04-23 18:33:56 -0700 4224) 		if (!mdss_fb_is_power_off(mfd)) {
649c91d1cd61d (Adrian Salido-Moreno          2015-04-23 18:33:56 -0700 4225) 			mutex_lock(&mfd->switch_lock);
df73dce85c64f (Veera Sundaram Sankaran       2016-04-15 11:57:24 -0700 4226) 			mfd->switch_state = MDSS_MDP_WAIT_FOR_VALIDATE;
649c91d1cd61d (Adrian Salido-Moreno          2015-04-23 18:33:56 -0700 4227) 			mfd->switch_new_mode = SWITCH_RESOLUTION;
649c91d1cd61d (Adrian Salido-Moreno          2015-04-23 18:33:56 -0700 4228) 			mutex_unlock(&mfd->switch_lock);
649c91d1cd61d (Adrian Salido-Moreno          2015-04-23 18:33:56 -0700 4229) 			dest_ctrl = 0;
649c91d1cd61d (Adrian Salido-Moreno          2015-04-23 18:33:56 -0700 4230) 		}
649c91d1cd61d (Adrian Salido-Moreno          2015-04-23 18:33:56 -0700 4231) 		ret = mfd->mdp.configure_panel(mfd,
649c91d1cd61d (Adrian Salido-Moreno          2015-04-23 18:33:56 -0700 4232) 				pdata->panel_info.mipi.mode, dest_ctrl);
649c91d1cd61d (Adrian Salido-Moreno          2015-04-23 18:33:56 -0700 4233) 	}
649c91d1cd61d (Adrian Salido-Moreno          2015-04-23 18:33:56 -0700 4234) 
df73dce85c64f (Veera Sundaram Sankaran       2016-04-15 11:57:24 -0700 4235) 	MDSS_XLOG(mfd->index, mode->name,
df73dce85c64f (Veera Sundaram Sankaran       2016-04-15 11:57:24 -0700 4236) 			mdss_fb_get_panel_xres(mfd->panel_info),
df73dce85c64f (Veera Sundaram Sankaran       2016-04-15 11:57:24 -0700 4237) 			mfd->panel_info->yres, mfd->split_mode,
df73dce85c64f (Veera Sundaram Sankaran       2016-04-15 11:57:24 -0700 4238) 			XLOG_FUNC_EXIT);
649c91d1cd61d (Adrian Salido-Moreno          2015-04-23 18:33:56 -0700 4239) 	pr_debug("fb%d: %s mode change complete\n", mfd->index, mode->name);
649c91d1cd61d (Adrian Salido-Moreno          2015-04-23 18:33:56 -0700 4240) 
649c91d1cd61d (Adrian Salido-Moreno          2015-04-23 18:33:56 -0700 4241) 	return ret;
649c91d1cd61d (Adrian Salido-Moreno          2015-04-23 18:33:56 -0700 4242) }
649c91d1cd61d (Adrian Salido-Moreno          2015-04-23 18:33:56 -0700 4243) 
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 4244) static int mdss_fb_set_par(struct fb_info *info)
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 4245) {
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 4246) 	struct msm_fb_data_type *mfd = (struct msm_fb_data_type *)info->par;
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 4247) 	struct fb_var_screeninfo *var = &info->var;
2d5590447a1fa (Ajay Singh Parmar             2016-04-08 09:49:49 -0700 4248) 	int old_imgType, old_format;
272d4979007a1 (Aravind Venkateswaran         2013-11-12 14:33:16 -0800 4249) 	int ret = 0;
272d4979007a1 (Aravind Venkateswaran         2013-11-12 14:33:16 -0800 4250) 
272d4979007a1 (Aravind Venkateswaran         2013-11-12 14:33:16 -0800 4251) 	ret = mdss_fb_pan_idle(mfd);
272d4979007a1 (Aravind Venkateswaran         2013-11-12 14:33:16 -0800 4252) 	if (ret) {
26bebe99120eb (Ujwal Patel                   2015-04-22 14:51:12 -0700 4253) 		pr_err("mdss_fb_pan_idle failed. rc=%d\n", ret);
272d4979007a1 (Aravind Venkateswaran         2013-11-12 14:33:16 -0800 4254) 		return ret;
272d4979007a1 (Aravind Venkateswaran         2013-11-12 14:33:16 -0800 4255) 	}
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 4256) 
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 4257) 	old_imgType = mfd->fb_imgType;
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 4258) 	switch (var->bits_per_pixel) {
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 4259) 	case 16:
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 4260) 		if (var->red.offset == 0)
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 4261) 			mfd->fb_imgType = MDP_BGR_565;
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 4262) 		else
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 4263) 			mfd->fb_imgType	= MDP_RGB_565;
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 4264) 		break;
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 4265) 
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 4266) 	case 24:
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 4267) 		if ((var->transp.offset == 0) && (var->transp.length == 0))
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 4268) 			mfd->fb_imgType = MDP_RGB_888;
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 4269) 		else if ((var->transp.offset == 24) &&
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 4270) 			 (var->transp.length == 8)) {
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 4271) 			mfd->fb_imgType = MDP_ARGB_8888;
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 4272) 			info->var.bits_per_pixel = 32;
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 4273) 		}
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 4274) 		break;
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 4275) 
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 4276) 	case 32:
eaf8d189c1916 (Eugene Yasman                 2013-10-21 13:44:10 +0300 4277) 		if ((var->red.offset == 0) &&
eaf8d189c1916 (Eugene Yasman                 2013-10-21 13:44:10 +0300 4278) 		    (var->green.offset == 8) &&
eaf8d189c1916 (Eugene Yasman                 2013-10-21 13:44:10 +0300 4279) 		    (var->blue.offset == 16) &&
eaf8d189c1916 (Eugene Yasman                 2013-10-21 13:44:10 +0300 4280) 		    (var->transp.offset == 24))
eaf8d189c1916 (Eugene Yasman                 2013-10-21 13:44:10 +0300 4281) 			mfd->fb_imgType = MDP_RGBA_8888;
eaf8d189c1916 (Eugene Yasman                 2013-10-21 13:44:10 +0300 4282) 		else if ((var->red.offset == 16) &&
eaf8d189c1916 (Eugene Yasman                 2013-10-21 13:44:10 +0300 4283) 		    (var->green.offset == 8) &&
eaf8d189c1916 (Eugene Yasman                 2013-10-21 13:44:10 +0300 4284) 		    (var->blue.offset == 0) &&
eaf8d189c1916 (Eugene Yasman                 2013-10-21 13:44:10 +0300 4285) 		    (var->transp.offset == 24))
eaf8d189c1916 (Eugene Yasman                 2013-10-21 13:44:10 +0300 4286) 			mfd->fb_imgType = MDP_BGRA_8888;
eaf8d189c1916 (Eugene Yasman                 2013-10-21 13:44:10 +0300 4287) 		else if ((var->red.offset == 8) &&
eaf8d189c1916 (Eugene Yasman                 2013-10-21 13:44:10 +0300 4288) 		    (var->green.offset == 16) &&
eaf8d189c1916 (Eugene Yasman                 2013-10-21 13:44:10 +0300 4289) 		    (var->blue.offset == 24) &&
eaf8d189c1916 (Eugene Yasman                 2013-10-21 13:44:10 +0300 4290) 		    (var->transp.offset == 0))
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 4291) 			mfd->fb_imgType = MDP_ARGB_8888;
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 4292) 		else
eaf8d189c1916 (Eugene Yasman                 2013-10-21 13:44:10 +0300 4293) 			mfd->fb_imgType = MDP_RGBA_8888;
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 4294) 		break;
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 4295) 
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 4296) 	default:
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 4297) 		return -EINVAL;
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 4298) 	}
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 4299) 
649c91d1cd61d (Adrian Salido-Moreno          2015-04-23 18:33:56 -0700 4300) 	if (info->mode) {
649c91d1cd61d (Adrian Salido-Moreno          2015-04-23 18:33:56 -0700 4301) 		const struct fb_videomode *mode;
649c91d1cd61d (Adrian Salido-Moreno          2015-04-23 18:33:56 -0700 4302) 
649c91d1cd61d (Adrian Salido-Moreno          2015-04-23 18:33:56 -0700 4303) 		mode = fb_match_mode(var, &info->modelist);
649c91d1cd61d (Adrian Salido-Moreno          2015-04-23 18:33:56 -0700 4304) 		if (!mode)
649c91d1cd61d (Adrian Salido-Moreno          2015-04-23 18:33:56 -0700 4305) 			return -EINVAL;
649c91d1cd61d (Adrian Salido-Moreno          2015-04-23 18:33:56 -0700 4306) 
d9f95bd8d910d (Adrian Salido-Moreno          2015-08-21 15:42:52 -0700 4307) 		pr_debug("found mode: %s\n", mode->name);
d9f95bd8d910d (Adrian Salido-Moreno          2015-08-21 15:42:52 -0700 4308) 
d9f95bd8d910d (Adrian Salido-Moreno          2015-08-21 15:42:52 -0700 4309) 		if (fb_mode_is_equal(mode, info->mode)) {
d9f95bd8d910d (Adrian Salido-Moreno          2015-08-21 15:42:52 -0700 4310) 			pr_debug("mode is equal to current mode\n");
d9f95bd8d910d (Adrian Salido-Moreno          2015-08-21 15:42:52 -0700 4311) 			return 0;
d9f95bd8d910d (Adrian Salido-Moreno          2015-08-21 15:42:52 -0700 4312) 		}
d9f95bd8d910d (Adrian Salido-Moreno          2015-08-21 15:42:52 -0700 4313) 
649c91d1cd61d (Adrian Salido-Moreno          2015-04-23 18:33:56 -0700 4314) 		ret = mdss_fb_videomode_switch(mfd, mode);
649c91d1cd61d (Adrian Salido-Moreno          2015-04-23 18:33:56 -0700 4315) 		if (ret)
649c91d1cd61d (Adrian Salido-Moreno          2015-04-23 18:33:56 -0700 4316) 			return ret;
649c91d1cd61d (Adrian Salido-Moreno          2015-04-23 18:33:56 -0700 4317) 	}
b192f3c2c194b (Xiaoming Zhou                 2012-12-21 21:23:15 -0500 4318) 
b192f3c2c194b (Xiaoming Zhou                 2012-12-21 21:23:15 -0500 4319) 	if (mfd->mdp.fb_stride)
b192f3c2c194b (Xiaoming Zhou                 2012-12-21 21:23:15 -0500 4320) 		mfd->fbi->fix.line_length = mfd->mdp.fb_stride(mfd->index,
b192f3c2c194b (Xiaoming Zhou                 2012-12-21 21:23:15 -0500 4321) 						var->xres,
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 4322) 						var->bits_per_pixel / 8);
b192f3c2c194b (Xiaoming Zhou                 2012-12-21 21:23:15 -0500 4323) 	else
b192f3c2c194b (Xiaoming Zhou                 2012-12-21 21:23:15 -0500 4324) 		mfd->fbi->fix.line_length = var->xres * var->bits_per_pixel / 8;
b192f3c2c194b (Xiaoming Zhou                 2012-12-21 21:23:15 -0500 4325) 
f3e3ad8414eff (Adrian Salido-Moreno          2015-07-27 17:22:23 -0700 4326) 	/* if memory is not allocated yet, change memory size for fb */
f3e3ad8414eff (Adrian Salido-Moreno          2015-07-27 17:22:23 -0700 4327) 	if (!info->fix.smem_start)
f3e3ad8414eff (Adrian Salido-Moreno          2015-07-27 17:22:23 -0700 4328) 		mfd->fbi->fix.smem_len = PAGE_ALIGN(mfd->fbi->fix.line_length *
f3e3ad8414eff (Adrian Salido-Moreno          2015-07-27 17:22:23 -0700 4329) 				mfd->fbi->var.yres) * mfd->fb_page;
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 4330) 
ef302d5ba3f67 (Venkata Prahlad Valluru       2019-08-14 20:33:26 +0530 4331) 	old_format = mfd->panel_info->out_format;
ef302d5ba3f67 (Venkata Prahlad Valluru       2019-08-14 20:33:26 +0530 4332) 	mfd->panel_info->out_format =
ef302d5ba3f67 (Venkata Prahlad Valluru       2019-08-14 20:33:26 +0530 4333) 			mdss_grayscale_to_mdp_format(var->grayscale);
ef302d5ba3f67 (Venkata Prahlad Valluru       2019-08-14 20:33:26 +0530 4334) 	if (!IS_ERR_VALUE(mfd->panel_info->out_format)) {
2d5590447a1fa (Ajay Singh Parmar             2016-04-08 09:49:49 -0700 4335) 		if (old_format != mfd->panel_info->out_format)
2d5590447a1fa (Ajay Singh Parmar             2016-04-08 09:49:49 -0700 4336) 			mfd->panel_reconfig = true;
2d5590447a1fa (Ajay Singh Parmar             2016-04-08 09:49:49 -0700 4337) 	}
2d5590447a1fa (Ajay Singh Parmar             2016-04-08 09:49:49 -0700 4338) 
000defebb2f80 (Venkata Prahlad Valluru       2019-08-23 22:12:12 +0530 4339) 	if (mdss_fb_is_hdmi_primary(mfd) && mfd->panel_reconfig)
000defebb2f80 (Venkata Prahlad Valluru       2019-08-23 22:12:12 +0530 4340) 		mfd->force_null_commit = true;
000defebb2f80 (Venkata Prahlad Valluru       2019-08-23 22:12:12 +0530 4341) 
38bc092bedf35 (Adrian Salido-Moreno          2012-11-28 18:41:33 -0800 4342) 	if (mfd->panel_reconfig || (mfd->fb_imgType != old_imgType)) {
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 4343) 		mdss_fb_blank_sub(FB_BLANK_POWERDOWN, info, mfd->op_enable);
38bc092bedf35 (Adrian Salido-Moreno          2012-11-28 18:41:33 -0800 4344) 		mdss_fb_var_to_panelinfo(var, mfd->panel_info);
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 4345) 		mdss_fb_blank_sub(FB_BLANK_UNBLANK, info, mfd->op_enable);
38bc092bedf35 (Adrian Salido-Moreno          2012-11-28 18:41:33 -0800 4346) 		mfd->panel_reconfig = false;
000defebb2f80 (Venkata Prahlad Valluru       2019-08-23 22:12:12 +0530 4347) 		mfd->force_null_commit = false;
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 4348) 	}
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 4349) 
272d4979007a1 (Aravind Venkateswaran         2013-11-12 14:33:16 -0800 4350) 	return ret;
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 4351) }
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 4352) 
d00b8490439fd (Arpita Banerjee               2013-06-11 19:24:20 -0700 4353) int mdss_fb_dcm(struct msm_fb_data_type *mfd, int req_state)
d00b8490439fd (Arpita Banerjee               2013-06-11 19:24:20 -0700 4354) {
c79eef0026e28 (Dhaval Patel                  2013-12-04 12:11:32 -0800 4355) 	int ret = 0;
d00b8490439fd (Arpita Banerjee               2013-06-11 19:24:20 -0700 4356) 
d00b8490439fd (Arpita Banerjee               2013-06-11 19:24:20 -0700 4357) 	if (req_state == mfd->dcm_state) {
5f1c60463e9eb (Dhaval Patel                  2014-07-11 15:09:12 -0700 4358) 		pr_warn("Already in correct DCM/DTM state\n");
c79eef0026e28 (Dhaval Patel                  2013-12-04 12:11:32 -0800 4359) 		return ret;
d00b8490439fd (Arpita Banerjee               2013-06-11 19:24:20 -0700 4360) 	}
d00b8490439fd (Arpita Banerjee               2013-06-11 19:24:20 -0700 4361) 
d00b8490439fd (Arpita Banerjee               2013-06-11 19:24:20 -0700 4362) 	switch (req_state) {
d00b8490439fd (Arpita Banerjee               2013-06-11 19:24:20 -0700 4363) 	case DCM_UNBLANK:
d00b8490439fd (Arpita Banerjee               2013-06-11 19:24:20 -0700 4364) 		if (mfd->dcm_state == DCM_UNINIT &&
49036d7c0ebbd (Aravind Venkateswaran         2014-08-01 17:20:51 -0700 4365) 			mdss_fb_is_power_off(mfd) && mfd->mdp.on_fnc) {
acd7b2ddcd4b9 (Ingrid Gallardo               2014-09-29 11:25:10 -0700 4366) 			if (mfd->disp_thread == NULL) {
acd7b2ddcd4b9 (Ingrid Gallardo               2014-09-29 11:25:10 -0700 4367) 				ret = mdss_fb_start_disp_thread(mfd);
acd7b2ddcd4b9 (Ingrid Gallardo               2014-09-29 11:25:10 -0700 4368) 				if (ret < 0)
acd7b2ddcd4b9 (Ingrid Gallardo               2014-09-29 11:25:10 -0700 4369) 					return ret;
acd7b2ddcd4b9 (Ingrid Gallardo               2014-09-29 11:25:10 -0700 4370) 			}
d00b8490439fd (Arpita Banerjee               2013-06-11 19:24:20 -0700 4371) 			ret = mfd->mdp.on_fnc(mfd);
d00b8490439fd (Arpita Banerjee               2013-06-11 19:24:20 -0700 4372) 			if (ret == 0) {
b9095befda98a (Aravind Venkateswaran         2014-07-28 23:24:46 -0700 4373) 				mfd->panel_power_state = MDSS_PANEL_POWER_ON;
d00b8490439fd (Arpita Banerjee               2013-06-11 19:24:20 -0700 4374) 				mfd->dcm_state = DCM_UNBLANK;
d00b8490439fd (Arpita Banerjee               2013-06-11 19:24:20 -0700 4375) 			}
d00b8490439fd (Arpita Banerjee               2013-06-11 19:24:20 -0700 4376) 		}
d00b8490439fd (Arpita Banerjee               2013-06-11 19:24:20 -0700 4377) 		break;
d00b8490439fd (Arpita Banerjee               2013-06-11 19:24:20 -0700 4378) 	case DCM_ENTER:
d00b8490439fd (Arpita Banerjee               2013-06-11 19:24:20 -0700 4379) 		if (mfd->dcm_state == DCM_UNBLANK) {
c79eef0026e28 (Dhaval Patel                  2013-12-04 12:11:32 -0800 4380) 			/*
c79eef0026e28 (Dhaval Patel                  2013-12-04 12:11:32 -0800 4381) 			 * Keep unblank path available for only
c79eef0026e28 (Dhaval Patel                  2013-12-04 12:11:32 -0800 4382) 			 * DCM operation
c79eef0026e28 (Dhaval Patel                  2013-12-04 12:11:32 -0800 4383) 			 */
b9095befda98a (Aravind Venkateswaran         2014-07-28 23:24:46 -0700 4384) 			mfd->panel_power_state = MDSS_PANEL_POWER_OFF;
d00b8490439fd (Arpita Banerjee               2013-06-11 19:24:20 -0700 4385) 			mfd->dcm_state = DCM_ENTER;
d00b8490439fd (Arpita Banerjee               2013-06-11 19:24:20 -0700 4386) 		}
d00b8490439fd (Arpita Banerjee               2013-06-11 19:24:20 -0700 4387) 		break;
d00b8490439fd (Arpita Banerjee               2013-06-11 19:24:20 -0700 4388) 	case DCM_EXIT:
d00b8490439fd (Arpita Banerjee               2013-06-11 19:24:20 -0700 4389) 		if (mfd->dcm_state == DCM_ENTER) {
d00b8490439fd (Arpita Banerjee               2013-06-11 19:24:20 -0700 4390) 			/* Release the unblank path for exit */
b9095befda98a (Aravind Venkateswaran         2014-07-28 23:24:46 -0700 4391) 			mfd->panel_power_state = MDSS_PANEL_POWER_ON;
d00b8490439fd (Arpita Banerjee               2013-06-11 19:24:20 -0700 4392) 			mfd->dcm_state = DCM_EXIT;
d00b8490439fd (Arpita Banerjee               2013-06-11 19:24:20 -0700 4393) 		}
d00b8490439fd (Arpita Banerjee               2013-06-11 19:24:20 -0700 4394) 		break;
d00b8490439fd (Arpita Banerjee               2013-06-11 19:24:20 -0700 4395) 	case DCM_BLANK:
d00b8490439fd (Arpita Banerjee               2013-06-11 19:24:20 -0700 4396) 		if ((mfd->dcm_state == DCM_EXIT ||
d00b8490439fd (Arpita Banerjee               2013-06-11 19:24:20 -0700 4397) 			mfd->dcm_state == DCM_UNBLANK) &&
49036d7c0ebbd (Aravind Venkateswaran         2014-08-01 17:20:51 -0700 4398) 			mdss_fb_is_power_on(mfd) && mfd->mdp.off_fnc) {
30a0116076af4 (Zohaib Alam                   2014-09-10 11:44:08 -0400 4399) 			mfd->panel_power_state = MDSS_PANEL_POWER_OFF;
d00b8490439fd (Arpita Banerjee               2013-06-11 19:24:20 -0700 4400) 			ret = mfd->mdp.off_fnc(mfd);
30a0116076af4 (Zohaib Alam                   2014-09-10 11:44:08 -0400 4401) 			if (ret == 0)
d00b8490439fd (Arpita Banerjee               2013-06-11 19:24:20 -0700 4402) 				mfd->dcm_state = DCM_UNINIT;
30a0116076af4 (Zohaib Alam                   2014-09-10 11:44:08 -0400 4403) 			else
30a0116076af4 (Zohaib Alam                   2014-09-10 11:44:08 -0400 4404) 				pr_err("DCM_BLANK failed\n");
acd7b2ddcd4b9 (Ingrid Gallardo               2014-09-29 11:25:10 -0700 4405) 
acd7b2ddcd4b9 (Ingrid Gallardo               2014-09-29 11:25:10 -0700 4406) 			if (mfd->disp_thread)
acd7b2ddcd4b9 (Ingrid Gallardo               2014-09-29 11:25:10 -0700 4407) 				mdss_fb_stop_disp_thread(mfd);
d00b8490439fd (Arpita Banerjee               2013-06-11 19:24:20 -0700 4408) 		}
d00b8490439fd (Arpita Banerjee               2013-06-11 19:24:20 -0700 4409) 		break;
c79eef0026e28 (Dhaval Patel                  2013-12-04 12:11:32 -0800 4410) 	case DTM_ENTER:
c79eef0026e28 (Dhaval Patel                  2013-12-04 12:11:32 -0800 4411) 		if (mfd->dcm_state == DCM_UNINIT)
c79eef0026e28 (Dhaval Patel                  2013-12-04 12:11:32 -0800 4412) 			mfd->dcm_state = DTM_ENTER;
c79eef0026e28 (Dhaval Patel                  2013-12-04 12:11:32 -0800 4413) 		break;
c79eef0026e28 (Dhaval Patel                  2013-12-04 12:11:32 -0800 4414) 	case DTM_EXIT:
c79eef0026e28 (Dhaval Patel                  2013-12-04 12:11:32 -0800 4415) 		if (mfd->dcm_state == DTM_ENTER)
c79eef0026e28 (Dhaval Patel                  2013-12-04 12:11:32 -0800 4416) 			mfd->dcm_state = DCM_UNINIT;
c79eef0026e28 (Dhaval Patel                  2013-12-04 12:11:32 -0800 4417) 		break;
d00b8490439fd (Arpita Banerjee               2013-06-11 19:24:20 -0700 4418) 	}
c79eef0026e28 (Dhaval Patel                  2013-12-04 12:11:32 -0800 4419) 
d00b8490439fd (Arpita Banerjee               2013-06-11 19:24:20 -0700 4420) 	return ret;
d00b8490439fd (Arpita Banerjee               2013-06-11 19:24:20 -0700 4421) }
d00b8490439fd (Arpita Banerjee               2013-06-11 19:24:20 -0700 4422) 
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 4423) static int mdss_fb_cursor(struct fb_info *info, void __user *p)
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 4424) {
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 4425) 	struct msm_fb_data_type *mfd = (struct msm_fb_data_type *)info->par;
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 4426) 	struct fb_cursor cursor;
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 4427) 	int ret;
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 4428) 
b192f3c2c194b (Xiaoming Zhou                 2012-12-21 21:23:15 -0500 4429) 	if (!mfd->mdp.cursor_update)
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 4430) 		return -ENODEV;
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 4431) 
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 4432) 	ret = copy_from_user(&cursor, p, sizeof(cursor));
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 4433) 	if (ret)
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 4434) 		return ret;
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 4435) 
b192f3c2c194b (Xiaoming Zhou                 2012-12-21 21:23:15 -0500 4436) 	return mfd->mdp.cursor_update(mfd, &cursor);
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 4437) }
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 4438) 
c040ba96c0105 (Veera Sundaram Sankaran       2015-04-23 18:05:22 -0700 4439) int mdss_fb_async_position_update(struct fb_info *info,
c040ba96c0105 (Veera Sundaram Sankaran       2015-04-23 18:05:22 -0700 4440) 		struct mdp_position_update *update_pos)
c040ba96c0105 (Veera Sundaram Sankaran       2015-04-23 18:05:22 -0700 4441) {
c040ba96c0105 (Veera Sundaram Sankaran       2015-04-23 18:05:22 -0700 4442) 	struct msm_fb_data_type *mfd = (struct msm_fb_data_type *)info->par;
c040ba96c0105 (Veera Sundaram Sankaran       2015-04-23 18:05:22 -0700 4443) 
c040ba96c0105 (Veera Sundaram Sankaran       2015-04-23 18:05:22 -0700 4444) 	if (!update_pos->input_layer_cnt) {
c040ba96c0105 (Veera Sundaram Sankaran       2015-04-23 18:05:22 -0700 4445) 		pr_err("no input layers for position update\n");
c040ba96c0105 (Veera Sundaram Sankaran       2015-04-23 18:05:22 -0700 4446) 		return -EINVAL;
c040ba96c0105 (Veera Sundaram Sankaran       2015-04-23 18:05:22 -0700 4447) 	}
c040ba96c0105 (Veera Sundaram Sankaran       2015-04-23 18:05:22 -0700 4448) 	return mfd->mdp.async_position_update(mfd, update_pos);
c040ba96c0105 (Veera Sundaram Sankaran       2015-04-23 18:05:22 -0700 4449) }
c040ba96c0105 (Veera Sundaram Sankaran       2015-04-23 18:05:22 -0700 4450) 
c040ba96c0105 (Veera Sundaram Sankaran       2015-04-23 18:05:22 -0700 4451) static int mdss_fb_async_position_update_ioctl(struct fb_info *info,
c040ba96c0105 (Veera Sundaram Sankaran       2015-04-23 18:05:22 -0700 4452) 		unsigned long *argp)
c040ba96c0105 (Veera Sundaram Sankaran       2015-04-23 18:05:22 -0700 4453) {
c040ba96c0105 (Veera Sundaram Sankaran       2015-04-23 18:05:22 -0700 4454) 	struct msm_fb_data_type *mfd = (struct msm_fb_data_type *)info->par;
c040ba96c0105 (Veera Sundaram Sankaran       2015-04-23 18:05:22 -0700 4455) 	struct mdp_position_update update_pos;
c040ba96c0105 (Veera Sundaram Sankaran       2015-04-23 18:05:22 -0700 4456) 	int ret, rc;
c040ba96c0105 (Veera Sundaram Sankaran       2015-04-23 18:05:22 -0700 4457) 	u32 buffer_size, layer_cnt;
c040ba96c0105 (Veera Sundaram Sankaran       2015-04-23 18:05:22 -0700 4458) 	struct mdp_async_layer *layer_list = NULL;
c040ba96c0105 (Veera Sundaram Sankaran       2015-04-23 18:05:22 -0700 4459) 	struct mdp_async_layer __user *input_layer_list;
c040ba96c0105 (Veera Sundaram Sankaran       2015-04-23 18:05:22 -0700 4460) 
c040ba96c0105 (Veera Sundaram Sankaran       2015-04-23 18:05:22 -0700 4461) 	if (!mfd->mdp.async_position_update)
c040ba96c0105 (Veera Sundaram Sankaran       2015-04-23 18:05:22 -0700 4462) 		return -ENODEV;
c040ba96c0105 (Veera Sundaram Sankaran       2015-04-23 18:05:22 -0700 4463) 
c040ba96c0105 (Veera Sundaram Sankaran       2015-04-23 18:05:22 -0700 4464) 	ret = copy_from_user(&update_pos, argp, sizeof(update_pos));
c040ba96c0105 (Veera Sundaram Sankaran       2015-04-23 18:05:22 -0700 4465) 	if (ret) {
c040ba96c0105 (Veera Sundaram Sankaran       2015-04-23 18:05:22 -0700 4466) 		pr_err("copy from user failed\n");
c040ba96c0105 (Veera Sundaram Sankaran       2015-04-23 18:05:22 -0700 4467) 		return ret;
c040ba96c0105 (Veera Sundaram Sankaran       2015-04-23 18:05:22 -0700 4468) 	}
c040ba96c0105 (Veera Sundaram Sankaran       2015-04-23 18:05:22 -0700 4469) 	input_layer_list = update_pos.input_layers;
c040ba96c0105 (Veera Sundaram Sankaran       2015-04-23 18:05:22 -0700 4470) 
c040ba96c0105 (Veera Sundaram Sankaran       2015-04-23 18:05:22 -0700 4471) 	layer_cnt = update_pos.input_layer_cnt;
be23185307077 (Adrian Salido-Moreno          2016-04-06 09:29:37 -0700 4472) 	if ((!layer_cnt) || (layer_cnt > MAX_LAYER_COUNT)) {
be23185307077 (Adrian Salido-Moreno          2016-04-06 09:29:37 -0700 4473) 		pr_err("invalid async layers :%d to update\n", layer_cnt);
c040ba96c0105 (Veera Sundaram Sankaran       2015-04-23 18:05:22 -0700 4474) 		return -EINVAL;
c040ba96c0105 (Veera Sundaram Sankaran       2015-04-23 18:05:22 -0700 4475) 	}
c040ba96c0105 (Veera Sundaram Sankaran       2015-04-23 18:05:22 -0700 4476) 
c040ba96c0105 (Veera Sundaram Sankaran       2015-04-23 18:05:22 -0700 4477) 	buffer_size = sizeof(struct mdp_async_layer) * layer_cnt;
c040ba96c0105 (Veera Sundaram Sankaran       2015-04-23 18:05:22 -0700 4478) 	layer_list = kmalloc(buffer_size, GFP_KERNEL);
c040ba96c0105 (Veera Sundaram Sankaran       2015-04-23 18:05:22 -0700 4479) 	if (!layer_list) {
c040ba96c0105 (Veera Sundaram Sankaran       2015-04-23 18:05:22 -0700 4480) 		pr_err("unable to allocate memory for layers\n");
c040ba96c0105 (Veera Sundaram Sankaran       2015-04-23 18:05:22 -0700 4481) 		return -ENOMEM;
c040ba96c0105 (Veera Sundaram Sankaran       2015-04-23 18:05:22 -0700 4482) 	}
c040ba96c0105 (Veera Sundaram Sankaran       2015-04-23 18:05:22 -0700 4483) 
c040ba96c0105 (Veera Sundaram Sankaran       2015-04-23 18:05:22 -0700 4484) 	ret = copy_from_user(layer_list, input_layer_list, buffer_size);
c040ba96c0105 (Veera Sundaram Sankaran       2015-04-23 18:05:22 -0700 4485) 	if (ret) {
c040ba96c0105 (Veera Sundaram Sankaran       2015-04-23 18:05:22 -0700 4486) 		pr_err("layer list copy from user failed\n");
c040ba96c0105 (Veera Sundaram Sankaran       2015-04-23 18:05:22 -0700 4487) 		goto end;
c040ba96c0105 (Veera Sundaram Sankaran       2015-04-23 18:05:22 -0700 4488) 	}
c040ba96c0105 (Veera Sundaram Sankaran       2015-04-23 18:05:22 -0700 4489) 	update_pos.input_layers = layer_list;
c040ba96c0105 (Veera Sundaram Sankaran       2015-04-23 18:05:22 -0700 4490) 
c040ba96c0105 (Veera Sundaram Sankaran       2015-04-23 18:05:22 -0700 4491) 	ret = mdss_fb_async_position_update(info, &update_pos);
c040ba96c0105 (Veera Sundaram Sankaran       2015-04-23 18:05:22 -0700 4492) 	if (ret)
c040ba96c0105 (Veera Sundaram Sankaran       2015-04-23 18:05:22 -0700 4493) 		pr_err("async position update failed ret:%d\n", ret);
c040ba96c0105 (Veera Sundaram Sankaran       2015-04-23 18:05:22 -0700 4494) 
c040ba96c0105 (Veera Sundaram Sankaran       2015-04-23 18:05:22 -0700 4495) 	rc = copy_to_user(input_layer_list, layer_list, buffer_size);
c040ba96c0105 (Veera Sundaram Sankaran       2015-04-23 18:05:22 -0700 4496) 	if (rc)
c040ba96c0105 (Veera Sundaram Sankaran       2015-04-23 18:05:22 -0700 4497) 		pr_err("layer error code copy to user failed\n");
c040ba96c0105 (Veera Sundaram Sankaran       2015-04-23 18:05:22 -0700 4498) 
c040ba96c0105 (Veera Sundaram Sankaran       2015-04-23 18:05:22 -0700 4499) 	update_pos.input_layers = input_layer_list;
c040ba96c0105 (Veera Sundaram Sankaran       2015-04-23 18:05:22 -0700 4500) 	rc = copy_to_user(argp, &update_pos,
c040ba96c0105 (Veera Sundaram Sankaran       2015-04-23 18:05:22 -0700 4501) 			sizeof(struct mdp_position_update));
c040ba96c0105 (Veera Sundaram Sankaran       2015-04-23 18:05:22 -0700 4502) 	if (rc)
c040ba96c0105 (Veera Sundaram Sankaran       2015-04-23 18:05:22 -0700 4503) 		pr_err("copy to user for layers failed");
c040ba96c0105 (Veera Sundaram Sankaran       2015-04-23 18:05:22 -0700 4504) 
c040ba96c0105 (Veera Sundaram Sankaran       2015-04-23 18:05:22 -0700 4505) end:
c040ba96c0105 (Veera Sundaram Sankaran       2015-04-23 18:05:22 -0700 4506) 	kfree(layer_list);
c040ba96c0105 (Veera Sundaram Sankaran       2015-04-23 18:05:22 -0700 4507) 	return ret;
c040ba96c0105 (Veera Sundaram Sankaran       2015-04-23 18:05:22 -0700 4508) }
c040ba96c0105 (Veera Sundaram Sankaran       2015-04-23 18:05:22 -0700 4509) 
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 4510) static int mdss_fb_set_lut(struct fb_info *info, void __user *p)
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 4511) {
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 4512) 	struct msm_fb_data_type *mfd = (struct msm_fb_data_type *)info->par;
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 4513) 	struct fb_cmap cmap;
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 4514) 	int ret;
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 4515) 
b192f3c2c194b (Xiaoming Zhou                 2012-12-21 21:23:15 -0500 4516) 	if (!mfd->mdp.lut_update)
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 4517) 		return -ENODEV;
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 4518) 
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 4519) 	ret = copy_from_user(&cmap, p, sizeof(cmap));
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 4520) 	if (ret)
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 4521) 		return ret;
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 4522) 
b192f3c2c194b (Xiaoming Zhou                 2012-12-21 21:23:15 -0500 4523) 	mfd->mdp.lut_update(mfd, &cmap);
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 4524) 	return 0;
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 4525) }
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 4526) 
0df863c8161ca (Adrian Salido-Moreno          2013-10-15 20:31:50 -0700 4527) /**
7593d245112a1 (Adrian Salido-Moreno          2014-01-10 15:39:49 -0800 4528)  * mdss_fb_sync_get_fence() - get fence from timeline
7593d245112a1 (Adrian Salido-Moreno          2014-01-10 15:39:49 -0800 4529)  * @timeline:	Timeline to create the fence on
7593d245112a1 (Adrian Salido-Moreno          2014-01-10 15:39:49 -0800 4530)  * @fence_name:	Name of the fence that will be created for debugging
7593d245112a1 (Adrian Salido-Moreno          2014-01-10 15:39:49 -0800 4531)  * @val:	Timeline value at which the fence will be signaled
0df863c8161ca (Adrian Salido-Moreno          2013-10-15 20:31:50 -0700 4532)  *
7593d245112a1 (Adrian Salido-Moreno          2014-01-10 15:39:49 -0800 4533)  * Function returns a fence on the timeline given with the name provided.
7593d245112a1 (Adrian Salido-Moreno          2014-01-10 15:39:49 -0800 4534)  * The fence created will be signaled when the timeline is advanced.
0df863c8161ca (Adrian Salido-Moreno          2013-10-15 20:31:50 -0700 4535)  */
7593d245112a1 (Adrian Salido-Moreno          2014-01-10 15:39:49 -0800 4536) struct sync_fence *mdss_fb_sync_get_fence(struct sw_sync_timeline *timeline,
7593d245112a1 (Adrian Salido-Moreno          2014-01-10 15:39:49 -0800 4537) 		const char *fence_name, int val)
0df863c8161ca (Adrian Salido-Moreno          2013-10-15 20:31:50 -0700 4538) {
7593d245112a1 (Adrian Salido-Moreno          2014-01-10 15:39:49 -0800 4539) 	struct sync_pt *sync_pt;
7593d245112a1 (Adrian Salido-Moreno          2014-01-10 15:39:49 -0800 4540) 	struct sync_fence *fence;
0df863c8161ca (Adrian Salido-Moreno          2013-10-15 20:31:50 -0700 4541) 
7593d245112a1 (Adrian Salido-Moreno          2014-01-10 15:39:49 -0800 4542) 	pr_debug("%s: buf sync fence timeline=%d\n", fence_name, val);
0df863c8161ca (Adrian Salido-Moreno          2013-10-15 20:31:50 -0700 4543) 
7593d245112a1 (Adrian Salido-Moreno          2014-01-10 15:39:49 -0800 4544) 	sync_pt = sw_sync_pt_create(timeline, val);
7593d245112a1 (Adrian Salido-Moreno          2014-01-10 15:39:49 -0800 4545) 	if (sync_pt == NULL) {
7593d245112a1 (Adrian Salido-Moreno          2014-01-10 15:39:49 -0800 4546) 		pr_err("%s: cannot create sync point\n", fence_name);
0df863c8161ca (Adrian Salido-Moreno          2013-10-15 20:31:50 -0700 4547) 		return NULL;
0df863c8161ca (Adrian Salido-Moreno          2013-10-15 20:31:50 -0700 4548) 	}
0df863c8161ca (Adrian Salido-Moreno          2013-10-15 20:31:50 -0700 4549) 
0df863c8161ca (Adrian Salido-Moreno          2013-10-15 20:31:50 -0700 4550) 	/* create fence */
7593d245112a1 (Adrian Salido-Moreno          2014-01-10 15:39:49 -0800 4551) 	fence = sync_fence_create(fence_name, sync_pt);
7593d245112a1 (Adrian Salido-Moreno          2014-01-10 15:39:49 -0800 4552) 	if (fence == NULL) {
7593d245112a1 (Adrian Salido-Moreno          2014-01-10 15:39:49 -0800 4553) 		sync_pt_free(sync_pt);
7593d245112a1 (Adrian Salido-Moreno          2014-01-10 15:39:49 -0800 4554) 		pr_err("%s: cannot create fence\n", fence_name);
0df863c8161ca (Adrian Salido-Moreno          2013-10-15 20:31:50 -0700 4555) 		return NULL;
0df863c8161ca (Adrian Salido-Moreno          2013-10-15 20:31:50 -0700 4556) 	}
0df863c8161ca (Adrian Salido-Moreno          2013-10-15 20:31:50 -0700 4557) 
7593d245112a1 (Adrian Salido-Moreno          2014-01-10 15:39:49 -0800 4558) 	return fence;
0df863c8161ca (Adrian Salido-Moreno          2013-10-15 20:31:50 -0700 4559) }
0df863c8161ca (Adrian Salido-Moreno          2013-10-15 20:31:50 -0700 4560) 
21a8ee10e53eb (Jayant Shekhar                2013-08-22 12:31:56 +0530 4561) static int mdss_fb_handle_buf_sync_ioctl(struct msm_sync_pt_data *sync_pt_data,
21a8ee10e53eb (Jayant Shekhar                2013-08-22 12:31:56 +0530 4562) 				 struct mdp_buf_sync *buf_sync)
9bc30b3c612e8 (Ken Zhang                     2012-11-07 18:33:16 -0500 4563) {
d8cc400085a01 (Adrian Salido-Moreno          2013-09-19 19:43:44 -0700 4564) 	int i, ret = 0;
9bc30b3c612e8 (Ken Zhang                     2012-11-07 18:33:16 -0500 4565) 	int acq_fen_fd[MDP_MAX_FENCE_FD];
7593d245112a1 (Adrian Salido-Moreno          2014-01-10 15:39:49 -0800 4566) 	struct sync_fence *fence, *rel_fence, *retire_fence;
0df863c8161ca (Adrian Salido-Moreno          2013-10-15 20:31:50 -0700 4567) 	int rel_fen_fd;
7593d245112a1 (Adrian Salido-Moreno          2014-01-10 15:39:49 -0800 4568) 	int retire_fen_fd;
7593d245112a1 (Adrian Salido-Moreno          2014-01-10 15:39:49 -0800 4569) 	int val;
9bc30b3c612e8 (Ken Zhang                     2012-11-07 18:33:16 -0500 4570) 
9bc30b3c612e8 (Ken Zhang                     2012-11-07 18:33:16 -0500 4571) 	if ((buf_sync->acq_fen_fd_cnt > MDP_MAX_FENCE_FD) ||
21a8ee10e53eb (Jayant Shekhar                2013-08-22 12:31:56 +0530 4572) 				(sync_pt_data->timeline == NULL))
9bc30b3c612e8 (Ken Zhang                     2012-11-07 18:33:16 -0500 4573) 		return -EINVAL;
9bc30b3c612e8 (Ken Zhang                     2012-11-07 18:33:16 -0500 4574) 
9bc30b3c612e8 (Ken Zhang                     2012-11-07 18:33:16 -0500 4575) 	if (buf_sync->acq_fen_fd_cnt)
9bc30b3c612e8 (Ken Zhang                     2012-11-07 18:33:16 -0500 4576) 		ret = copy_from_user(acq_fen_fd, buf_sync->acq_fen_fd,
9bc30b3c612e8 (Ken Zhang                     2012-11-07 18:33:16 -0500 4577) 				buf_sync->acq_fen_fd_cnt * sizeof(int));
9bc30b3c612e8 (Ken Zhang                     2012-11-07 18:33:16 -0500 4578) 	if (ret) {
5f1c60463e9eb (Dhaval Patel                  2014-07-11 15:09:12 -0700 4579) 		pr_err("%s: copy_from_user failed\n", sync_pt_data->fence_name);
9bc30b3c612e8 (Ken Zhang                     2012-11-07 18:33:16 -0500 4580) 		return ret;
9bc30b3c612e8 (Ken Zhang                     2012-11-07 18:33:16 -0500 4581) 	}
21a8ee10e53eb (Jayant Shekhar                2013-08-22 12:31:56 +0530 4582) 
0df863c8161ca (Adrian Salido-Moreno          2013-10-15 20:31:50 -0700 4583) 	i = mdss_fb_wait_for_fence(sync_pt_data);
0df863c8161ca (Adrian Salido-Moreno          2013-10-15 20:31:50 -0700 4584) 	if (i > 0)
0df863c8161ca (Adrian Salido-Moreno          2013-10-15 20:31:50 -0700 4585) 		pr_warn("%s: waited on %d active fences\n",
0df863c8161ca (Adrian Salido-Moreno          2013-10-15 20:31:50 -0700 4586) 				sync_pt_data->fence_name, i);
0df863c8161ca (Adrian Salido-Moreno          2013-10-15 20:31:50 -0700 4587) 
21a8ee10e53eb (Jayant Shekhar                2013-08-22 12:31:56 +0530 4588) 	mutex_lock(&sync_pt_data->sync_mutex);
9bc30b3c612e8 (Ken Zhang                     2012-11-07 18:33:16 -0500 4589) 	for (i = 0; i < buf_sync->acq_fen_fd_cnt; i++) {
9bc30b3c612e8 (Ken Zhang                     2012-11-07 18:33:16 -0500 4590) 		fence = sync_fence_fdget(acq_fen_fd[i]);
9bc30b3c612e8 (Ken Zhang                     2012-11-07 18:33:16 -0500 4591) 		if (fence == NULL) {
0df863c8161ca (Adrian Salido-Moreno          2013-10-15 20:31:50 -0700 4592) 			pr_err("%s: null fence! i=%d fd=%d\n",
0df863c8161ca (Adrian Salido-Moreno          2013-10-15 20:31:50 -0700 4593) 					sync_pt_data->fence_name, i,
0df863c8161ca (Adrian Salido-Moreno          2013-10-15 20:31:50 -0700 4594) 					acq_fen_fd[i]);
9bc30b3c612e8 (Ken Zhang                     2012-11-07 18:33:16 -0500 4595) 			ret = -EINVAL;
9bc30b3c612e8 (Ken Zhang                     2012-11-07 18:33:16 -0500 4596) 			break;
9bc30b3c612e8 (Ken Zhang                     2012-11-07 18:33:16 -0500 4597) 		}
21a8ee10e53eb (Jayant Shekhar                2013-08-22 12:31:56 +0530 4598) 		sync_pt_data->acq_fen[i] = fence;
9bc30b3c612e8 (Ken Zhang                     2012-11-07 18:33:16 -0500 4599) 	}
d8cc400085a01 (Adrian Salido-Moreno          2013-09-19 19:43:44 -0700 4600) 	sync_pt_data->acq_fen_cnt = i;
9bc30b3c612e8 (Ken Zhang                     2012-11-07 18:33:16 -0500 4601) 	if (ret)
9bc30b3c612e8 (Ken Zhang                     2012-11-07 18:33:16 -0500 4602) 		goto buf_sync_err_1;
21a8ee10e53eb (Jayant Shekhar                2013-08-22 12:31:56 +0530 4603) 
7593d245112a1 (Adrian Salido-Moreno          2014-01-10 15:39:49 -0800 4604) 	val = sync_pt_data->timeline_value + sync_pt_data->threshold +
7593d245112a1 (Adrian Salido-Moreno          2014-01-10 15:39:49 -0800 4605) 			atomic_read(&sync_pt_data->commit_cnt);
7593d245112a1 (Adrian Salido-Moreno          2014-01-10 15:39:49 -0800 4606) 
7593d245112a1 (Adrian Salido-Moreno          2014-01-10 15:39:49 -0800 4607) 	/* Set release fence */
7593d245112a1 (Adrian Salido-Moreno          2014-01-10 15:39:49 -0800 4608) 	rel_fence = mdss_fb_sync_get_fence(sync_pt_data->timeline,
7593d245112a1 (Adrian Salido-Moreno          2014-01-10 15:39:49 -0800 4609) 			sync_pt_data->fence_name, val);
0df863c8161ca (Adrian Salido-Moreno          2013-10-15 20:31:50 -0700 4610) 	if (IS_ERR_OR_NULL(rel_fence)) {
0df863c8161ca (Adrian Salido-Moreno          2013-10-15 20:31:50 -0700 4611) 		pr_err("%s: unable to retrieve release fence\n",
0df863c8161ca (Adrian Salido-Moreno          2013-10-15 20:31:50 -0700 4612) 				sync_pt_data->fence_name);
0df863c8161ca (Adrian Salido-Moreno          2013-10-15 20:31:50 -0700 4613) 		ret = rel_fence ? PTR_ERR(rel_fence) : -ENOMEM;
9bc30b3c612e8 (Ken Zhang                     2012-11-07 18:33:16 -0500 4614) 		goto buf_sync_err_1;
9bc30b3c612e8 (Ken Zhang                     2012-11-07 18:33:16 -0500 4615) 	}
0df863c8161ca (Adrian Salido-Moreno          2013-10-15 20:31:50 -0700 4616) 
9bc30b3c612e8 (Ken Zhang                     2012-11-07 18:33:16 -0500 4617) 	/* create fd */
0df863c8161ca (Adrian Salido-Moreno          2013-10-15 20:31:50 -0700 4618) 	rel_fen_fd = get_unused_fd_flags(0);
0df863c8161ca (Adrian Salido-Moreno          2013-10-15 20:31:50 -0700 4619) 	if (rel_fen_fd < 0) {
dd91409d8e063 (Dhaval Patel                  2014-05-28 12:29:10 -0700 4620) 		pr_err("%s: get_unused_fd_flags failed error:0x%x\n",
dd91409d8e063 (Dhaval Patel                  2014-05-28 12:29:10 -0700 4621) 				sync_pt_data->fence_name, rel_fen_fd);
dd91409d8e063 (Dhaval Patel                  2014-05-28 12:29:10 -0700 4622) 		ret = rel_fen_fd;
9bc30b3c612e8 (Ken Zhang                     2012-11-07 18:33:16 -0500 4623) 		goto buf_sync_err_2;
9bc30b3c612e8 (Ken Zhang                     2012-11-07 18:33:16 -0500 4624) 	}
21a8ee10e53eb (Jayant Shekhar                2013-08-22 12:31:56 +0530 4625) 
0df863c8161ca (Adrian Salido-Moreno          2013-10-15 20:31:50 -0700 4626) 	ret = copy_to_user(buf_sync->rel_fen_fd, &rel_fen_fd, sizeof(int));
9bc30b3c612e8 (Ken Zhang                     2012-11-07 18:33:16 -0500 4627) 	if (ret) {
0df863c8161ca (Adrian Salido-Moreno          2013-10-15 20:31:50 -0700 4628) 		pr_err("%s: copy_to_user failed\n", sync_pt_data->fence_name);
9bc30b3c612e8 (Ken Zhang                     2012-11-07 18:33:16 -0500 4629) 		goto buf_sync_err_3;
9bc30b3c612e8 (Ken Zhang                     2012-11-07 18:33:16 -0500 4630) 	}
7593d245112a1 (Adrian Salido-Moreno          2014-01-10 15:39:49 -0800 4631) 
7593d245112a1 (Adrian Salido-Moreno          2014-01-10 15:39:49 -0800 4632) 	if (!(buf_sync->flags & MDP_BUF_SYNC_FLAG_RETIRE_FENCE))
7593d245112a1 (Adrian Salido-Moreno          2014-01-10 15:39:49 -0800 4633) 		goto skip_retire_fence;
7593d245112a1 (Adrian Salido-Moreno          2014-01-10 15:39:49 -0800 4634) 
7593d245112a1 (Adrian Salido-Moreno          2014-01-10 15:39:49 -0800 4635) 	if (sync_pt_data->get_retire_fence)
7593d245112a1 (Adrian Salido-Moreno          2014-01-10 15:39:49 -0800 4636) 		retire_fence = sync_pt_data->get_retire_fence(sync_pt_data);
7593d245112a1 (Adrian Salido-Moreno          2014-01-10 15:39:49 -0800 4637) 	else
7593d245112a1 (Adrian Salido-Moreno          2014-01-10 15:39:49 -0800 4638) 		retire_fence = NULL;
7593d245112a1 (Adrian Salido-Moreno          2014-01-10 15:39:49 -0800 4639) 
7593d245112a1 (Adrian Salido-Moreno          2014-01-10 15:39:49 -0800 4640) 	if (IS_ERR_OR_NULL(retire_fence)) {
7593d245112a1 (Adrian Salido-Moreno          2014-01-10 15:39:49 -0800 4641) 		val += sync_pt_data->retire_threshold;
7593d245112a1 (Adrian Salido-Moreno          2014-01-10 15:39:49 -0800 4642) 		retire_fence = mdss_fb_sync_get_fence(
7593d245112a1 (Adrian Salido-Moreno          2014-01-10 15:39:49 -0800 4643) 			sync_pt_data->timeline, "mdp-retire", val);
7593d245112a1 (Adrian Salido-Moreno          2014-01-10 15:39:49 -0800 4644) 	}
7593d245112a1 (Adrian Salido-Moreno          2014-01-10 15:39:49 -0800 4645) 
7593d245112a1 (Adrian Salido-Moreno          2014-01-10 15:39:49 -0800 4646) 	if (IS_ERR_OR_NULL(retire_fence)) {
7593d245112a1 (Adrian Salido-Moreno          2014-01-10 15:39:49 -0800 4647) 		pr_err("%s: unable to retrieve retire fence\n",
7593d245112a1 (Adrian Salido-Moreno          2014-01-10 15:39:49 -0800 4648) 				sync_pt_data->fence_name);
7593d245112a1 (Adrian Salido-Moreno          2014-01-10 15:39:49 -0800 4649) 		ret = retire_fence ? PTR_ERR(rel_fence) : -ENOMEM;
7593d245112a1 (Adrian Salido-Moreno          2014-01-10 15:39:49 -0800 4650) 		goto buf_sync_err_3;
7593d245112a1 (Adrian Salido-Moreno          2014-01-10 15:39:49 -0800 4651) 	}
7593d245112a1 (Adrian Salido-Moreno          2014-01-10 15:39:49 -0800 4652) 	retire_fen_fd = get_unused_fd_flags(0);
7593d245112a1 (Adrian Salido-Moreno          2014-01-10 15:39:49 -0800 4653) 
7593d245112a1 (Adrian Salido-Moreno          2014-01-10 15:39:49 -0800 4654) 	if (retire_fen_fd < 0) {
dd91409d8e063 (Dhaval Patel                  2014-05-28 12:29:10 -0700 4655) 		pr_err("%s: get_unused_fd_flags failed for retire fence error:0x%x\n",
dd91409d8e063 (Dhaval Patel                  2014-05-28 12:29:10 -0700 4656) 				sync_pt_data->fence_name, retire_fen_fd);
dd91409d8e063 (Dhaval Patel                  2014-05-28 12:29:10 -0700 4657) 		ret = retire_fen_fd;
7593d245112a1 (Adrian Salido-Moreno          2014-01-10 15:39:49 -0800 4658) 		sync_fence_put(retire_fence);
7593d245112a1 (Adrian Salido-Moreno          2014-01-10 15:39:49 -0800 4659) 		goto buf_sync_err_3;
7593d245112a1 (Adrian Salido-Moreno          2014-01-10 15:39:49 -0800 4660) 	}
7593d245112a1 (Adrian Salido-Moreno          2014-01-10 15:39:49 -0800 4661) 
7593d245112a1 (Adrian Salido-Moreno          2014-01-10 15:39:49 -0800 4662) 	ret = copy_to_user(buf_sync->retire_fen_fd, &retire_fen_fd,
7593d245112a1 (Adrian Salido-Moreno          2014-01-10 15:39:49 -0800 4663) 			sizeof(int));
7593d245112a1 (Adrian Salido-Moreno          2014-01-10 15:39:49 -0800 4664) 	if (ret) {
7593d245112a1 (Adrian Salido-Moreno          2014-01-10 15:39:49 -0800 4665) 		pr_err("%s: copy_to_user failed for retire fence\n",
7593d245112a1 (Adrian Salido-Moreno          2014-01-10 15:39:49 -0800 4666) 				sync_pt_data->fence_name);
7593d245112a1 (Adrian Salido-Moreno          2014-01-10 15:39:49 -0800 4667) 		put_unused_fd(retire_fen_fd);
7593d245112a1 (Adrian Salido-Moreno          2014-01-10 15:39:49 -0800 4668) 		sync_fence_put(retire_fence);
7593d245112a1 (Adrian Salido-Moreno          2014-01-10 15:39:49 -0800 4669) 		goto buf_sync_err_3;
7593d245112a1 (Adrian Salido-Moreno          2014-01-10 15:39:49 -0800 4670) 	}
7593d245112a1 (Adrian Salido-Moreno          2014-01-10 15:39:49 -0800 4671) 
c9fe551c9398f (Naseer Ahmed                  2017-02-01 16:24:01 -0500 4672) 	sync_fence_install(rel_fence, rel_fen_fd);
c9fe551c9398f (Naseer Ahmed                  2017-02-01 16:24:01 -0500 4673) 	sync_fence_install(retire_fence, retire_fen_fd);
c9fe551c9398f (Naseer Ahmed                  2017-02-01 16:24:01 -0500 4674) 
7593d245112a1 (Adrian Salido-Moreno          2014-01-10 15:39:49 -0800 4675) skip_retire_fence:
21a8ee10e53eb (Jayant Shekhar                2013-08-22 12:31:56 +0530 4676) 	mutex_unlock(&sync_pt_data->sync_mutex);
0df863c8161ca (Adrian Salido-Moreno          2013-10-15 20:31:50 -0700 4677) 
0df863c8161ca (Adrian Salido-Moreno          2013-10-15 20:31:50 -0700 4678) 	if (buf_sync->flags & MDP_BUF_SYNC_FLAG_WAIT)
0df863c8161ca (Adrian Salido-Moreno          2013-10-15 20:31:50 -0700 4679) 		mdss_fb_wait_for_fence(sync_pt_data);
0df863c8161ca (Adrian Salido-Moreno          2013-10-15 20:31:50 -0700 4680) 
9bc30b3c612e8 (Ken Zhang                     2012-11-07 18:33:16 -0500 4681) 	return ret;
9bc30b3c612e8 (Ken Zhang                     2012-11-07 18:33:16 -0500 4682) buf_sync_err_3:
0df863c8161ca (Adrian Salido-Moreno          2013-10-15 20:31:50 -0700 4683) 	put_unused_fd(rel_fen_fd);
9bc30b3c612e8 (Ken Zhang                     2012-11-07 18:33:16 -0500 4684) buf_sync_err_2:
0df863c8161ca (Adrian Salido-Moreno          2013-10-15 20:31:50 -0700 4685) 	sync_fence_put(rel_fence);
9bc30b3c612e8 (Ken Zhang                     2012-11-07 18:33:16 -0500 4686) buf_sync_err_1:
d8cc400085a01 (Adrian Salido-Moreno          2013-09-19 19:43:44 -0700 4687) 	for (i = 0; i < sync_pt_data->acq_fen_cnt; i++)
21a8ee10e53eb (Jayant Shekhar                2013-08-22 12:31:56 +0530 4688) 		sync_fence_put(sync_pt_data->acq_fen[i]);
21a8ee10e53eb (Jayant Shekhar                2013-08-22 12:31:56 +0530 4689) 	sync_pt_data->acq_fen_cnt = 0;
21a8ee10e53eb (Jayant Shekhar                2013-08-22 12:31:56 +0530 4690) 	mutex_unlock(&sync_pt_data->sync_mutex);
9bc30b3c612e8 (Ken Zhang                     2012-11-07 18:33:16 -0500 4691) 	return ret;
9bc30b3c612e8 (Ken Zhang                     2012-11-07 18:33:16 -0500 4692) }
ab9f9179e2ec5 (Ken Zhang                     2012-12-02 21:15:47 -0500 4693) static int mdss_fb_display_commit(struct fb_info *info,
ab9f9179e2ec5 (Ken Zhang                     2012-12-02 21:15:47 -0500 4694) 						unsigned long *argp)
ab9f9179e2ec5 (Ken Zhang                     2012-12-02 21:15:47 -0500 4695) {
ab9f9179e2ec5 (Ken Zhang                     2012-12-02 21:15:47 -0500 4696) 	int ret;
ab9f9179e2ec5 (Ken Zhang                     2012-12-02 21:15:47 -0500 4697) 	struct mdp_display_commit disp_commit;
ab9f9179e2ec5 (Ken Zhang                     2012-12-02 21:15:47 -0500 4698) 	ret = copy_from_user(&disp_commit, argp,
ab9f9179e2ec5 (Ken Zhang                     2012-12-02 21:15:47 -0500 4699) 			sizeof(disp_commit));
ab9f9179e2ec5 (Ken Zhang                     2012-12-02 21:15:47 -0500 4700) 	if (ret) {
5f1c60463e9eb (Dhaval Patel                  2014-07-11 15:09:12 -0700 4701) 		pr_err("%s:copy_from_user failed\n", __func__);
ab9f9179e2ec5 (Ken Zhang                     2012-12-02 21:15:47 -0500 4702) 		return ret;
ab9f9179e2ec5 (Ken Zhang                     2012-12-02 21:15:47 -0500 4703) 	}
ab9f9179e2ec5 (Ken Zhang                     2012-12-02 21:15:47 -0500 4704) 	ret = mdss_fb_pan_display_ex(info, &disp_commit);
ab9f9179e2ec5 (Ken Zhang                     2012-12-02 21:15:47 -0500 4705) 	return ret;
ab9f9179e2ec5 (Ken Zhang                     2012-12-02 21:15:47 -0500 4706) }
2747a8445ca2d (Ken Zhang                     2012-12-21 23:12:05 -0500 4707) 
925804a8f8829 (Gopikrishnaiah Anandan        2016-02-12 16:50:02 -0800 4708) /**
925804a8f8829 (Gopikrishnaiah Anandan        2016-02-12 16:50:02 -0800 4709)  * __mdss_fb_copy_pixel_ext() - copy pixel extension payload
925804a8f8829 (Gopikrishnaiah Anandan        2016-02-12 16:50:02 -0800 4710)  * @src: pixel extn structure
925804a8f8829 (Gopikrishnaiah Anandan        2016-02-12 16:50:02 -0800 4711)  * @dest: Qseed3/pixel extn common payload
925804a8f8829 (Gopikrishnaiah Anandan        2016-02-12 16:50:02 -0800 4712)  *
925804a8f8829 (Gopikrishnaiah Anandan        2016-02-12 16:50:02 -0800 4713)  * Function copies the pixel extension parameters into the scale data structure,
925804a8f8829 (Gopikrishnaiah Anandan        2016-02-12 16:50:02 -0800 4714)  * this is required to allow using the scale_v2 data structure for both
925804a8f8829 (Gopikrishnaiah Anandan        2016-02-12 16:50:02 -0800 4715)  * QSEED2 and QSEED3
925804a8f8829 (Gopikrishnaiah Anandan        2016-02-12 16:50:02 -0800 4716)  */
925804a8f8829 (Gopikrishnaiah Anandan        2016-02-12 16:50:02 -0800 4717) static void __mdss_fb_copy_pixel_ext(struct mdp_scale_data *src,
925804a8f8829 (Gopikrishnaiah Anandan        2016-02-12 16:50:02 -0800 4718) 					struct mdp_scale_data_v2 *dest)
925804a8f8829 (Gopikrishnaiah Anandan        2016-02-12 16:50:02 -0800 4719) {
925804a8f8829 (Gopikrishnaiah Anandan        2016-02-12 16:50:02 -0800 4720) 	if (!src || !dest)
925804a8f8829 (Gopikrishnaiah Anandan        2016-02-12 16:50:02 -0800 4721) 		return;
f3b323b0a2980 (Abhijit Kulkarni              2016-11-22 20:32:06 -0800 4722) 	dest->enable = true;
925804a8f8829 (Gopikrishnaiah Anandan        2016-02-12 16:50:02 -0800 4723) 	memcpy(dest->init_phase_x, src->init_phase_x,
925804a8f8829 (Gopikrishnaiah Anandan        2016-02-12 16:50:02 -0800 4724) 		sizeof(src->init_phase_x));
925804a8f8829 (Gopikrishnaiah Anandan        2016-02-12 16:50:02 -0800 4725) 	memcpy(dest->phase_step_x, src->phase_step_x,
925804a8f8829 (Gopikrishnaiah Anandan        2016-02-12 16:50:02 -0800 4726) 		sizeof(src->init_phase_x));
925804a8f8829 (Gopikrishnaiah Anandan        2016-02-12 16:50:02 -0800 4727) 	memcpy(dest->init_phase_y, src->init_phase_y,
925804a8f8829 (Gopikrishnaiah Anandan        2016-02-12 16:50:02 -0800 4728) 		sizeof(src->init_phase_x));
925804a8f8829 (Gopikrishnaiah Anandan        2016-02-12 16:50:02 -0800 4729) 	memcpy(dest->phase_step_y, src->phase_step_y,
925804a8f8829 (Gopikrishnaiah Anandan        2016-02-12 16:50:02 -0800 4730) 		sizeof(src->init_phase_x));
925804a8f8829 (Gopikrishnaiah Anandan        2016-02-12 16:50:02 -0800 4731) 
925804a8f8829 (Gopikrishnaiah Anandan        2016-02-12 16:50:02 -0800 4732) 	memcpy(dest->num_ext_pxls_left, src->num_ext_pxls_left,
925804a8f8829 (Gopikrishnaiah Anandan        2016-02-12 16:50:02 -0800 4733) 		sizeof(src->num_ext_pxls_left));
925804a8f8829 (Gopikrishnaiah Anandan        2016-02-12 16:50:02 -0800 4734) 	memcpy(dest->num_ext_pxls_right, src->num_ext_pxls_right,
925804a8f8829 (Gopikrishnaiah Anandan        2016-02-12 16:50:02 -0800 4735) 		sizeof(src->num_ext_pxls_right));
925804a8f8829 (Gopikrishnaiah Anandan        2016-02-12 16:50:02 -0800 4736) 	memcpy(dest->num_ext_pxls_top, src->num_ext_pxls_top,
925804a8f8829 (Gopikrishnaiah Anandan        2016-02-12 16:50:02 -0800 4737) 		sizeof(src->num_ext_pxls_top));
925804a8f8829 (Gopikrishnaiah Anandan        2016-02-12 16:50:02 -0800 4738) 	memcpy(dest->num_ext_pxls_btm, src->num_ext_pxls_btm,
925804a8f8829 (Gopikrishnaiah Anandan        2016-02-12 16:50:02 -0800 4739) 		sizeof(src->num_ext_pxls_btm));
925804a8f8829 (Gopikrishnaiah Anandan        2016-02-12 16:50:02 -0800 4740) 
925804a8f8829 (Gopikrishnaiah Anandan        2016-02-12 16:50:02 -0800 4741) 	memcpy(dest->left_ftch, src->left_ftch, sizeof(src->left_ftch));
925804a8f8829 (Gopikrishnaiah Anandan        2016-02-12 16:50:02 -0800 4742) 	memcpy(dest->left_rpt, src->left_rpt, sizeof(src->left_rpt));
925804a8f8829 (Gopikrishnaiah Anandan        2016-02-12 16:50:02 -0800 4743) 	memcpy(dest->right_ftch, src->right_ftch, sizeof(src->right_ftch));
925804a8f8829 (Gopikrishnaiah Anandan        2016-02-12 16:50:02 -0800 4744) 	memcpy(dest->right_rpt, src->right_rpt, sizeof(src->right_rpt));
925804a8f8829 (Gopikrishnaiah Anandan        2016-02-12 16:50:02 -0800 4745) 
925804a8f8829 (Gopikrishnaiah Anandan        2016-02-12 16:50:02 -0800 4746) 
925804a8f8829 (Gopikrishnaiah Anandan        2016-02-12 16:50:02 -0800 4747) 	memcpy(dest->top_rpt, src->top_rpt, sizeof(src->top_rpt));
925804a8f8829 (Gopikrishnaiah Anandan        2016-02-12 16:50:02 -0800 4748) 	memcpy(dest->btm_rpt, src->btm_rpt, sizeof(src->btm_rpt));
925804a8f8829 (Gopikrishnaiah Anandan        2016-02-12 16:50:02 -0800 4749) 	memcpy(dest->top_ftch, src->top_ftch, sizeof(src->top_ftch));
925804a8f8829 (Gopikrishnaiah Anandan        2016-02-12 16:50:02 -0800 4750) 	memcpy(dest->btm_ftch, src->btm_ftch, sizeof(src->btm_ftch));
925804a8f8829 (Gopikrishnaiah Anandan        2016-02-12 16:50:02 -0800 4751) 
925804a8f8829 (Gopikrishnaiah Anandan        2016-02-12 16:50:02 -0800 4752) 	memcpy(dest->roi_w, src->roi_w, sizeof(src->roi_w));
925804a8f8829 (Gopikrishnaiah Anandan        2016-02-12 16:50:02 -0800 4753) }
925804a8f8829 (Gopikrishnaiah Anandan        2016-02-12 16:50:02 -0800 4754) 
925804a8f8829 (Gopikrishnaiah Anandan        2016-02-12 16:50:02 -0800 4755) static int __mdss_fb_scaler_handler(struct mdp_input_layer *layer)
925804a8f8829 (Gopikrishnaiah Anandan        2016-02-12 16:50:02 -0800 4756) {
925804a8f8829 (Gopikrishnaiah Anandan        2016-02-12 16:50:02 -0800 4757) 	int ret = 0;
925804a8f8829 (Gopikrishnaiah Anandan        2016-02-12 16:50:02 -0800 4758) 	struct mdp_scale_data *pixel_ext = NULL;
925804a8f8829 (Gopikrishnaiah Anandan        2016-02-12 16:50:02 -0800 4759) 	struct mdp_scale_data_v2 *scale = NULL;
925804a8f8829 (Gopikrishnaiah Anandan        2016-02-12 16:50:02 -0800 4760) 
925804a8f8829 (Gopikrishnaiah Anandan        2016-02-12 16:50:02 -0800 4761) 	if ((layer->flags & MDP_LAYER_ENABLE_PIXEL_EXT) &&
925804a8f8829 (Gopikrishnaiah Anandan        2016-02-12 16:50:02 -0800 4762) 			(layer->flags & MDP_LAYER_ENABLE_QSEED3_SCALE)) {
925804a8f8829 (Gopikrishnaiah Anandan        2016-02-12 16:50:02 -0800 4763) 		pr_err("Invalid flag configuration for scaler, %x\n",
925804a8f8829 (Gopikrishnaiah Anandan        2016-02-12 16:50:02 -0800 4764) 				layer->flags);
925804a8f8829 (Gopikrishnaiah Anandan        2016-02-12 16:50:02 -0800 4765) 		ret = -EINVAL;
925804a8f8829 (Gopikrishnaiah Anandan        2016-02-12 16:50:02 -0800 4766) 		goto err;
925804a8f8829 (Gopikrishnaiah Anandan        2016-02-12 16:50:02 -0800 4767) 	}
925804a8f8829 (Gopikrishnaiah Anandan        2016-02-12 16:50:02 -0800 4768) 
925804a8f8829 (Gopikrishnaiah Anandan        2016-02-12 16:50:02 -0800 4769) 	if (layer->flags & MDP_LAYER_ENABLE_PIXEL_EXT) {
925804a8f8829 (Gopikrishnaiah Anandan        2016-02-12 16:50:02 -0800 4770) 		scale = kzalloc(sizeof(struct mdp_scale_data_v2),
925804a8f8829 (Gopikrishnaiah Anandan        2016-02-12 16:50:02 -0800 4771) 				GFP_KERNEL);
925804a8f8829 (Gopikrishnaiah Anandan        2016-02-12 16:50:02 -0800 4772) 		pixel_ext = kzalloc(sizeof(struct mdp_scale_data),
925804a8f8829 (Gopikrishnaiah Anandan        2016-02-12 16:50:02 -0800 4773) 				GFP_KERNEL);
925804a8f8829 (Gopikrishnaiah Anandan        2016-02-12 16:50:02 -0800 4774) 		if (!scale || !pixel_ext) {
925804a8f8829 (Gopikrishnaiah Anandan        2016-02-12 16:50:02 -0800 4775) 			mdss_mdp_free_layer_pp_info(layer);
925804a8f8829 (Gopikrishnaiah Anandan        2016-02-12 16:50:02 -0800 4776) 			ret = -ENOMEM;
925804a8f8829 (Gopikrishnaiah Anandan        2016-02-12 16:50:02 -0800 4777) 			goto err;
925804a8f8829 (Gopikrishnaiah Anandan        2016-02-12 16:50:02 -0800 4778) 		}
925804a8f8829 (Gopikrishnaiah Anandan        2016-02-12 16:50:02 -0800 4779) 		ret = copy_from_user(pixel_ext, layer->scale,
925804a8f8829 (Gopikrishnaiah Anandan        2016-02-12 16:50:02 -0800 4780) 				sizeof(struct mdp_scale_data));
925804a8f8829 (Gopikrishnaiah Anandan        2016-02-12 16:50:02 -0800 4781) 		if (ret) {
925804a8f8829 (Gopikrishnaiah Anandan        2016-02-12 16:50:02 -0800 4782) 			mdss_mdp_free_layer_pp_info(layer);
925804a8f8829 (Gopikrishnaiah Anandan        2016-02-12 16:50:02 -0800 4783) 			ret = -EFAULT;
925804a8f8829 (Gopikrishnaiah Anandan        2016-02-12 16:50:02 -0800 4784) 			goto err;
925804a8f8829 (Gopikrishnaiah Anandan        2016-02-12 16:50:02 -0800 4785) 		}
925804a8f8829 (Gopikrishnaiah Anandan        2016-02-12 16:50:02 -0800 4786) 		__mdss_fb_copy_pixel_ext(pixel_ext, scale);
925804a8f8829 (Gopikrishnaiah Anandan        2016-02-12 16:50:02 -0800 4787) 		layer->scale = scale;
925804a8f8829 (Gopikrishnaiah Anandan        2016-02-12 16:50:02 -0800 4788) 	} else if (layer->flags & MDP_LAYER_ENABLE_QSEED3_SCALE) {
925804a8f8829 (Gopikrishnaiah Anandan        2016-02-12 16:50:02 -0800 4789) 		scale = kzalloc(sizeof(struct mdp_scale_data_v2),
925804a8f8829 (Gopikrishnaiah Anandan        2016-02-12 16:50:02 -0800 4790) 				GFP_KERNEL);
925804a8f8829 (Gopikrishnaiah Anandan        2016-02-12 16:50:02 -0800 4791) 		if (!scale) {
925804a8f8829 (Gopikrishnaiah Anandan        2016-02-12 16:50:02 -0800 4792) 			mdss_mdp_free_layer_pp_info(layer);
925804a8f8829 (Gopikrishnaiah Anandan        2016-02-12 16:50:02 -0800 4793) 			ret =  -ENOMEM;
925804a8f8829 (Gopikrishnaiah Anandan        2016-02-12 16:50:02 -0800 4794) 			goto err;
925804a8f8829 (Gopikrishnaiah Anandan        2016-02-12 16:50:02 -0800 4795) 		}
925804a8f8829 (Gopikrishnaiah Anandan        2016-02-12 16:50:02 -0800 4796) 
925804a8f8829 (Gopikrishnaiah Anandan        2016-02-12 16:50:02 -0800 4797) 		ret = copy_from_user(scale, layer->scale,
925804a8f8829 (Gopikrishnaiah Anandan        2016-02-12 16:50:02 -0800 4798) 				sizeof(struct mdp_scale_data_v2));
925804a8f8829 (Gopikrishnaiah Anandan        2016-02-12 16:50:02 -0800 4799) 		if (ret) {
925804a8f8829 (Gopikrishnaiah Anandan        2016-02-12 16:50:02 -0800 4800) 			mdss_mdp_free_layer_pp_info(layer);
925804a8f8829 (Gopikrishnaiah Anandan        2016-02-12 16:50:02 -0800 4801) 			ret = -EFAULT;
925804a8f8829 (Gopikrishnaiah Anandan        2016-02-12 16:50:02 -0800 4802) 			goto err;
925804a8f8829 (Gopikrishnaiah Anandan        2016-02-12 16:50:02 -0800 4803) 		}
925804a8f8829 (Gopikrishnaiah Anandan        2016-02-12 16:50:02 -0800 4804) 		layer->scale = scale;
925804a8f8829 (Gopikrishnaiah Anandan        2016-02-12 16:50:02 -0800 4805) 	} else {
925804a8f8829 (Gopikrishnaiah Anandan        2016-02-12 16:50:02 -0800 4806) 		layer->scale = NULL;
925804a8f8829 (Gopikrishnaiah Anandan        2016-02-12 16:50:02 -0800 4807) 	}
925804a8f8829 (Gopikrishnaiah Anandan        2016-02-12 16:50:02 -0800 4808) 	kfree(pixel_ext);
925804a8f8829 (Gopikrishnaiah Anandan        2016-02-12 16:50:02 -0800 4809) 	return ret;
925804a8f8829 (Gopikrishnaiah Anandan        2016-02-12 16:50:02 -0800 4810) err:
925804a8f8829 (Gopikrishnaiah Anandan        2016-02-12 16:50:02 -0800 4811) 	kfree(pixel_ext);
925804a8f8829 (Gopikrishnaiah Anandan        2016-02-12 16:50:02 -0800 4812) 	kfree(scale);
925804a8f8829 (Gopikrishnaiah Anandan        2016-02-12 16:50:02 -0800 4813) 	layer->scale = NULL;
925804a8f8829 (Gopikrishnaiah Anandan        2016-02-12 16:50:02 -0800 4814) 	return ret;
925804a8f8829 (Gopikrishnaiah Anandan        2016-02-12 16:50:02 -0800 4815) }
925804a8f8829 (Gopikrishnaiah Anandan        2016-02-12 16:50:02 -0800 4816) 
687db9c75e3ca (Naseer Ahmed                  2016-04-05 15:19:25 -0400 4817) static int __mdss_fb_copy_destscaler_data(struct fb_info *info,
687db9c75e3ca (Naseer Ahmed                  2016-04-05 15:19:25 -0400 4818) 		struct mdp_layer_commit *commit)
687db9c75e3ca (Naseer Ahmed                  2016-04-05 15:19:25 -0400 4819) {
3ce6c47d2142f (Harsh Sahu                    2017-02-16 19:52:02 -0800 4820) 	int    i = 0;
687db9c75e3ca (Naseer Ahmed                  2016-04-05 15:19:25 -0400 4821) 	int    ret = 0;
687db9c75e3ca (Naseer Ahmed                  2016-04-05 15:19:25 -0400 4822) 	u32    data_size;
687db9c75e3ca (Naseer Ahmed                  2016-04-05 15:19:25 -0400 4823) 	struct mdp_destination_scaler_data __user *ds_data_user;
687db9c75e3ca (Naseer Ahmed                  2016-04-05 15:19:25 -0400 4824) 	struct mdp_destination_scaler_data *ds_data = NULL;
687db9c75e3ca (Naseer Ahmed                  2016-04-05 15:19:25 -0400 4825) 	void __user *scale_data_user;
687db9c75e3ca (Naseer Ahmed                  2016-04-05 15:19:25 -0400 4826) 	struct mdp_scale_data_v2 *scale_data = NULL;
687db9c75e3ca (Naseer Ahmed                  2016-04-05 15:19:25 -0400 4827) 	struct msm_fb_data_type *mfd = (struct msm_fb_data_type *)info->par;
687db9c75e3ca (Naseer Ahmed                  2016-04-05 15:19:25 -0400 4828) 	struct mdss_data_type *mdata;
687db9c75e3ca (Naseer Ahmed                  2016-04-05 15:19:25 -0400 4829) 
687db9c75e3ca (Naseer Ahmed                  2016-04-05 15:19:25 -0400 4830) 	if (!mfd || !mfd->mdp.private1) {
687db9c75e3ca (Naseer Ahmed                  2016-04-05 15:19:25 -0400 4831) 		pr_err("mfd is NULL or operation not permitted\n");
687db9c75e3ca (Naseer Ahmed                  2016-04-05 15:19:25 -0400 4832) 		ret = -EINVAL;
687db9c75e3ca (Naseer Ahmed                  2016-04-05 15:19:25 -0400 4833) 		goto err;
687db9c75e3ca (Naseer Ahmed                  2016-04-05 15:19:25 -0400 4834) 	}
687db9c75e3ca (Naseer Ahmed                  2016-04-05 15:19:25 -0400 4835) 
687db9c75e3ca (Naseer Ahmed                  2016-04-05 15:19:25 -0400 4836) 	mdata = mfd_to_mdata(mfd);
6f3a494b3e270 (SGCMarkus                     2019-09-17 21:20:35 +0200 4837) 	if (!mdata || !mdata->scaler_off) {
687db9c75e3ca (Naseer Ahmed                  2016-04-05 15:19:25 -0400 4838) 		pr_err("mdata is NULL or not initialized\n");
687db9c75e3ca (Naseer Ahmed                  2016-04-05 15:19:25 -0400 4839) 		ret = -EINVAL;
687db9c75e3ca (Naseer Ahmed                  2016-04-05 15:19:25 -0400 4840) 		goto err;
687db9c75e3ca (Naseer Ahmed                  2016-04-05 15:19:25 -0400 4841) 	}
687db9c75e3ca (Naseer Ahmed                  2016-04-05 15:19:25 -0400 4842) 
687db9c75e3ca (Naseer Ahmed                  2016-04-05 15:19:25 -0400 4843) 	if (commit->commit_v1.dest_scaler_cnt >
687db9c75e3ca (Naseer Ahmed                  2016-04-05 15:19:25 -0400 4844) 			mdata->scaler_off->ndest_scalers) {
687db9c75e3ca (Naseer Ahmed                  2016-04-05 15:19:25 -0400 4845) 		pr_err("Commit destination scaler cnt larger than HW setting, commit cnt=%d\n",
687db9c75e3ca (Naseer Ahmed                  2016-04-05 15:19:25 -0400 4846) 				commit->commit_v1.dest_scaler_cnt);
687db9c75e3ca (Naseer Ahmed                  2016-04-05 15:19:25 -0400 4847) 		ret = -EINVAL;
687db9c75e3ca (Naseer Ahmed                  2016-04-05 15:19:25 -0400 4848) 		goto err;
687db9c75e3ca (Naseer Ahmed                  2016-04-05 15:19:25 -0400 4849) 	}
687db9c75e3ca (Naseer Ahmed                  2016-04-05 15:19:25 -0400 4850) 
687db9c75e3ca (Naseer Ahmed                  2016-04-05 15:19:25 -0400 4851) 	ds_data_user = (struct mdp_destination_scaler_data *)
687db9c75e3ca (Naseer Ahmed                  2016-04-05 15:19:25 -0400 4852) 		commit->commit_v1.dest_scaler;
687db9c75e3ca (Naseer Ahmed                  2016-04-05 15:19:25 -0400 4853) 	data_size = commit->commit_v1.dest_scaler_cnt *
687db9c75e3ca (Naseer Ahmed                  2016-04-05 15:19:25 -0400 4854) 		sizeof(struct mdp_destination_scaler_data);
687db9c75e3ca (Naseer Ahmed                  2016-04-05 15:19:25 -0400 4855) 	ds_data = kzalloc(data_size, GFP_KERNEL);
687db9c75e3ca (Naseer Ahmed                  2016-04-05 15:19:25 -0400 4856) 	if (!ds_data) {
687db9c75e3ca (Naseer Ahmed                  2016-04-05 15:19:25 -0400 4857) 		ret = -ENOMEM;
687db9c75e3ca (Naseer Ahmed                  2016-04-05 15:19:25 -0400 4858) 		goto err;
687db9c75e3ca (Naseer Ahmed                  2016-04-05 15:19:25 -0400 4859) 	}
687db9c75e3ca (Naseer Ahmed                  2016-04-05 15:19:25 -0400 4860) 
687db9c75e3ca (Naseer Ahmed                  2016-04-05 15:19:25 -0400 4861) 	ret = copy_from_user(ds_data, ds_data_user, data_size);
687db9c75e3ca (Naseer Ahmed                  2016-04-05 15:19:25 -0400 4862) 	if (ret) {
687db9c75e3ca (Naseer Ahmed                  2016-04-05 15:19:25 -0400 4863) 		pr_err("dest scaler data copy from user failed\n");
687db9c75e3ca (Naseer Ahmed                  2016-04-05 15:19:25 -0400 4864) 		goto err;
687db9c75e3ca (Naseer Ahmed                  2016-04-05 15:19:25 -0400 4865) 	}
687db9c75e3ca (Naseer Ahmed                  2016-04-05 15:19:25 -0400 4866) 
687db9c75e3ca (Naseer Ahmed                  2016-04-05 15:19:25 -0400 4867) 	commit->commit_v1.dest_scaler = ds_data;
687db9c75e3ca (Naseer Ahmed                  2016-04-05 15:19:25 -0400 4868) 
687db9c75e3ca (Naseer Ahmed                  2016-04-05 15:19:25 -0400 4869) 	for (i = 0; i < commit->commit_v1.dest_scaler_cnt; i++) {
687db9c75e3ca (Naseer Ahmed                  2016-04-05 15:19:25 -0400 4870) 		scale_data = NULL;
687db9c75e3ca (Naseer Ahmed                  2016-04-05 15:19:25 -0400 4871) 
687db9c75e3ca (Naseer Ahmed                  2016-04-05 15:19:25 -0400 4872) 		if (ds_data[i].scale) {
687db9c75e3ca (Naseer Ahmed                  2016-04-05 15:19:25 -0400 4873) 			scale_data_user = to_user_ptr(ds_data[i].scale);
687db9c75e3ca (Naseer Ahmed                  2016-04-05 15:19:25 -0400 4874) 			data_size = sizeof(struct mdp_scale_data_v2);
687db9c75e3ca (Naseer Ahmed                  2016-04-05 15:19:25 -0400 4875) 
687db9c75e3ca (Naseer Ahmed                  2016-04-05 15:19:25 -0400 4876) 			scale_data = kzalloc(data_size, GFP_KERNEL);
687db9c75e3ca (Naseer Ahmed                  2016-04-05 15:19:25 -0400 4877) 			if (!scale_data) {
687db9c75e3ca (Naseer Ahmed                  2016-04-05 15:19:25 -0400 4878) 				ds_data[i].scale = 0;
687db9c75e3ca (Naseer Ahmed                  2016-04-05 15:19:25 -0400 4879) 				ret = -ENOMEM;
687db9c75e3ca (Naseer Ahmed                  2016-04-05 15:19:25 -0400 4880) 				goto err;
687db9c75e3ca (Naseer Ahmed                  2016-04-05 15:19:25 -0400 4881) 			}
687db9c75e3ca (Naseer Ahmed                  2016-04-05 15:19:25 -0400 4882) 
687db9c75e3ca (Naseer Ahmed                  2016-04-05 15:19:25 -0400 4883) 			ds_data[i].scale = to_user_u64(scale_data);
687db9c75e3ca (Naseer Ahmed                  2016-04-05 15:19:25 -0400 4884) 		}
687db9c75e3ca (Naseer Ahmed                  2016-04-05 15:19:25 -0400 4885) 
687db9c75e3ca (Naseer Ahmed                  2016-04-05 15:19:25 -0400 4886) 		if (scale_data && (ds_data[i].flags &
687db9c75e3ca (Naseer Ahmed                  2016-04-05 15:19:25 -0400 4887) 					(MDP_DESTSCALER_SCALE_UPDATE |
687db9c75e3ca (Naseer Ahmed                  2016-04-05 15:19:25 -0400 4888) 					MDP_DESTSCALER_ENHANCER_UPDATE))) {
687db9c75e3ca (Naseer Ahmed                  2016-04-05 15:19:25 -0400 4889) 			ret = copy_from_user(scale_data, scale_data_user,
687db9c75e3ca (Naseer Ahmed                  2016-04-05 15:19:25 -0400 4890) 					data_size);
687db9c75e3ca (Naseer Ahmed                  2016-04-05 15:19:25 -0400 4891) 			if (ret) {
687db9c75e3ca (Naseer Ahmed                  2016-04-05 15:19:25 -0400 4892) 				pr_err("scale data copy from user failed\n");
3ce6c47d2142f (Harsh Sahu                    2017-02-16 19:52:02 -0800 4893) 				kfree(scale_data);
687db9c75e3ca (Naseer Ahmed                  2016-04-05 15:19:25 -0400 4894) 				goto err;
687db9c75e3ca (Naseer Ahmed                  2016-04-05 15:19:25 -0400 4895) 			}
687db9c75e3ca (Naseer Ahmed                  2016-04-05 15:19:25 -0400 4896) 		}
687db9c75e3ca (Naseer Ahmed                  2016-04-05 15:19:25 -0400 4897) 	}
687db9c75e3ca (Naseer Ahmed                  2016-04-05 15:19:25 -0400 4898) 
687db9c75e3ca (Naseer Ahmed                  2016-04-05 15:19:25 -0400 4899) 	return ret;
687db9c75e3ca (Naseer Ahmed                  2016-04-05 15:19:25 -0400 4900) 
687db9c75e3ca (Naseer Ahmed                  2016-04-05 15:19:25 -0400 4901) err:
687db9c75e3ca (Naseer Ahmed                  2016-04-05 15:19:25 -0400 4902) 	if (ds_data) {
3ce6c47d2142f (Harsh Sahu                    2017-02-16 19:52:02 -0800 4903) 		for (i--; i >= 0; i--) {
687db9c75e3ca (Naseer Ahmed                  2016-04-05 15:19:25 -0400 4904) 			scale_data = to_user_ptr(ds_data[i].scale);
687db9c75e3ca (Naseer Ahmed                  2016-04-05 15:19:25 -0400 4905) 			kfree(scale_data);
687db9c75e3ca (Naseer Ahmed                  2016-04-05 15:19:25 -0400 4906) 		}
687db9c75e3ca (Naseer Ahmed                  2016-04-05 15:19:25 -0400 4907) 		kfree(ds_data);
687db9c75e3ca (Naseer Ahmed                  2016-04-05 15:19:25 -0400 4908) 	}
687db9c75e3ca (Naseer Ahmed                  2016-04-05 15:19:25 -0400 4909) 
687db9c75e3ca (Naseer Ahmed                  2016-04-05 15:19:25 -0400 4910) 	return ret;
687db9c75e3ca (Naseer Ahmed                  2016-04-05 15:19:25 -0400 4911) }
687db9c75e3ca (Naseer Ahmed                  2016-04-05 15:19:25 -0400 4912) 
be2ca2761e376 (Dhaval Patel                  2014-10-29 15:33:30 -0700 4913) static int mdss_fb_atomic_commit_ioctl(struct fb_info *info,
75af757c1b7ba (Dhaval Patel                  2015-11-04 14:01:09 -0800 4914) 	unsigned long *argp, struct file *file)
be2ca2761e376 (Dhaval Patel                  2014-10-29 15:33:30 -0700 4915) {
cde1a1f673668 (Benet Clark                   2015-06-04 18:25:09 -0700 4916) 	int ret, i = 0, j = 0, rc;
be2ca2761e376 (Dhaval Patel                  2014-10-29 15:33:30 -0700 4917) 	struct mdp_layer_commit  commit;
be2ca2761e376 (Dhaval Patel                  2014-10-29 15:33:30 -0700 4918) 	u32 buffer_size, layer_count;
be2ca2761e376 (Dhaval Patel                  2014-10-29 15:33:30 -0700 4919) 	struct mdp_input_layer *layer, *layer_list = NULL;
be2ca2761e376 (Dhaval Patel                  2014-10-29 15:33:30 -0700 4920) 	struct mdp_input_layer __user *input_layer_list;
b12430afd8960 (Xiaoming Zhou                 2015-01-27 11:59:43 -0500 4921) 	struct mdp_output_layer *output_layer = NULL;
b12430afd8960 (Xiaoming Zhou                 2015-01-27 11:59:43 -0500 4922) 	struct mdp_output_layer __user *output_layer_user;
687db9c75e3ca (Naseer Ahmed                  2016-04-05 15:19:25 -0400 4923) 	struct mdp_destination_scaler_data *ds_data = NULL;
687db9c75e3ca (Naseer Ahmed                  2016-04-05 15:19:25 -0400 4924) 	struct mdp_destination_scaler_data __user *ds_data_user;
44aa99c22023f (Ashish Garg                   2017-05-18 15:54:39 +0530 4925) 	struct msm_fb_data_type *mfd;
18dd0531c7659 (Krishna Chaitanya Devarakonda 2017-11-16 19:14:12 +0530 4926) 	struct mdss_overlay_private *mdp5_data = NULL;
be2ca2761e376 (Dhaval Patel                  2014-10-29 15:33:30 -0700 4927) 
be2ca2761e376 (Dhaval Patel                  2014-10-29 15:33:30 -0700 4928) 	ret = copy_from_user(&commit, argp, sizeof(struct mdp_layer_commit));
be2ca2761e376 (Dhaval Patel                  2014-10-29 15:33:30 -0700 4929) 	if (ret) {
be2ca2761e376 (Dhaval Patel                  2014-10-29 15:33:30 -0700 4930) 		pr_err("%s:copy_from_user failed\n", __func__);
be2ca2761e376 (Dhaval Patel                  2014-10-29 15:33:30 -0700 4931) 		return ret;
be2ca2761e376 (Dhaval Patel                  2014-10-29 15:33:30 -0700 4932) 	}
be2ca2761e376 (Dhaval Patel                  2014-10-29 15:33:30 -0700 4933) 
44aa99c22023f (Ashish Garg                   2017-05-18 15:54:39 +0530 4934) 	mfd = (struct msm_fb_data_type *)info->par;
44aa99c22023f (Ashish Garg                   2017-05-18 15:54:39 +0530 4935) 	if (!mfd)
44aa99c22023f (Ashish Garg                   2017-05-18 15:54:39 +0530 4936) 		return -EINVAL;
44aa99c22023f (Ashish Garg                   2017-05-18 15:54:39 +0530 4937) 
18dd0531c7659 (Krishna Chaitanya Devarakonda 2017-11-16 19:14:12 +0530 4938) 	mdp5_data = mfd_to_mdp5_data(mfd);
18dd0531c7659 (Krishna Chaitanya Devarakonda 2017-11-16 19:14:12 +0530 4939) 
44aa99c22023f (Ashish Garg                   2017-05-18 15:54:39 +0530 4940) 	if (mfd->panel_info->panel_dead) {
44aa99c22023f (Ashish Garg                   2017-05-18 15:54:39 +0530 4941) 		pr_debug("early commit return\n");
44aa99c22023f (Ashish Garg                   2017-05-18 15:54:39 +0530 4942) 		MDSS_XLOG(mfd->panel_info->panel_dead);
18dd0531c7659 (Krishna Chaitanya Devarakonda 2017-11-16 19:14:12 +0530 4943) 		/*
18dd0531c7659 (Krishna Chaitanya Devarakonda 2017-11-16 19:14:12 +0530 4944) 		 * In case of an ESD attack, since we early return from the
18dd0531c7659 (Krishna Chaitanya Devarakonda 2017-11-16 19:14:12 +0530 4945) 		 * commits, we need to signal the outstanding fences.
18dd0531c7659 (Krishna Chaitanya Devarakonda 2017-11-16 19:14:12 +0530 4946) 		 */
18dd0531c7659 (Krishna Chaitanya Devarakonda 2017-11-16 19:14:12 +0530 4947) 		mdss_fb_release_fences(mfd);
18dd0531c7659 (Krishna Chaitanya Devarakonda 2017-11-16 19:14:12 +0530 4948) 		if ((mfd->panel.type == MIPI_CMD_PANEL) &&
18dd0531c7659 (Krishna Chaitanya Devarakonda 2017-11-16 19:14:12 +0530 4949) 			mfd->mdp.signal_retire_fence && mdp5_data)
18dd0531c7659 (Krishna Chaitanya Devarakonda 2017-11-16 19:14:12 +0530 4950) 			mfd->mdp.signal_retire_fence(mfd,
18dd0531c7659 (Krishna Chaitanya Devarakonda 2017-11-16 19:14:12 +0530 4951) 						mdp5_data->retire_cnt);
44aa99c22023f (Ashish Garg                   2017-05-18 15:54:39 +0530 4952) 		return 0;
44aa99c22023f (Ashish Garg                   2017-05-18 15:54:39 +0530 4953) 	}
44aa99c22023f (Ashish Garg                   2017-05-18 15:54:39 +0530 4954) 
b12430afd8960 (Xiaoming Zhou                 2015-01-27 11:59:43 -0500 4955) 	output_layer_user = commit.commit_v1.output_layer;
b12430afd8960 (Xiaoming Zhou                 2015-01-27 11:59:43 -0500 4956) 	if (output_layer_user) {
b12430afd8960 (Xiaoming Zhou                 2015-01-27 11:59:43 -0500 4957) 		buffer_size = sizeof(struct mdp_output_layer);
b12430afd8960 (Xiaoming Zhou                 2015-01-27 11:59:43 -0500 4958) 		output_layer = kzalloc(buffer_size, GFP_KERNEL);
b12430afd8960 (Xiaoming Zhou                 2015-01-27 11:59:43 -0500 4959) 		if (!output_layer) {
b12430afd8960 (Xiaoming Zhou                 2015-01-27 11:59:43 -0500 4960) 			pr_err("unable to allocate memory for output layer\n");
b12430afd8960 (Xiaoming Zhou                 2015-01-27 11:59:43 -0500 4961) 			return -ENOMEM;
b12430afd8960 (Xiaoming Zhou                 2015-01-27 11:59:43 -0500 4962) 		}
b12430afd8960 (Xiaoming Zhou                 2015-01-27 11:59:43 -0500 4963) 
b12430afd8960 (Xiaoming Zhou                 2015-01-27 11:59:43 -0500 4964) 		ret = copy_from_user(output_layer,
b12430afd8960 (Xiaoming Zhou                 2015-01-27 11:59:43 -0500 4965) 			output_layer_user, buffer_size);
b12430afd8960 (Xiaoming Zhou                 2015-01-27 11:59:43 -0500 4966) 		if (ret) {
b12430afd8960 (Xiaoming Zhou                 2015-01-27 11:59:43 -0500 4967) 			pr_err("layer list copy from user failed\n");
b12430afd8960 (Xiaoming Zhou                 2015-01-27 11:59:43 -0500 4968) 			goto err;
b12430afd8960 (Xiaoming Zhou                 2015-01-27 11:59:43 -0500 4969) 		}
b12430afd8960 (Xiaoming Zhou                 2015-01-27 11:59:43 -0500 4970) 		commit.commit_v1.output_layer = output_layer;
b12430afd8960 (Xiaoming Zhou                 2015-01-27 11:59:43 -0500 4971) 	}
b12430afd8960 (Xiaoming Zhou                 2015-01-27 11:59:43 -0500 4972) 
be2ca2761e376 (Dhaval Patel                  2014-10-29 15:33:30 -0700 4973) 	layer_count = commit.commit_v1.input_layer_cnt;
be2ca2761e376 (Dhaval Patel                  2014-10-29 15:33:30 -0700 4974) 	input_layer_list = commit.commit_v1.input_layers;
be2ca2761e376 (Dhaval Patel                  2014-10-29 15:33:30 -0700 4975) 
be2ca2761e376 (Dhaval Patel                  2014-10-29 15:33:30 -0700 4976) 	if (layer_count > MAX_LAYER_COUNT) {
5475f94ca5d57 (Krishna Chaitanya Devarakonda 2017-09-04 15:43:55 +0530 4977) 		pr_err("invalid layer count :%d\n", layer_count);
b12430afd8960 (Xiaoming Zhou                 2015-01-27 11:59:43 -0500 4978) 		ret = -EINVAL;
b12430afd8960 (Xiaoming Zhou                 2015-01-27 11:59:43 -0500 4979) 		goto err;
be2ca2761e376 (Dhaval Patel                  2014-10-29 15:33:30 -0700 4980) 	} else if (layer_count) {
be2ca2761e376 (Dhaval Patel                  2014-10-29 15:33:30 -0700 4981) 		buffer_size = sizeof(struct mdp_input_layer) * layer_count;
e7bfd98d5e55b (Benet Clark                   2015-10-01 17:32:46 -0700 4982) 		layer_list = kzalloc(buffer_size, GFP_KERNEL);
be2ca2761e376 (Dhaval Patel                  2014-10-29 15:33:30 -0700 4983) 		if (!layer_list) {
be2ca2761e376 (Dhaval Patel                  2014-10-29 15:33:30 -0700 4984) 			pr_err("unable to allocate memory for layers\n");
be2ca2761e376 (Dhaval Patel                  2014-10-29 15:33:30 -0700 4985) 			ret = -ENOMEM;
be2ca2761e376 (Dhaval Patel                  2014-10-29 15:33:30 -0700 4986) 			goto err;
be2ca2761e376 (Dhaval Patel                  2014-10-29 15:33:30 -0700 4987) 		}
be2ca2761e376 (Dhaval Patel                  2014-10-29 15:33:30 -0700 4988) 
be2ca2761e376 (Dhaval Patel                  2014-10-29 15:33:30 -0700 4989) 		ret = copy_from_user(layer_list, input_layer_list, buffer_size);
be2ca2761e376 (Dhaval Patel                  2014-10-29 15:33:30 -0700 4990) 		if (ret) {
be2ca2761e376 (Dhaval Patel                  2014-10-29 15:33:30 -0700 4991) 			pr_err("layer list copy from user failed\n");
be2ca2761e376 (Dhaval Patel                  2014-10-29 15:33:30 -0700 4992) 			goto err;
be2ca2761e376 (Dhaval Patel                  2014-10-29 15:33:30 -0700 4993) 		}
be2ca2761e376 (Dhaval Patel                  2014-10-29 15:33:30 -0700 4994) 
be2ca2761e376 (Dhaval Patel                  2014-10-29 15:33:30 -0700 4995) 		commit.commit_v1.input_layers = layer_list;
be2ca2761e376 (Dhaval Patel                  2014-10-29 15:33:30 -0700 4996) 
be2ca2761e376 (Dhaval Patel                  2014-10-29 15:33:30 -0700 4997) 		for (i = 0; i < layer_count; i++) {
be2ca2761e376 (Dhaval Patel                  2014-10-29 15:33:30 -0700 4998) 			layer = &layer_list[i];
be2ca2761e376 (Dhaval Patel                  2014-10-29 15:33:30 -0700 4999) 
f423ac1538f96 (Benet Clark                   2015-02-05 19:01:14 -0800 5000) 			if (!(layer->flags & MDP_LAYER_PP)) {
f423ac1538f96 (Benet Clark                   2015-02-05 19:01:14 -0800 5001) 				layer->pp_info = NULL;
f423ac1538f96 (Benet Clark                   2015-02-05 19:01:14 -0800 5002) 			} else {
f423ac1538f96 (Benet Clark                   2015-02-05 19:01:14 -0800 5003) 				ret = mdss_mdp_copy_layer_pp_info(layer);
f423ac1538f96 (Benet Clark                   2015-02-05 19:01:14 -0800 5004) 				if (ret) {
f423ac1538f96 (Benet Clark                   2015-02-05 19:01:14 -0800 5005) 					pr_err("failure to copy pp_info data for layer %d, ret = %d\n",
f423ac1538f96 (Benet Clark                   2015-02-05 19:01:14 -0800 5006) 						i, ret);
f423ac1538f96 (Benet Clark                   2015-02-05 19:01:14 -0800 5007) 					goto err;
f423ac1538f96 (Benet Clark                   2015-02-05 19:01:14 -0800 5008) 				}
f423ac1538f96 (Benet Clark                   2015-02-05 19:01:14 -0800 5009) 			}
f423ac1538f96 (Benet Clark                   2015-02-05 19:01:14 -0800 5010) 
925804a8f8829 (Gopikrishnaiah Anandan        2016-02-12 16:50:02 -0800 5011) 			if ((layer->flags & MDP_LAYER_ENABLE_PIXEL_EXT) ||
925804a8f8829 (Gopikrishnaiah Anandan        2016-02-12 16:50:02 -0800 5012) 				(layer->flags &
925804a8f8829 (Gopikrishnaiah Anandan        2016-02-12 16:50:02 -0800 5013) 				 MDP_LAYER_ENABLE_QSEED3_SCALE)) {
925804a8f8829 (Gopikrishnaiah Anandan        2016-02-12 16:50:02 -0800 5014) 				ret = __mdss_fb_scaler_handler(layer);
925804a8f8829 (Gopikrishnaiah Anandan        2016-02-12 16:50:02 -0800 5015) 				if (ret) {
925804a8f8829 (Gopikrishnaiah Anandan        2016-02-12 16:50:02 -0800 5016) 					pr_err("failure to copy scale params for layer %d, ret = %d\n",
925804a8f8829 (Gopikrishnaiah Anandan        2016-02-12 16:50:02 -0800 5017) 						i, ret);
925804a8f8829 (Gopikrishnaiah Anandan        2016-02-12 16:50:02 -0800 5018) 					goto err;
925804a8f8829 (Gopikrishnaiah Anandan        2016-02-12 16:50:02 -0800 5019) 				}
925804a8f8829 (Gopikrishnaiah Anandan        2016-02-12 16:50:02 -0800 5020) 			} else {
be2ca2761e376 (Dhaval Patel                  2014-10-29 15:33:30 -0700 5021) 				layer->scale = NULL;
be2ca2761e376 (Dhaval Patel                  2014-10-29 15:33:30 -0700 5022) 			}
be2ca2761e376 (Dhaval Patel                  2014-10-29 15:33:30 -0700 5023) 		}
be2ca2761e376 (Dhaval Patel                  2014-10-29 15:33:30 -0700 5024) 	}
be2ca2761e376 (Dhaval Patel                  2014-10-29 15:33:30 -0700 5025) 
687db9c75e3ca (Naseer Ahmed                  2016-04-05 15:19:25 -0400 5026) 	ds_data_user = commit.commit_v1.dest_scaler;
5f47a7839972f (Abhijit Kulkarni              2016-06-09 09:03:43 -0700 5027) 	if ((ds_data_user) &&
5f47a7839972f (Abhijit Kulkarni              2016-06-09 09:03:43 -0700 5028) 		(commit.commit_v1.dest_scaler_cnt)) {
687db9c75e3ca (Naseer Ahmed                  2016-04-05 15:19:25 -0400 5029) 		ret = __mdss_fb_copy_destscaler_data(info, &commit);
687db9c75e3ca (Naseer Ahmed                  2016-04-05 15:19:25 -0400 5030) 		if (ret) {
687db9c75e3ca (Naseer Ahmed                  2016-04-05 15:19:25 -0400 5031) 			pr_err("copy dest scaler failed\n");
687db9c75e3ca (Naseer Ahmed                  2016-04-05 15:19:25 -0400 5032) 			goto err;
687db9c75e3ca (Naseer Ahmed                  2016-04-05 15:19:25 -0400 5033) 		}
687db9c75e3ca (Naseer Ahmed                  2016-04-05 15:19:25 -0400 5034) 		ds_data = commit.commit_v1.dest_scaler;
687db9c75e3ca (Naseer Ahmed                  2016-04-05 15:19:25 -0400 5035) 	}
687db9c75e3ca (Naseer Ahmed                  2016-04-05 15:19:25 -0400 5036) 
62be9c73b908d (Veera Sundaram Sankaran       2016-01-15 12:06:05 -0800 5037) 	ATRACE_BEGIN("ATOMIC_COMMIT");
75af757c1b7ba (Dhaval Patel                  2015-11-04 14:01:09 -0800 5038) 	ret = mdss_fb_atomic_commit(info, &commit, file);
be2ca2761e376 (Dhaval Patel                  2014-10-29 15:33:30 -0700 5039) 	if (ret)
be2ca2761e376 (Dhaval Patel                  2014-10-29 15:33:30 -0700 5040) 		pr_err("atomic commit failed ret:%d\n", ret);
62be9c73b908d (Veera Sundaram Sankaran       2016-01-15 12:06:05 -0800 5041) 	ATRACE_END("ATOMIC_COMMIT");
be2ca2761e376 (Dhaval Patel                  2014-10-29 15:33:30 -0700 5042) 
be2ca2761e376 (Dhaval Patel                  2014-10-29 15:33:30 -0700 5043) 	if (layer_count) {
cde1a1f673668 (Benet Clark                   2015-06-04 18:25:09 -0700 5044) 		for (j = 0; j < layer_count; j++) {
2a6a83e5be6bb (Jeevan Shriram                2015-08-06 16:06:13 -0700 5045) 			rc = copy_to_user(&input_layer_list[j].error_code,
2a6a83e5be6bb (Jeevan Shriram                2015-08-06 16:06:13 -0700 5046) 					&layer_list[j].error_code, sizeof(int));
cde1a1f673668 (Benet Clark                   2015-06-04 18:25:09 -0700 5047) 			if (rc)
cde1a1f673668 (Benet Clark                   2015-06-04 18:25:09 -0700 5048) 				pr_err("layer error code copy to user failed\n");
cde1a1f673668 (Benet Clark                   2015-06-04 18:25:09 -0700 5049) 		}
be2ca2761e376 (Dhaval Patel                  2014-10-29 15:33:30 -0700 5050) 
be2ca2761e376 (Dhaval Patel                  2014-10-29 15:33:30 -0700 5051) 		commit.commit_v1.input_layers = input_layer_list;
b12430afd8960 (Xiaoming Zhou                 2015-01-27 11:59:43 -0500 5052) 		commit.commit_v1.output_layer = output_layer_user;
687db9c75e3ca (Naseer Ahmed                  2016-04-05 15:19:25 -0400 5053) 		commit.commit_v1.dest_scaler  = ds_data_user;
be2ca2761e376 (Dhaval Patel                  2014-10-29 15:33:30 -0700 5054) 		rc = copy_to_user(argp, &commit,
be2ca2761e376 (Dhaval Patel                  2014-10-29 15:33:30 -0700 5055) 			sizeof(struct mdp_layer_commit));
e02de095f4c7c (Jeykumar Sankaran             2016-02-29 14:47:10 -0800 5056) 		if (rc) {
be2ca2761e376 (Dhaval Patel                  2014-10-29 15:33:30 -0700 5057) 			pr_err("copy to user for release & retire fence failed\n");
e02de095f4c7c (Jeykumar Sankaran             2016-02-29 14:47:10 -0800 5058) 			goto err;
e02de095f4c7c (Jeykumar Sankaran             2016-02-29 14:47:10 -0800 5059) 		}
e02de095f4c7c (Jeykumar Sankaran             2016-02-29 14:47:10 -0800 5060) 	}
e02de095f4c7c (Jeykumar Sankaran             2016-02-29 14:47:10 -0800 5061) 
e02de095f4c7c (Jeykumar Sankaran             2016-02-29 14:47:10 -0800 5062) 	if (output_layer_user) {
e02de095f4c7c (Jeykumar Sankaran             2016-02-29 14:47:10 -0800 5063) 		rc = copy_to_user(&output_layer_user->buffer.fence,
e02de095f4c7c (Jeykumar Sankaran             2016-02-29 14:47:10 -0800 5064) 			&output_layer->buffer.fence,
e02de095f4c7c (Jeykumar Sankaran             2016-02-29 14:47:10 -0800 5065) 			sizeof(int));
e02de095f4c7c (Jeykumar Sankaran             2016-02-29 14:47:10 -0800 5066) 
e02de095f4c7c (Jeykumar Sankaran             2016-02-29 14:47:10 -0800 5067) 		if (rc)
e02de095f4c7c (Jeykumar Sankaran             2016-02-29 14:47:10 -0800 5068) 			pr_err("copy to user for output fence failed");
be2ca2761e376 (Dhaval Patel                  2014-10-29 15:33:30 -0700 5069) 	}
be2ca2761e376 (Dhaval Patel                  2014-10-29 15:33:30 -0700 5070) 
be2ca2761e376 (Dhaval Patel                  2014-10-29 15:33:30 -0700 5071) err:
f423ac1538f96 (Benet Clark                   2015-02-05 19:01:14 -0800 5072) 	for (i--; i >= 0; i--) {
be2ca2761e376 (Dhaval Patel                  2014-10-29 15:33:30 -0700 5073) 		kfree(layer_list[i].scale);
e7bfd98d5e55b (Benet Clark                   2015-10-01 17:32:46 -0700 5074) 		layer_list[i].scale = NULL;
f423ac1538f96 (Benet Clark                   2015-02-05 19:01:14 -0800 5075) 		mdss_mdp_free_layer_pp_info(&layer_list[i]);
f423ac1538f96 (Benet Clark                   2015-02-05 19:01:14 -0800 5076) 	}
be2ca2761e376 (Dhaval Patel                  2014-10-29 15:33:30 -0700 5077) 	kfree(layer_list);
b12430afd8960 (Xiaoming Zhou                 2015-01-27 11:59:43 -0500 5078) 	kfree(output_layer);
687db9c75e3ca (Naseer Ahmed                  2016-04-05 15:19:25 -0400 5079) 	if (ds_data) {
687db9c75e3ca (Naseer Ahmed                  2016-04-05 15:19:25 -0400 5080) 		for (i = 0; i < commit.commit_v1.dest_scaler_cnt; i++)
687db9c75e3ca (Naseer Ahmed                  2016-04-05 15:19:25 -0400 5081) 			kfree(to_user_ptr(ds_data[i].scale));
687db9c75e3ca (Naseer Ahmed                  2016-04-05 15:19:25 -0400 5082) 		kfree(ds_data);
687db9c75e3ca (Naseer Ahmed                  2016-04-05 15:19:25 -0400 5083) 	}
07930a15004de (Terence Hampson               2015-01-21 13:36:24 -0500 5084) 
07930a15004de (Terence Hampson               2015-01-21 13:36:24 -0500 5085) 	return ret;
07930a15004de (Terence Hampson               2015-01-21 13:36:24 -0500 5086) }
07930a15004de (Terence Hampson               2015-01-21 13:36:24 -0500 5087) 
07930a15004de (Terence Hampson               2015-01-21 13:36:24 -0500 5088) int mdss_fb_switch_check(struct msm_fb_data_type *mfd, u32 mode)
07930a15004de (Terence Hampson               2015-01-21 13:36:24 -0500 5089) {
07930a15004de (Terence Hampson               2015-01-21 13:36:24 -0500 5090) 	struct mdss_panel_info *pinfo = NULL;
07930a15004de (Terence Hampson               2015-01-21 13:36:24 -0500 5091) 	int panel_type;
07930a15004de (Terence Hampson               2015-01-21 13:36:24 -0500 5092) 
07930a15004de (Terence Hampson               2015-01-21 13:36:24 -0500 5093) 	if (!mfd || !mfd->panel_info)
07930a15004de (Terence Hampson               2015-01-21 13:36:24 -0500 5094) 		return -EINVAL;
07930a15004de (Terence Hampson               2015-01-21 13:36:24 -0500 5095) 
07930a15004de (Terence Hampson               2015-01-21 13:36:24 -0500 5096) 	pinfo = mfd->panel_info;
07930a15004de (Terence Hampson               2015-01-21 13:36:24 -0500 5097) 
07930a15004de (Terence Hampson               2015-01-21 13:36:24 -0500 5098) 	if ((!mfd->op_enable) || (mdss_fb_is_power_off(mfd)))
07930a15004de (Terence Hampson               2015-01-21 13:36:24 -0500 5099) 		return -EPERM;
07930a15004de (Terence Hampson               2015-01-21 13:36:24 -0500 5100) 
07930a15004de (Terence Hampson               2015-01-21 13:36:24 -0500 5101) 	if (pinfo->mipi.dms_mode != DYNAMIC_MODE_SWITCH_IMMEDIATE) {
07930a15004de (Terence Hampson               2015-01-21 13:36:24 -0500 5102) 		pr_warn("Panel does not support immediate dynamic switch!\n");
07930a15004de (Terence Hampson               2015-01-21 13:36:24 -0500 5103) 		return -EPERM;
07930a15004de (Terence Hampson               2015-01-21 13:36:24 -0500 5104) 	}
07930a15004de (Terence Hampson               2015-01-21 13:36:24 -0500 5105) 
07930a15004de (Terence Hampson               2015-01-21 13:36:24 -0500 5106) 	if (mfd->dcm_state != DCM_UNINIT) {
07930a15004de (Terence Hampson               2015-01-21 13:36:24 -0500 5107) 		pr_warn("Switch not supported during DCM!\n");
07930a15004de (Terence Hampson               2015-01-21 13:36:24 -0500 5108) 		return -EPERM;
07930a15004de (Terence Hampson               2015-01-21 13:36:24 -0500 5109) 	}
07930a15004de (Terence Hampson               2015-01-21 13:36:24 -0500 5110) 
07930a15004de (Terence Hampson               2015-01-21 13:36:24 -0500 5111) 	mutex_lock(&mfd->switch_lock);
07930a15004de (Terence Hampson               2015-01-21 13:36:24 -0500 5112) 	if (mode == pinfo->type) {
07930a15004de (Terence Hampson               2015-01-21 13:36:24 -0500 5113) 		pr_debug("Already in requested mode!\n");
07930a15004de (Terence Hampson               2015-01-21 13:36:24 -0500 5114) 		mutex_unlock(&mfd->switch_lock);
07930a15004de (Terence Hampson               2015-01-21 13:36:24 -0500 5115) 		return -EPERM;
07930a15004de (Terence Hampson               2015-01-21 13:36:24 -0500 5116) 	}
07930a15004de (Terence Hampson               2015-01-21 13:36:24 -0500 5117) 	mutex_unlock(&mfd->switch_lock);
07930a15004de (Terence Hampson               2015-01-21 13:36:24 -0500 5118) 
07930a15004de (Terence Hampson               2015-01-21 13:36:24 -0500 5119) 	panel_type = mfd->panel.type;
07930a15004de (Terence Hampson               2015-01-21 13:36:24 -0500 5120) 	if (panel_type != MIPI_VIDEO_PANEL && panel_type != MIPI_CMD_PANEL) {
07930a15004de (Terence Hampson               2015-01-21 13:36:24 -0500 5121) 		pr_debug("Panel not in mipi video or cmd mode, cannot change\n");
07930a15004de (Terence Hampson               2015-01-21 13:36:24 -0500 5122) 		return -EPERM;
07930a15004de (Terence Hampson               2015-01-21 13:36:24 -0500 5123) 	}
07930a15004de (Terence Hampson               2015-01-21 13:36:24 -0500 5124) 
07930a15004de (Terence Hampson               2015-01-21 13:36:24 -0500 5125) 	return 0;
07930a15004de (Terence Hampson               2015-01-21 13:36:24 -0500 5126) }
07930a15004de (Terence Hampson               2015-01-21 13:36:24 -0500 5127) 
07930a15004de (Terence Hampson               2015-01-21 13:36:24 -0500 5128) static int mdss_fb_immediate_mode_switch(struct msm_fb_data_type *mfd, u32 mode)
07930a15004de (Terence Hampson               2015-01-21 13:36:24 -0500 5129) {
07930a15004de (Terence Hampson               2015-01-21 13:36:24 -0500 5130) 	int ret;
07930a15004de (Terence Hampson               2015-01-21 13:36:24 -0500 5131) 	u32 tranlated_mode;
07930a15004de (Terence Hampson               2015-01-21 13:36:24 -0500 5132) 
07930a15004de (Terence Hampson               2015-01-21 13:36:24 -0500 5133) 	if (mode)
07930a15004de (Terence Hampson               2015-01-21 13:36:24 -0500 5134) 		tranlated_mode = MIPI_CMD_PANEL;
07930a15004de (Terence Hampson               2015-01-21 13:36:24 -0500 5135) 	else
07930a15004de (Terence Hampson               2015-01-21 13:36:24 -0500 5136) 		tranlated_mode = MIPI_VIDEO_PANEL;
07930a15004de (Terence Hampson               2015-01-21 13:36:24 -0500 5137) 
07930a15004de (Terence Hampson               2015-01-21 13:36:24 -0500 5138) 	pr_debug("%s: Request to switch to %d,", __func__, tranlated_mode);
07930a15004de (Terence Hampson               2015-01-21 13:36:24 -0500 5139) 
07930a15004de (Terence Hampson               2015-01-21 13:36:24 -0500 5140) 	ret = mdss_fb_switch_check(mfd, tranlated_mode);
07930a15004de (Terence Hampson               2015-01-21 13:36:24 -0500 5141) 	if (ret)
07930a15004de (Terence Hampson               2015-01-21 13:36:24 -0500 5142) 		return ret;
07930a15004de (Terence Hampson               2015-01-21 13:36:24 -0500 5143) 
07930a15004de (Terence Hampson               2015-01-21 13:36:24 -0500 5144) 	mutex_lock(&mfd->switch_lock);
07930a15004de (Terence Hampson               2015-01-21 13:36:24 -0500 5145) 	if (mfd->switch_state != MDSS_MDP_NO_UPDATE_REQUESTED) {
07930a15004de (Terence Hampson               2015-01-21 13:36:24 -0500 5146) 		pr_err("%s: Mode switch already in progress\n", __func__);
07930a15004de (Terence Hampson               2015-01-21 13:36:24 -0500 5147) 		ret = -EAGAIN;
07930a15004de (Terence Hampson               2015-01-21 13:36:24 -0500 5148) 		goto exit;
07930a15004de (Terence Hampson               2015-01-21 13:36:24 -0500 5149) 	}
df73dce85c64f (Veera Sundaram Sankaran       2016-04-15 11:57:24 -0700 5150) 	mfd->switch_state = MDSS_MDP_WAIT_FOR_VALIDATE;
07930a15004de (Terence Hampson               2015-01-21 13:36:24 -0500 5151) 	mfd->switch_new_mode = tranlated_mode;
07930a15004de (Terence Hampson               2015-01-21 13:36:24 -0500 5152) 
07930a15004de (Terence Hampson               2015-01-21 13:36:24 -0500 5153) exit:
07930a15004de (Terence Hampson               2015-01-21 13:36:24 -0500 5154) 	mutex_unlock(&mfd->switch_lock);
07930a15004de (Terence Hampson               2015-01-21 13:36:24 -0500 5155) 	return ret;
07930a15004de (Terence Hampson               2015-01-21 13:36:24 -0500 5156) }
07930a15004de (Terence Hampson               2015-01-21 13:36:24 -0500 5157) 
07930a15004de (Terence Hampson               2015-01-21 13:36:24 -0500 5158) /*
07930a15004de (Terence Hampson               2015-01-21 13:36:24 -0500 5159)  * mdss_fb_mode_switch() - Function to change DSI mode
07930a15004de (Terence Hampson               2015-01-21 13:36:24 -0500 5160)  * @mfd:	Framebuffer data structure for display
07930a15004de (Terence Hampson               2015-01-21 13:36:24 -0500 5161)  * @mode:	Enabled/Disable LowPowerMode
07930a15004de (Terence Hampson               2015-01-21 13:36:24 -0500 5162)  *		1: Switch to Command Mode
07930a15004de (Terence Hampson               2015-01-21 13:36:24 -0500 5163)  *		0: Switch to video Mode
07930a15004de (Terence Hampson               2015-01-21 13:36:24 -0500 5164)  *
07930a15004de (Terence Hampson               2015-01-21 13:36:24 -0500 5165)  * This function is used to change from DSI mode based on the
07930a15004de (Terence Hampson               2015-01-21 13:36:24 -0500 5166)  * argument @mode on the next frame to be displayed.
07930a15004de (Terence Hampson               2015-01-21 13:36:24 -0500 5167)  */
07930a15004de (Terence Hampson               2015-01-21 13:36:24 -0500 5168) static int mdss_fb_mode_switch(struct msm_fb_data_type *mfd, u32 mode)
07930a15004de (Terence Hampson               2015-01-21 13:36:24 -0500 5169) {
07930a15004de (Terence Hampson               2015-01-21 13:36:24 -0500 5170) 	struct mdss_panel_info *pinfo = NULL;
07930a15004de (Terence Hampson               2015-01-21 13:36:24 -0500 5171) 	int ret = 0;
07930a15004de (Terence Hampson               2015-01-21 13:36:24 -0500 5172) 
07930a15004de (Terence Hampson               2015-01-21 13:36:24 -0500 5173) 	if (!mfd || !mfd->panel_info)
07930a15004de (Terence Hampson               2015-01-21 13:36:24 -0500 5174) 		return -EINVAL;
07930a15004de (Terence Hampson               2015-01-21 13:36:24 -0500 5175) 
fdc9315942182 (Veera Sundaram Sankaran       2016-09-12 11:10:30 -0700 5176) 	/* make sure that we are idle while switching */
fdc9315942182 (Veera Sundaram Sankaran       2016-09-12 11:10:30 -0700 5177) 	mdss_fb_wait_for_kickoff(mfd);
fdc9315942182 (Veera Sundaram Sankaran       2016-09-12 11:10:30 -0700 5178) 
07930a15004de (Terence Hampson               2015-01-21 13:36:24 -0500 5179) 	pinfo = mfd->panel_info;
07930a15004de (Terence Hampson               2015-01-21 13:36:24 -0500 5180) 	if (pinfo->mipi.dms_mode == DYNAMIC_MODE_SWITCH_SUSPEND_RESUME) {
07930a15004de (Terence Hampson               2015-01-21 13:36:24 -0500 5181) 		ret = mdss_fb_blanking_mode_switch(mfd, mode);
07930a15004de (Terence Hampson               2015-01-21 13:36:24 -0500 5182) 	} else if (pinfo->mipi.dms_mode == DYNAMIC_MODE_SWITCH_IMMEDIATE) {
07930a15004de (Terence Hampson               2015-01-21 13:36:24 -0500 5183) 		ret = mdss_fb_immediate_mode_switch(mfd, mode);
07930a15004de (Terence Hampson               2015-01-21 13:36:24 -0500 5184) 	} else {
07930a15004de (Terence Hampson               2015-01-21 13:36:24 -0500 5185) 		pr_warn("Panel does not support dynamic mode switch!\n");
07930a15004de (Terence Hampson               2015-01-21 13:36:24 -0500 5186) 		ret = -EPERM;
07930a15004de (Terence Hampson               2015-01-21 13:36:24 -0500 5187) 	}
07930a15004de (Terence Hampson               2015-01-21 13:36:24 -0500 5188) 
be2ca2761e376 (Dhaval Patel                  2014-10-29 15:33:30 -0700 5189) 	return ret;
be2ca2761e376 (Dhaval Patel                  2014-10-29 15:33:30 -0700 5190) }
be2ca2761e376 (Dhaval Patel                  2014-10-29 15:33:30 -0700 5191) 
206478bf63dde (Ken Zhang                     2014-04-13 18:28:20 -0400 5192) static int __ioctl_wait_idle(struct msm_fb_data_type *mfd, u32 cmd)
206478bf63dde (Ken Zhang                     2014-04-13 18:28:20 -0400 5193) {
206478bf63dde (Ken Zhang                     2014-04-13 18:28:20 -0400 5194) 	int ret = 0;
206478bf63dde (Ken Zhang                     2014-04-13 18:28:20 -0400 5195) 
206478bf63dde (Ken Zhang                     2014-04-13 18:28:20 -0400 5196) 	if (mfd->wait_for_kickoff &&
206478bf63dde (Ken Zhang                     2014-04-13 18:28:20 -0400 5197) 		((cmd == MSMFB_OVERLAY_PREPARE) ||
206478bf63dde (Ken Zhang                     2014-04-13 18:28:20 -0400 5198) 		(cmd == MSMFB_BUFFER_SYNC) ||
475788307f7af (Adrian Salido-Moreno          2014-07-20 16:56:03 -0700 5199) 		(cmd == MSMFB_OVERLAY_PLAY) ||
ec20c566ee2ed (Veera Sundaram Sankaran       2015-05-29 15:41:04 -0700 5200) 		(cmd == MSMFB_CURSOR) ||
ec20c566ee2ed (Veera Sundaram Sankaran       2015-05-29 15:41:04 -0700 5201) 		(cmd == MSMFB_METADATA_GET) ||
ec20c566ee2ed (Veera Sundaram Sankaran       2015-05-29 15:41:04 -0700 5202) 		(cmd == MSMFB_METADATA_SET) ||
ec20c566ee2ed (Veera Sundaram Sankaran       2015-05-29 15:41:04 -0700 5203) 		(cmd == MSMFB_OVERLAY_GET) ||
475788307f7af (Adrian Salido-Moreno          2014-07-20 16:56:03 -0700 5204) 		(cmd == MSMFB_OVERLAY_UNSET) ||
206478bf63dde (Ken Zhang                     2014-04-13 18:28:20 -0400 5205) 		(cmd == MSMFB_OVERLAY_SET))) {
206478bf63dde (Ken Zhang                     2014-04-13 18:28:20 -0400 5206) 		ret = mdss_fb_wait_for_kickoff(mfd);
206478bf63dde (Ken Zhang                     2014-04-13 18:28:20 -0400 5207) 	}
206478bf63dde (Ken Zhang                     2014-04-13 18:28:20 -0400 5208) 
26bebe99120eb (Ujwal Patel                   2015-04-22 14:51:12 -0700 5209) 	if (ret && (ret != -ESHUTDOWN))
26bebe99120eb (Ujwal Patel                   2015-04-22 14:51:12 -0700 5210) 		pr_err("wait_idle failed. cmd=0x%x rc=%d\n", cmd, ret);
26bebe99120eb (Ujwal Patel                   2015-04-22 14:51:12 -0700 5211) 
206478bf63dde (Ken Zhang                     2014-04-13 18:28:20 -0400 5212) 	return ret;
206478bf63dde (Ken Zhang                     2014-04-13 18:28:20 -0400 5213) }
206478bf63dde (Ken Zhang                     2014-04-13 18:28:20 -0400 5214) 
151c1e441a98c (Krishna Manikandan            2017-06-21 10:21:05 +0530 5215) static bool check_not_supported_ioctl(u32 cmd)
151c1e441a98c (Krishna Manikandan            2017-06-21 10:21:05 +0530 5216) {
151c1e441a98c (Krishna Manikandan            2017-06-21 10:21:05 +0530 5217) 	return((cmd == MSMFB_OVERLAY_SET) || (cmd == MSMFB_OVERLAY_UNSET) ||
151c1e441a98c (Krishna Manikandan            2017-06-21 10:21:05 +0530 5218) 		(cmd == MSMFB_OVERLAY_GET) || (cmd == MSMFB_OVERLAY_PREPARE) ||
151c1e441a98c (Krishna Manikandan            2017-06-21 10:21:05 +0530 5219) 		(cmd == MSMFB_DISPLAY_COMMIT) || (cmd == MSMFB_OVERLAY_PLAY) ||
151c1e441a98c (Krishna Manikandan            2017-06-21 10:21:05 +0530 5220) 		(cmd == MSMFB_BUFFER_SYNC) || (cmd == MSMFB_OVERLAY_QUEUE) ||
151c1e441a98c (Krishna Manikandan            2017-06-21 10:21:05 +0530 5221) 		(cmd == MSMFB_NOTIFY_UPDATE));
151c1e441a98c (Krishna Manikandan            2017-06-21 10:21:05 +0530 5222) }
151c1e441a98c (Krishna Manikandan            2017-06-21 10:21:05 +0530 5223) 
79d7171431e1e (Manoj Rao                     2013-11-27 18:52:59 -0800 5224) /*
79d7171431e1e (Manoj Rao                     2013-11-27 18:52:59 -0800 5225)  * mdss_fb_do_ioctl() - MDSS Framebuffer ioctl function
79d7171431e1e (Manoj Rao                     2013-11-27 18:52:59 -0800 5226)  * @info:	pointer to framebuffer info
79d7171431e1e (Manoj Rao                     2013-11-27 18:52:59 -0800 5227)  * @cmd:	ioctl command
79d7171431e1e (Manoj Rao                     2013-11-27 18:52:59 -0800 5228)  * @arg:	argument to ioctl
79d7171431e1e (Manoj Rao                     2013-11-27 18:52:59 -0800 5229)  *
79d7171431e1e (Manoj Rao                     2013-11-27 18:52:59 -0800 5230)  * This function provides an architecture agnostic implementation
79d7171431e1e (Manoj Rao                     2013-11-27 18:52:59 -0800 5231)  * of the mdss framebuffer ioctl. This function can be called
79d7171431e1e (Manoj Rao                     2013-11-27 18:52:59 -0800 5232)  * by compat ioctl or regular ioctl to handle the supported commands.
79d7171431e1e (Manoj Rao                     2013-11-27 18:52:59 -0800 5233)  */
79d7171431e1e (Manoj Rao                     2013-11-27 18:52:59 -0800 5234) int mdss_fb_do_ioctl(struct fb_info *info, unsigned int cmd,
75af757c1b7ba (Dhaval Patel                  2015-11-04 14:01:09 -0800 5235) 			 unsigned long arg, struct file *file)
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 5236) {
4500a5bec2018 (Sree Sesha Aravind Vadrevu    2013-05-03 15:16:45 -0700 5237) 	struct msm_fb_data_type *mfd;
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 5238) 	void __user *argp = (void __user *)arg;
34d63c7275e92 (Adrian Salido-Moreno          2012-05-29 17:32:43 -0700 5239) 	int ret = -ENOSYS;
9bc30b3c612e8 (Ken Zhang                     2012-11-07 18:33:16 -0500 5240) 	struct mdp_buf_sync buf_sync;
41211cdb1fff1 (Sandeep Panda                 2014-04-09 17:15:37 +0530 5241) 	unsigned int dsi_mode = 0;
76c82ae2a89e1 (Sandeep Panda                 2014-07-18 10:51:40 +0530 5242) 	struct mdss_panel_data *pdata = NULL;
5570af793af75 (Ujwal Patel                   2014-03-31 17:18:32 -0700 5243) 
4500a5bec2018 (Sree Sesha Aravind Vadrevu    2013-05-03 15:16:45 -0700 5244) 	if (!info || !info->par)
4500a5bec2018 (Sree Sesha Aravind Vadrevu    2013-05-03 15:16:45 -0700 5245) 		return -EINVAL;
5570af793af75 (Ujwal Patel                   2014-03-31 17:18:32 -0700 5246) 
4500a5bec2018 (Sree Sesha Aravind Vadrevu    2013-05-03 15:16:45 -0700 5247) 	mfd = (struct msm_fb_data_type *)info->par;
5570af793af75 (Ujwal Patel                   2014-03-31 17:18:32 -0700 5248) 	if (!mfd)
5570af793af75 (Ujwal Patel                   2014-03-31 17:18:32 -0700 5249) 		return -EINVAL;
5570af793af75 (Ujwal Patel                   2014-03-31 17:18:32 -0700 5250) 
5570af793af75 (Ujwal Patel                   2014-03-31 17:18:32 -0700 5251) 	if (mfd->shutdown_pending)
af6c0571c981a (Gopikrishnaiah Anandan        2015-02-17 20:59:43 -0800 5252) 		return -ESHUTDOWN;
5570af793af75 (Ujwal Patel                   2014-03-31 17:18:32 -0700 5253) 
76c82ae2a89e1 (Sandeep Panda                 2014-07-18 10:51:40 +0530 5254) 	pdata = dev_get_platdata(&mfd->pdev->dev);
76c82ae2a89e1 (Sandeep Panda                 2014-07-18 10:51:40 +0530 5255) 	if (!pdata || pdata->panel_info.dynamic_switch_pending)
76c82ae2a89e1 (Sandeep Panda                 2014-07-18 10:51:40 +0530 5256) 		return -EPERM;
76c82ae2a89e1 (Sandeep Panda                 2014-07-18 10:51:40 +0530 5257) 
151c1e441a98c (Krishna Manikandan            2017-06-21 10:21:05 +0530 5258) 	if (check_not_supported_ioctl(cmd)) {
151c1e441a98c (Krishna Manikandan            2017-06-21 10:21:05 +0530 5259) 		pr_err("Unsupported ioctl\n");
151c1e441a98c (Krishna Manikandan            2017-06-21 10:21:05 +0530 5260) 		return -EINVAL;
151c1e441a98c (Krishna Manikandan            2017-06-21 10:21:05 +0530 5261) 	}
151c1e441a98c (Krishna Manikandan            2017-06-21 10:21:05 +0530 5262) 
5570af793af75 (Ujwal Patel                   2014-03-31 17:18:32 -0700 5263) 	atomic_inc(&mfd->ioctl_ref_cnt);
5570af793af75 (Ujwal Patel                   2014-03-31 17:18:32 -0700 5264) 
2747a8445ca2d (Ken Zhang                     2012-12-21 23:12:05 -0500 5265) 	mdss_fb_power_setting_idle(mfd);
5570af793af75 (Ujwal Patel                   2014-03-31 17:18:32 -0700 5266) 
206478bf63dde (Ken Zhang                     2014-04-13 18:28:20 -0400 5267) 	ret = __ioctl_wait_idle(mfd, cmd);
206478bf63dde (Ken Zhang                     2014-04-13 18:28:20 -0400 5268) 	if (ret)
206478bf63dde (Ken Zhang                     2014-04-13 18:28:20 -0400 5269) 		goto exit;
2747a8445ca2d (Ken Zhang                     2012-12-21 23:12:05 -0500 5270) 
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 5271) 	switch (cmd) {
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 5272) 	case MSMFB_CURSOR:
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 5273) 		ret = mdss_fb_cursor(info, argp);
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 5274) 		break;
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 5275) 
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 5276) 	case MSMFB_SET_LUT:
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 5277) 		ret = mdss_fb_set_lut(info, argp);
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 5278) 		break;
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 5279) 
9bc30b3c612e8 (Ken Zhang                     2012-11-07 18:33:16 -0500 5280) 	case MSMFB_BUFFER_SYNC:
9bc30b3c612e8 (Ken Zhang                     2012-11-07 18:33:16 -0500 5281) 		ret = copy_from_user(&buf_sync, argp, sizeof(buf_sync));
9bc30b3c612e8 (Ken Zhang                     2012-11-07 18:33:16 -0500 5282) 		if (ret)
5570af793af75 (Ujwal Patel                   2014-03-31 17:18:32 -0700 5283) 			goto exit;
5570af793af75 (Ujwal Patel                   2014-03-31 17:18:32 -0700 5284) 
866cf4aab970f (Ujwal Patel                   2016-01-11 17:35:42 -0800 5285) 		if ((!mfd->op_enable) || (mdss_fb_is_power_off(mfd))) {
866cf4aab970f (Ujwal Patel                   2016-01-11 17:35:42 -0800 5286) 			ret = -EPERM;
866cf4aab970f (Ujwal Patel                   2016-01-11 17:35:42 -0800 5287) 			goto exit;
514ee25d3ca52 (Adrian Salido-Moreno          2015-05-18 12:30:37 -0700 5288) 		}
21a8ee10e53eb (Jayant Shekhar                2013-08-22 12:31:56 +0530 5289) 
866cf4aab970f (Ujwal Patel                   2016-01-11 17:35:42 -0800 5290) 		ret = mdss_fb_handle_buf_sync_ioctl(&mfd->mdp_sync_pt_data,
866cf4aab970f (Ujwal Patel                   2016-01-11 17:35:42 -0800 5291) 				&buf_sync);
9bc30b3c612e8 (Ken Zhang                     2012-11-07 18:33:16 -0500 5292) 		if (!ret)
9bc30b3c612e8 (Ken Zhang                     2012-11-07 18:33:16 -0500 5293) 			ret = copy_to_user(argp, &buf_sync, sizeof(buf_sync));
9bc30b3c612e8 (Ken Zhang                     2012-11-07 18:33:16 -0500 5294) 		break;
9bc30b3c612e8 (Ken Zhang                     2012-11-07 18:33:16 -0500 5295) 
7b2726a393f13 (Carl Vanderlip                2012-08-28 12:03:28 -0700 5296) 	case MSMFB_NOTIFY_UPDATE:
7b2726a393f13 (Carl Vanderlip                2012-08-28 12:03:28 -0700 5297) 		ret = mdss_fb_notify_update(mfd, argp);
ab9f9179e2ec5 (Ken Zhang                     2012-12-02 21:15:47 -0500 5298) 		break;
ab9f9179e2ec5 (Ken Zhang                     2012-12-02 21:15:47 -0500 5299) 
ab9f9179e2ec5 (Ken Zhang                     2012-12-02 21:15:47 -0500 5300) 	case MSMFB_DISPLAY_COMMIT:
ab9f9179e2ec5 (Ken Zhang                     2012-12-02 21:15:47 -0500 5301) 		ret = mdss_fb_display_commit(info, argp);
08c4577e502f3 (Ken Zhang                     2013-01-08 14:28:20 -0500 5302) 		break;
08c4577e502f3 (Ken Zhang                     2013-01-08 14:28:20 -0500 5303) 
41211cdb1fff1 (Sandeep Panda                 2014-04-09 17:15:37 +0530 5304) 	case MSMFB_LPM_ENABLE:
41211cdb1fff1 (Sandeep Panda                 2014-04-09 17:15:37 +0530 5305) 		ret = copy_from_user(&dsi_mode, argp, sizeof(dsi_mode));
41211cdb1fff1 (Sandeep Panda                 2014-04-09 17:15:37 +0530 5306) 		if (ret) {
41211cdb1fff1 (Sandeep Panda                 2014-04-09 17:15:37 +0530 5307) 			pr_err("%s: MSMFB_LPM_ENABLE ioctl failed\n", __func__);
41211cdb1fff1 (Sandeep Panda                 2014-04-09 17:15:37 +0530 5308) 			goto exit;
41211cdb1fff1 (Sandeep Panda                 2014-04-09 17:15:37 +0530 5309) 		}
41211cdb1fff1 (Sandeep Panda                 2014-04-09 17:15:37 +0530 5310) 
07930a15004de (Terence Hampson               2015-01-21 13:36:24 -0500 5311) 		ret = mdss_fb_mode_switch(mfd, dsi_mode);
41211cdb1fff1 (Sandeep Panda                 2014-04-09 17:15:37 +0530 5312) 		break;
be2ca2761e376 (Dhaval Patel                  2014-10-29 15:33:30 -0700 5313) 	case MSMFB_ATOMIC_COMMIT:
75af757c1b7ba (Dhaval Patel                  2015-11-04 14:01:09 -0800 5314) 		ret = mdss_fb_atomic_commit_ioctl(info, argp, file);
be2ca2761e376 (Dhaval Patel                  2014-10-29 15:33:30 -0700 5315) 		break;
41211cdb1fff1 (Sandeep Panda                 2014-04-09 17:15:37 +0530 5316) 
c040ba96c0105 (Veera Sundaram Sankaran       2015-04-23 18:05:22 -0700 5317) 	case MSMFB_ASYNC_POSITION_UPDATE:
c040ba96c0105 (Veera Sundaram Sankaran       2015-04-23 18:05:22 -0700 5318) 		ret = mdss_fb_async_position_update_ioctl(info, argp);
c040ba96c0105 (Veera Sundaram Sankaran       2015-04-23 18:05:22 -0700 5319) 		break;
c040ba96c0105 (Veera Sundaram Sankaran       2015-04-23 18:05:22 -0700 5320) 
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 5321) 	default:
b192f3c2c194b (Xiaoming Zhou                 2012-12-21 21:23:15 -0500 5322) 		if (mfd->mdp.ioctl_handler)
b192f3c2c194b (Xiaoming Zhou                 2012-12-21 21:23:15 -0500 5323) 			ret = mfd->mdp.ioctl_handler(mfd, cmd, argp);
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 5324) 		break;
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 5325) 	}
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 5326) 
34d63c7275e92 (Adrian Salido-Moreno          2012-05-29 17:32:43 -0700 5327) 	if (ret == -ENOSYS)
34d63c7275e92 (Adrian Salido-Moreno          2012-05-29 17:32:43 -0700 5328) 		pr_err("unsupported ioctl (%x)\n", cmd);
34d63c7275e92 (Adrian Salido-Moreno          2012-05-29 17:32:43 -0700 5329) 
5570af793af75 (Ujwal Patel                   2014-03-31 17:18:32 -0700 5330) exit:
5570af793af75 (Ujwal Patel                   2014-03-31 17:18:32 -0700 5331) 	if (!atomic_dec_return(&mfd->ioctl_ref_cnt))
5570af793af75 (Ujwal Patel                   2014-03-31 17:18:32 -0700 5332) 		wake_up_all(&mfd->ioctl_q);
5570af793af75 (Ujwal Patel                   2014-03-31 17:18:32 -0700 5333) 
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 5334) 	return ret;
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 5335) }
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 5336) 
79d7171431e1e (Manoj Rao                     2013-11-27 18:52:59 -0800 5337) static int mdss_fb_ioctl(struct fb_info *info, unsigned int cmd,
75af757c1b7ba (Dhaval Patel                  2015-11-04 14:01:09 -0800 5338) 			 unsigned long arg, struct file *file)
79d7171431e1e (Manoj Rao                     2013-11-27 18:52:59 -0800 5339) {
79d7171431e1e (Manoj Rao                     2013-11-27 18:52:59 -0800 5340) 	if (!info || !info->par)
79d7171431e1e (Manoj Rao                     2013-11-27 18:52:59 -0800 5341) 		return -EINVAL;
79d7171431e1e (Manoj Rao                     2013-11-27 18:52:59 -0800 5342) 
75af757c1b7ba (Dhaval Patel                  2015-11-04 14:01:09 -0800 5343) 	return mdss_fb_do_ioctl(info, cmd, arg, file);
79d7171431e1e (Manoj Rao                     2013-11-27 18:52:59 -0800 5344) }
79d7171431e1e (Manoj Rao                     2013-11-27 18:52:59 -0800 5345) 
be48303843a06 (SGCMarkus                     2019-07-09 09:54:59 +0200 5346) #ifdef CONFIG_LGE_VSYNC_SKIP
be48303843a06 (SGCMarkus                     2019-07-09 09:54:59 +0200 5347) struct fb_info *msm_fb_get_pan_fb(void)
be48303843a06 (SGCMarkus                     2019-07-09 09:54:59 +0200 5348) {
be48303843a06 (SGCMarkus                     2019-07-09 09:54:59 +0200 5349) 	static int panel_before = 0;
be48303843a06 (SGCMarkus                     2019-07-09 09:54:59 +0200 5350) 	int c = 0;
be48303843a06 (SGCMarkus                     2019-07-09 09:54:59 +0200 5351) 	for (c = 0; c < fbi_list_index; ++c) {
be48303843a06 (SGCMarkus                     2019-07-09 09:54:59 +0200 5352) 		struct msm_fb_data_type *mfd;
be48303843a06 (SGCMarkus                     2019-07-09 09:54:59 +0200 5353) 		mfd = (struct msm_fb_data_type *)fbi_list[c]->par;
be48303843a06 (SGCMarkus                     2019-07-09 09:54:59 +0200 5354) 
be48303843a06 (SGCMarkus                     2019-07-09 09:54:59 +0200 5355) 		if (mfd->panel.type == MIPI_CMD_PANEL) {
be48303843a06 (SGCMarkus                     2019-07-09 09:54:59 +0200 5356) 			if (panel_before != MIPI_CMD_PANEL) {
be48303843a06 (SGCMarkus                     2019-07-09 09:54:59 +0200 5357) 				panel_before = MIPI_CMD_PANEL;
be48303843a06 (SGCMarkus                     2019-07-09 09:54:59 +0200 5358) 				return NULL;
be48303843a06 (SGCMarkus                     2019-07-09 09:54:59 +0200 5359) 			}
be48303843a06 (SGCMarkus                     2019-07-09 09:54:59 +0200 5360) 			return fbi_list[c];
be48303843a06 (SGCMarkus                     2019-07-09 09:54:59 +0200 5361) 		}
be48303843a06 (SGCMarkus                     2019-07-09 09:54:59 +0200 5362) 
be48303843a06 (SGCMarkus                     2019-07-09 09:54:59 +0200 5363) 		if (mfd->panel.type == MIPI_VIDEO_PANEL) {
be48303843a06 (SGCMarkus                     2019-07-09 09:54:59 +0200 5364) 			if (panel_before != MIPI_VIDEO_PANEL) {
be48303843a06 (SGCMarkus                     2019-07-09 09:54:59 +0200 5365) 				panel_before = MIPI_VIDEO_PANEL;
be48303843a06 (SGCMarkus                     2019-07-09 09:54:59 +0200 5366) 				return NULL;
be48303843a06 (SGCMarkus                     2019-07-09 09:54:59 +0200 5367) 			}
be48303843a06 (SGCMarkus                     2019-07-09 09:54:59 +0200 5368) 			return fbi_list[c];
be48303843a06 (SGCMarkus                     2019-07-09 09:54:59 +0200 5369) 		}
be48303843a06 (SGCMarkus                     2019-07-09 09:54:59 +0200 5370) 	}
be48303843a06 (SGCMarkus                     2019-07-09 09:54:59 +0200 5371) 	return NULL;
be48303843a06 (SGCMarkus                     2019-07-09 09:54:59 +0200 5372) }
be48303843a06 (SGCMarkus                     2019-07-09 09:54:59 +0200 5373) #endif
be48303843a06 (SGCMarkus                     2019-07-09 09:54:59 +0200 5374) 
0a547f9587bf8 (Chandan Uddaraju              2013-01-24 14:33:19 -0800 5375) static int mdss_fb_register_extra_panel(struct platform_device *pdev,
0a547f9587bf8 (Chandan Uddaraju              2013-01-24 14:33:19 -0800 5376) 	struct mdss_panel_data *pdata)
0a547f9587bf8 (Chandan Uddaraju              2013-01-24 14:33:19 -0800 5377) {
0a547f9587bf8 (Chandan Uddaraju              2013-01-24 14:33:19 -0800 5378) 	struct mdss_panel_data *fb_pdata;
0a547f9587bf8 (Chandan Uddaraju              2013-01-24 14:33:19 -0800 5379) 
0a547f9587bf8 (Chandan Uddaraju              2013-01-24 14:33:19 -0800 5380) 	fb_pdata = dev_get_platdata(&pdev->dev);
0a547f9587bf8 (Chandan Uddaraju              2013-01-24 14:33:19 -0800 5381) 	if (!fb_pdata) {
0a547f9587bf8 (Chandan Uddaraju              2013-01-24 14:33:19 -0800 5382) 		pr_err("framebuffer device %s contains invalid panel data\n",
0a547f9587bf8 (Chandan Uddaraju              2013-01-24 14:33:19 -0800 5383) 				dev_name(&pdev->dev));
0a547f9587bf8 (Chandan Uddaraju              2013-01-24 14:33:19 -0800 5384) 		return -EINVAL;
0a547f9587bf8 (Chandan Uddaraju              2013-01-24 14:33:19 -0800 5385) 	}
0a547f9587bf8 (Chandan Uddaraju              2013-01-24 14:33:19 -0800 5386) 
0a547f9587bf8 (Chandan Uddaraju              2013-01-24 14:33:19 -0800 5387) 	if (fb_pdata->next) {
0a547f9587bf8 (Chandan Uddaraju              2013-01-24 14:33:19 -0800 5388) 		pr_err("split panel already setup for framebuffer device %s\n",
0a547f9587bf8 (Chandan Uddaraju              2013-01-24 14:33:19 -0800 5389) 				dev_name(&pdev->dev));
0a547f9587bf8 (Chandan Uddaraju              2013-01-24 14:33:19 -0800 5390) 		return -EEXIST;
0a547f9587bf8 (Chandan Uddaraju              2013-01-24 14:33:19 -0800 5391) 	}
0a547f9587bf8 (Chandan Uddaraju              2013-01-24 14:33:19 -0800 5392) 
0a547f9587bf8 (Chandan Uddaraju              2013-01-24 14:33:19 -0800 5393) 	fb_pdata->next = pdata;
0a547f9587bf8 (Chandan Uddaraju              2013-01-24 14:33:19 -0800 5394) 
0a547f9587bf8 (Chandan Uddaraju              2013-01-24 14:33:19 -0800 5395) 	return 0;
0a547f9587bf8 (Chandan Uddaraju              2013-01-24 14:33:19 -0800 5396) }
0a547f9587bf8 (Chandan Uddaraju              2013-01-24 14:33:19 -0800 5397) 
2b0b211563d29 (Adrian Salido-Moreno          2012-12-04 21:05:03 -0800 5398) int mdss_register_panel(struct platform_device *pdev,
2b0b211563d29 (Adrian Salido-Moreno          2012-12-04 21:05:03 -0800 5399) 	struct mdss_panel_data *pdata)
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 5400) {
2b0b211563d29 (Adrian Salido-Moreno          2012-12-04 21:05:03 -0800 5401) 	struct platform_device *fb_pdev, *mdss_pdev;
ad8db57f799eb (Padmanabhan Komanduru         2015-05-05 22:45:30 -0700 5402) 	struct device_node *node = NULL;
2b0b211563d29 (Adrian Salido-Moreno          2012-12-04 21:05:03 -0800 5403) 	int rc = 0;
7513050611637 (Ujwal Patel                   2013-12-03 21:02:40 -0800 5404) 	bool master_panel = true;
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 5405) 
2b0b211563d29 (Adrian Salido-Moreno          2012-12-04 21:05:03 -0800 5406) 	if (!pdev || !pdev->dev.of_node) {
2b0b211563d29 (Adrian Salido-Moreno          2012-12-04 21:05:03 -0800 5407) 		pr_err("Invalid device node\n");
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 5408) 		return -ENODEV;
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 5409) 	}
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 5410) 
b192f3c2c194b (Xiaoming Zhou                 2012-12-21 21:23:15 -0500 5411) 	if (!mdp_instance) {
b192f3c2c194b (Xiaoming Zhou                 2012-12-21 21:23:15 -0500 5412) 		pr_err("mdss mdp resource not initialized yet\n");
33404836cb7e1 (Xiaoming Zhou                 2013-05-21 15:02:42 -0400 5413) 		return -EPROBE_DEFER;
b192f3c2c194b (Xiaoming Zhou                 2012-12-21 21:23:15 -0500 5414) 	}
b192f3c2c194b (Xiaoming Zhou                 2012-12-21 21:23:15 -0500 5415) 
ad8db57f799eb (Padmanabhan Komanduru         2015-05-05 22:45:30 -0700 5416) 	if (pdata->get_fb_node)
ad8db57f799eb (Padmanabhan Komanduru         2015-05-05 22:45:30 -0700 5417) 		node = pdata->get_fb_node(pdev);
ad8db57f799eb (Padmanabhan Komanduru         2015-05-05 22:45:30 -0700 5418) 
2b0b211563d29 (Adrian Salido-Moreno          2012-12-04 21:05:03 -0800 5419) 	if (!node) {
ad8db57f799eb (Padmanabhan Komanduru         2015-05-05 22:45:30 -0700 5420) 		node = of_parse_phandle(pdev->dev.of_node,
ad8db57f799eb (Padmanabhan Komanduru         2015-05-05 22:45:30 -0700 5421) 			"qcom,mdss-fb-map", 0);
ad8db57f799eb (Padmanabhan Komanduru         2015-05-05 22:45:30 -0700 5422) 		if (!node) {
ad8db57f799eb (Padmanabhan Komanduru         2015-05-05 22:45:30 -0700 5423) 			pr_err("Unable to find fb node for device: %s\n",
ad8db57f799eb (Padmanabhan Komanduru         2015-05-05 22:45:30 -0700 5424) 					pdev->name);
ad8db57f799eb (Padmanabhan Komanduru         2015-05-05 22:45:30 -0700 5425) 			return -ENODEV;
ad8db57f799eb (Padmanabhan Komanduru         2015-05-05 22:45:30 -0700 5426) 		}
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 5427) 	}
2b0b211563d29 (Adrian Salido-Moreno          2012-12-04 21:05:03 -0800 5428) 	mdss_pdev = of_find_device_by_node(node->parent);
2b0b211563d29 (Adrian Salido-Moreno          2012-12-04 21:05:03 -0800 5429) 	if (!mdss_pdev) {
2b0b211563d29 (Adrian Salido-Moreno          2012-12-04 21:05:03 -0800 5430) 		pr_err("Unable to find mdss for node: %s\n", node->full_name);
2b0b211563d29 (Adrian Salido-Moreno          2012-12-04 21:05:03 -0800 5431) 		rc = -ENODEV;
2b0b211563d29 (Adrian Salido-Moreno          2012-12-04 21:05:03 -0800 5432) 		goto mdss_notfound;
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 5433) 	}
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 5434) 
649c91d1cd61d (Adrian Salido-Moreno          2015-04-23 18:33:56 -0700 5435) 	pdata->active = true;
2b0b211563d29 (Adrian Salido-Moreno          2012-12-04 21:05:03 -0800 5436) 	fb_pdev = of_find_device_by_node(node);
2b0b211563d29 (Adrian Salido-Moreno          2012-12-04 21:05:03 -0800 5437) 	if (fb_pdev) {
0a547f9587bf8 (Chandan Uddaraju              2013-01-24 14:33:19 -0800 5438) 		rc = mdss_fb_register_extra_panel(fb_pdev, pdata);
7513050611637 (Ujwal Patel                   2013-12-03 21:02:40 -0800 5439) 		if (rc == 0)
7513050611637 (Ujwal Patel                   2013-12-03 21:02:40 -0800 5440) 			master_panel = false;
2b0b211563d29 (Adrian Salido-Moreno          2012-12-04 21:05:03 -0800 5441) 	} else {
2b0b211563d29 (Adrian Salido-Moreno          2012-12-04 21:05:03 -0800 5442) 		pr_info("adding framebuffer device %s\n", dev_name(&pdev->dev));
2b0b211563d29 (Adrian Salido-Moreno          2012-12-04 21:05:03 -0800 5443) 		fb_pdev = of_platform_device_create(node, NULL,
2b0b211563d29 (Adrian Salido-Moreno          2012-12-04 21:05:03 -0800 5444) 				&mdss_pdev->dev);
2c45a80a5fd6e (Mathew Karimpanal             2013-11-14 20:19:37 -0800 5445) 		if (fb_pdev)
2c45a80a5fd6e (Mathew Karimpanal             2013-11-14 20:19:37 -0800 5446) 			fb_pdev->dev.platform_data = pdata;
2b0b211563d29 (Adrian Salido-Moreno          2012-12-04 21:05:03 -0800 5447) 	}
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 5448) 
7513050611637 (Ujwal Patel                   2013-12-03 21:02:40 -0800 5449) 	if (master_panel && mdp_instance->panel_register_done)
b192f3c2c194b (Xiaoming Zhou                 2012-12-21 21:23:15 -0500 5450) 		mdp_instance->panel_register_done(pdata);
a83bd56c966bf (Siddhartha Agrawal            2013-01-31 19:36:15 -0800 5451) 
2b0b211563d29 (Adrian Salido-Moreno          2012-12-04 21:05:03 -0800 5452) mdss_notfound:
2b0b211563d29 (Adrian Salido-Moreno          2012-12-04 21:05:03 -0800 5453) 	of_node_put(node);
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 5454) 	return rc;
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 5455) }
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 5456) EXPORT_SYMBOL(mdss_register_panel);
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 5457) 
b192f3c2c194b (Xiaoming Zhou                 2012-12-21 21:23:15 -0500 5458) int mdss_fb_register_mdp_instance(struct msm_mdp_interface *mdp)
b192f3c2c194b (Xiaoming Zhou                 2012-12-21 21:23:15 -0500 5459) {
b192f3c2c194b (Xiaoming Zhou                 2012-12-21 21:23:15 -0500 5460) 	if (mdp_instance) {
5f1c60463e9eb (Dhaval Patel                  2014-07-11 15:09:12 -0700 5461) 		pr_err("multiple MDP instance registration\n");
b192f3c2c194b (Xiaoming Zhou                 2012-12-21 21:23:15 -0500 5462) 		return -EINVAL;
b192f3c2c194b (Xiaoming Zhou                 2012-12-21 21:23:15 -0500 5463) 	}
b192f3c2c194b (Xiaoming Zhou                 2012-12-21 21:23:15 -0500 5464) 
b192f3c2c194b (Xiaoming Zhou                 2012-12-21 21:23:15 -0500 5465) 	mdp_instance = mdp;
b192f3c2c194b (Xiaoming Zhou                 2012-12-21 21:23:15 -0500 5466) 	return 0;
b192f3c2c194b (Xiaoming Zhou                 2012-12-21 21:23:15 -0500 5467) }
b192f3c2c194b (Xiaoming Zhou                 2012-12-21 21:23:15 -0500 5468) EXPORT_SYMBOL(mdss_fb_register_mdp_instance);
b192f3c2c194b (Xiaoming Zhou                 2012-12-21 21:23:15 -0500 5469) 
a3e74efe224d2 (Laura Abbott                  2013-08-08 14:13:46 -0700 5470) int mdss_fb_get_phys_info(dma_addr_t *start, unsigned long *len, int fb_num)
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 5471) {
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 5472) 	struct fb_info *info;
16ca2e1fd174c (Adrian Salido-Moreno          2012-08-03 10:23:20 -0700 5473) 	struct msm_fb_data_type *mfd;
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 5474) 
2c45a80a5fd6e (Mathew Karimpanal             2013-11-14 20:19:37 -0800 5475) 	if (fb_num >= MAX_FBI_LIST)
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 5476) 		return -EINVAL;
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 5477) 
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 5478) 	info = fbi_list[fb_num];
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 5479) 	if (!info)
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 5480) 		return -ENOENT;
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 5481) 
16ca2e1fd174c (Adrian Salido-Moreno          2012-08-03 10:23:20 -0700 5482) 	mfd = (struct msm_fb_data_type *)info->par;
16ca2e1fd174c (Adrian Salido-Moreno          2012-08-03 10:23:20 -0700 5483) 	if (!mfd)
16ca2e1fd174c (Adrian Salido-Moreno          2012-08-03 10:23:20 -0700 5484) 		return -ENODEV;
16ca2e1fd174c (Adrian Salido-Moreno          2012-08-03 10:23:20 -0700 5485) 
16ca2e1fd174c (Adrian Salido-Moreno          2012-08-03 10:23:20 -0700 5486) 	if (mfd->iova)
16ca2e1fd174c (Adrian Salido-Moreno          2012-08-03 10:23:20 -0700 5487) 		*start = mfd->iova;
16ca2e1fd174c (Adrian Salido-Moreno          2012-08-03 10:23:20 -0700 5488) 	else
16ca2e1fd174c (Adrian Salido-Moreno          2012-08-03 10:23:20 -0700 5489) 		*start = info->fix.smem_start;
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 5490) 	*len = info->fix.smem_len;
16ca2e1fd174c (Adrian Salido-Moreno          2012-08-03 10:23:20 -0700 5491) 
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 5492) 	return 0;
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 5493) }
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 5494) EXPORT_SYMBOL(mdss_fb_get_phys_info);
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 5495) 
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 5496) int __init mdss_fb_init(void)
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 5497) {
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 5498) 	int rc = -ENODEV;
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 5499) 
c747f82604b0f (Jeykumar Sankaran             2016-02-03 18:54:04 -0800 5500) 	if (fb_get_options("msmfb", NULL))
c747f82604b0f (Jeykumar Sankaran             2016-02-03 18:54:04 -0800 5501) 		return rc;
c747f82604b0f (Jeykumar Sankaran             2016-02-03 18:54:04 -0800 5502) 
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 5503) 	if (platform_driver_register(&mdss_fb_driver))
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 5504) 		return rc;
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 5505) 
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 5506) 	return 0;
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 5507) }
a0f6b50eb63bf (Adrian Salido-Moreno          2012-05-29 15:36:08 -0700 5508) 
83408788aa78c (Chandan Uddaraju              2013-03-29 13:14:08 -0700 5509) module_init(mdss_fb_init);
5cdce108f5238 (Sree Sesha Aravind Vadrevu    2014-01-15 17:15:03 -0800 5510) 
5cdce108f5238 (Sree Sesha Aravind Vadrevu    2014-01-15 17:15:03 -0800 5511) int mdss_fb_suspres_panel(struct device *dev, void *data)
5cdce108f5238 (Sree Sesha Aravind Vadrevu    2014-01-15 17:15:03 -0800 5512) {
5cdce108f5238 (Sree Sesha Aravind Vadrevu    2014-01-15 17:15:03 -0800 5513) 	struct msm_fb_data_type *mfd;
92592e399cb0d (Ajay Singh Parmar             2014-08-26 01:12:37 -0700 5514) 	int rc = 0;
5cdce108f5238 (Sree Sesha Aravind Vadrevu    2014-01-15 17:15:03 -0800 5515) 	u32 event;
5cdce108f5238 (Sree Sesha Aravind Vadrevu    2014-01-15 17:15:03 -0800 5516) 
5cdce108f5238 (Sree Sesha Aravind Vadrevu    2014-01-15 17:15:03 -0800 5517) 	if (!data) {
5cdce108f5238 (Sree Sesha Aravind Vadrevu    2014-01-15 17:15:03 -0800 5518) 		pr_err("Device state not defined\n");
5cdce108f5238 (Sree Sesha Aravind Vadrevu    2014-01-15 17:15:03 -0800 5519) 		return -EINVAL;
5cdce108f5238 (Sree Sesha Aravind Vadrevu    2014-01-15 17:15:03 -0800 5520) 	}
5cdce108f5238 (Sree Sesha Aravind Vadrevu    2014-01-15 17:15:03 -0800 5521) 	mfd = dev_get_drvdata(dev);
5cdce108f5238 (Sree Sesha Aravind Vadrevu    2014-01-15 17:15:03 -0800 5522) 	if (!mfd)
5cdce108f5238 (Sree Sesha Aravind Vadrevu    2014-01-15 17:15:03 -0800 5523) 		return 0;
5cdce108f5238 (Sree Sesha Aravind Vadrevu    2014-01-15 17:15:03 -0800 5524) 
5cdce108f5238 (Sree Sesha Aravind Vadrevu    2014-01-15 17:15:03 -0800 5525) 	event = *((bool *) data) ? MDSS_EVENT_RESUME : MDSS_EVENT_SUSPEND;
5cdce108f5238 (Sree Sesha Aravind Vadrevu    2014-01-15 17:15:03 -0800 5526) 
92592e399cb0d (Ajay Singh Parmar             2014-08-26 01:12:37 -0700 5527) 	/* Do not send runtime suspend/resume for HDMI primary */
92592e399cb0d (Ajay Singh Parmar             2014-08-26 01:12:37 -0700 5528) 	if (!mdss_fb_is_hdmi_primary(mfd)) {
92592e399cb0d (Ajay Singh Parmar             2014-08-26 01:12:37 -0700 5529) 		rc = mdss_fb_send_panel_event(mfd, event, NULL);
92592e399cb0d (Ajay Singh Parmar             2014-08-26 01:12:37 -0700 5530) 		if (rc)
92592e399cb0d (Ajay Singh Parmar             2014-08-26 01:12:37 -0700 5531) 			pr_warn("unable to %s fb%d (%d)\n",
92592e399cb0d (Ajay Singh Parmar             2014-08-26 01:12:37 -0700 5532) 				event == MDSS_EVENT_RESUME ?
92592e399cb0d (Ajay Singh Parmar             2014-08-26 01:12:37 -0700 5533) 				"resume" : "suspend",
92592e399cb0d (Ajay Singh Parmar             2014-08-26 01:12:37 -0700 5534) 				mfd->index, rc);
92592e399cb0d (Ajay Singh Parmar             2014-08-26 01:12:37 -0700 5535) 	}
5cdce108f5238 (Sree Sesha Aravind Vadrevu    2014-01-15 17:15:03 -0800 5536) 	return rc;
5cdce108f5238 (Sree Sesha Aravind Vadrevu    2014-01-15 17:15:03 -0800 5537) }
8bd3e27fb64c2 (Jeevan Shriram                2015-04-27 18:44:05 -0700 5538) 
8bd3e27fb64c2 (Jeevan Shriram                2015-04-27 18:44:05 -0700 5539) /*
8bd3e27fb64c2 (Jeevan Shriram                2015-04-27 18:44:05 -0700 5540)  * mdss_fb_report_panel_dead() - Sends the PANEL_ALIVE=0 status to HAL layer.
8bd3e27fb64c2 (Jeevan Shriram                2015-04-27 18:44:05 -0700 5541)  * @mfd   : frame buffer structure associated with fb device.
8bd3e27fb64c2 (Jeevan Shriram                2015-04-27 18:44:05 -0700 5542)  *
8bd3e27fb64c2 (Jeevan Shriram                2015-04-27 18:44:05 -0700 5543)  * This function is called if the panel fails to respond as expected to
8bd3e27fb64c2 (Jeevan Shriram                2015-04-27 18:44:05 -0700 5544)  * the register read/BTA or if the TE signal is not coming as expected
8bd3e27fb64c2 (Jeevan Shriram                2015-04-27 18:44:05 -0700 5545)  * from the panel. The function sends the PANEL_ALIVE=0 status to HAL
8bd3e27fb64c2 (Jeevan Shriram                2015-04-27 18:44:05 -0700 5546)  * layer.
8bd3e27fb64c2 (Jeevan Shriram                2015-04-27 18:44:05 -0700 5547)  */
8bd3e27fb64c2 (Jeevan Shriram                2015-04-27 18:44:05 -0700 5548) void mdss_fb_report_panel_dead(struct msm_fb_data_type *mfd)
8bd3e27fb64c2 (Jeevan Shriram                2015-04-27 18:44:05 -0700 5549) {
8bd3e27fb64c2 (Jeevan Shriram                2015-04-27 18:44:05 -0700 5550) 	char *envp[2] = {"PANEL_ALIVE=0", NULL};
8bd3e27fb64c2 (Jeevan Shriram                2015-04-27 18:44:05 -0700 5551) 	struct mdss_panel_data *pdata =
8bd3e27fb64c2 (Jeevan Shriram                2015-04-27 18:44:05 -0700 5552) 		dev_get_platdata(&mfd->pdev->dev);
8bd3e27fb64c2 (Jeevan Shriram                2015-04-27 18:44:05 -0700 5553) 	if (!pdata) {
8bd3e27fb64c2 (Jeevan Shriram                2015-04-27 18:44:05 -0700 5554) 		pr_err("Panel data not available\n");
8bd3e27fb64c2 (Jeevan Shriram                2015-04-27 18:44:05 -0700 5555) 		return;
8bd3e27fb64c2 (Jeevan Shriram                2015-04-27 18:44:05 -0700 5556) 	}
be48303843a06 (SGCMarkus                     2019-07-09 09:54:59 +0200 5557) #if !defined(CONFIG_LGE_PANEL_RECOVERY)
be48303843a06 (SGCMarkus                     2019-07-09 09:54:59 +0200 5558) 	return;
be48303843a06 (SGCMarkus                     2019-07-09 09:54:59 +0200 5559) #endif
be48303843a06 (SGCMarkus                     2019-07-09 09:54:59 +0200 5560) #if defined(CONFIG_LGE_DISPLAY_COMMON)
be48303843a06 (SGCMarkus                     2019-07-09 09:54:59 +0200 5561) 	if (mfd->recovery) {
be48303843a06 (SGCMarkus                     2019-07-09 09:54:59 +0200 5562) 		pr_info("[Display] Already in recovery!!\n");
be48303843a06 (SGCMarkus                     2019-07-09 09:54:59 +0200 5563) 		return;
be48303843a06 (SGCMarkus                     2019-07-09 09:54:59 +0200 5564) 	} else {
be48303843a06 (SGCMarkus                     2019-07-09 09:54:59 +0200 5565) 		mfd->recovery = true;
8bd3e27fb64c2 (Jeevan Shriram                2015-04-27 18:44:05 -0700 5566) 
be48303843a06 (SGCMarkus                     2019-07-09 09:54:59 +0200 5567) 	}
be48303843a06 (SGCMarkus                     2019-07-09 09:54:59 +0200 5568) #endif
8bd3e27fb64c2 (Jeevan Shriram                2015-04-27 18:44:05 -0700 5569) 	pdata->panel_info.panel_dead = true;
8bd3e27fb64c2 (Jeevan Shriram                2015-04-27 18:44:05 -0700 5570) 	kobject_uevent_env(&mfd->fbi->dev->kobj,
8bd3e27fb64c2 (Jeevan Shriram                2015-04-27 18:44:05 -0700 5571) 		KOBJ_CHANGE, envp);
8bd3e27fb64c2 (Jeevan Shriram                2015-04-27 18:44:05 -0700 5572) 	pr_err("Panel has gone bad, sending uevent - %s\n", envp[0]);
8bd3e27fb64c2 (Jeevan Shriram                2015-04-27 18:44:05 -0700 5573) }
90fd65ba93d5c (Krishna Manikandan            2016-12-28 17:58:39 +0530 5574) 
90fd65ba93d5c (Krishna Manikandan            2016-12-28 17:58:39 +0530 5575) 
90fd65ba93d5c (Krishna Manikandan            2016-12-28 17:58:39 +0530 5576) /*
90fd65ba93d5c (Krishna Manikandan            2016-12-28 17:58:39 +0530 5577)  * mdss_fb_calc_fps() - Calculates fps value.
90fd65ba93d5c (Krishna Manikandan            2016-12-28 17:58:39 +0530 5578)  * @mfd   : frame buffer structure associated with fb device.
90fd65ba93d5c (Krishna Manikandan            2016-12-28 17:58:39 +0530 5579)  *
90fd65ba93d5c (Krishna Manikandan            2016-12-28 17:58:39 +0530 5580)  * This function is called at frame done. It counts the number
90fd65ba93d5c (Krishna Manikandan            2016-12-28 17:58:39 +0530 5581)  * of frames done for every 1 sec. Stores the value in measured_fps.
90fd65ba93d5c (Krishna Manikandan            2016-12-28 17:58:39 +0530 5582)  * measured_fps value is 10 times the calculated fps value.
90fd65ba93d5c (Krishna Manikandan            2016-12-28 17:58:39 +0530 5583)  * For example, measured_fps= 594 for calculated fps of 59.4
90fd65ba93d5c (Krishna Manikandan            2016-12-28 17:58:39 +0530 5584)  */
90fd65ba93d5c (Krishna Manikandan            2016-12-28 17:58:39 +0530 5585) void mdss_fb_calc_fps(struct msm_fb_data_type *mfd)
90fd65ba93d5c (Krishna Manikandan            2016-12-28 17:58:39 +0530 5586) {
90fd65ba93d5c (Krishna Manikandan            2016-12-28 17:58:39 +0530 5587) 	ktime_t current_time_us;
90fd65ba93d5c (Krishna Manikandan            2016-12-28 17:58:39 +0530 5588) 	u64 fps, diff_us;
90fd65ba93d5c (Krishna Manikandan            2016-12-28 17:58:39 +0530 5589) 
90fd65ba93d5c (Krishna Manikandan            2016-12-28 17:58:39 +0530 5590) 	current_time_us = ktime_get();
90fd65ba93d5c (Krishna Manikandan            2016-12-28 17:58:39 +0530 5591) 	diff_us = (u64)ktime_us_delta(current_time_us,
90fd65ba93d5c (Krishna Manikandan            2016-12-28 17:58:39 +0530 5592) 			mfd->fps_info.last_sampled_time_us);
90fd65ba93d5c (Krishna Manikandan            2016-12-28 17:58:39 +0530 5593) 	mfd->fps_info.frame_count++;
90fd65ba93d5c (Krishna Manikandan            2016-12-28 17:58:39 +0530 5594) 
90fd65ba93d5c (Krishna Manikandan            2016-12-28 17:58:39 +0530 5595) 	if (diff_us >= MDP_TIME_PERIOD_CALC_FPS_US) {
90fd65ba93d5c (Krishna Manikandan            2016-12-28 17:58:39 +0530 5596) 		fps = ((u64)mfd->fps_info.frame_count) * 10000000;
90fd65ba93d5c (Krishna Manikandan            2016-12-28 17:58:39 +0530 5597) 		do_div(fps, diff_us);
90fd65ba93d5c (Krishna Manikandan            2016-12-28 17:58:39 +0530 5598) 		mfd->fps_info.measured_fps = (unsigned int)fps;
90fd65ba93d5c (Krishna Manikandan            2016-12-28 17:58:39 +0530 5599) 		pr_debug(" MDP_FPS for fb%d is %d.%d\n",
90fd65ba93d5c (Krishna Manikandan            2016-12-28 17:58:39 +0530 5600) 			mfd->index, (unsigned int)fps/10, (unsigned int)fps%10);
90fd65ba93d5c (Krishna Manikandan            2016-12-28 17:58:39 +0530 5601) 		mfd->fps_info.last_sampled_time_us = current_time_us;
90fd65ba93d5c (Krishna Manikandan            2016-12-28 17:58:39 +0530 5602) 		mfd->fps_info.frame_count = 0;
90fd65ba93d5c (Krishna Manikandan            2016-12-28 17:58:39 +0530 5603) 	}
90fd65ba93d5c (Krishna Manikandan            2016-12-28 17:58:39 +0530 5604) }
cdc3ace6a8a1c (Abhijit Kulkarni              2017-02-08 16:41:16 -0800 5605) 
cdc3ace6a8a1c (Abhijit Kulkarni              2017-02-08 16:41:16 -0800 5606) void mdss_fb_idle_pc(struct msm_fb_data_type *mfd)
cdc3ace6a8a1c (Abhijit Kulkarni              2017-02-08 16:41:16 -0800 5607) {
cdc3ace6a8a1c (Abhijit Kulkarni              2017-02-08 16:41:16 -0800 5608) 	struct mdss_overlay_private *mdp5_data = mfd_to_mdp5_data(mfd);
cdc3ace6a8a1c (Abhijit Kulkarni              2017-02-08 16:41:16 -0800 5609) 
cdc3ace6a8a1c (Abhijit Kulkarni              2017-02-08 16:41:16 -0800 5610) 	if (mdss_fb_is_power_off(mfd))
cdc3ace6a8a1c (Abhijit Kulkarni              2017-02-08 16:41:16 -0800 5611) 		return;
cdc3ace6a8a1c (Abhijit Kulkarni              2017-02-08 16:41:16 -0800 5612) 
cdc3ace6a8a1c (Abhijit Kulkarni              2017-02-08 16:41:16 -0800 5613) 	if ((mfd->panel_info->type == MIPI_CMD_PANEL) && mdp5_data) {
cdc3ace6a8a1c (Abhijit Kulkarni              2017-02-08 16:41:16 -0800 5614) 		pr_debug("Notify fb%d idle power collapsed\n", mfd->index);
cdc3ace6a8a1c (Abhijit Kulkarni              2017-02-08 16:41:16 -0800 5615) 		sysfs_notify(&mfd->fbi->dev->kobj, NULL, "idle_power_collapse");
cdc3ace6a8a1c (Abhijit Kulkarni              2017-02-08 16:41:16 -0800 5616) 	}
cdc3ace6a8a1c (Abhijit Kulkarni              2017-02-08 16:41:16 -0800 5617) }
